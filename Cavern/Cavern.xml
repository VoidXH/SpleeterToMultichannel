<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cavern</name>
    </assembly>
    <members>
        <member name="T:Cavern.Channel">
            <summary>
            Spatially positioned audio output channel.
            </summary>
        </member>
        <member name="P:Cavern.Channel.X">
            <summary>
            Rotation around the vertical axis in degrees: elevation.
            </summary>
        </member>
        <member name="P:Cavern.Channel.Y">
            <summary>
            Rotation around the horizontal axis in degrees, clockwise: azimuth.
            </summary>
        </member>
        <member name="P:Cavern.Channel.LFE">
            <summary>
            True for channels carrying only Low Frequency Effects.
            </summary>
        </member>
        <member name="P:Cavern.Channel.IsScreenChannel">
            <summary>
            This channel is part of the screen channels, and should be behind the screen in a theatre.
            </summary>
        </member>
        <member name="P:Cavern.Channel.SphericalPos">
            <summary>
            Position on a sphere with the radius of 1.
            </summary>
        </member>
        <member name="P:Cavern.Channel.CubicalPos">
            <summary>
            Position on a cube with a side length of 2.
            </summary>
        </member>
        <member name="P:Cavern.Channel.SpatialPos">
            <summary>
            Position in space. <see cref="P:Cavern.Channel.SphericalPos"/> in Studio environments, <see cref="P:Cavern.Channel.CubicalPos"/> otherwise.
            </summary>
        </member>
        <member name="P:Cavern.Channel.Distance">
            <summary>
            The distance from the listener, relative to the center channel. Magnitude of <see cref="P:Cavern.Channel.SpatialPos"/>.
            </summary>
        </member>
        <member name="F:Cavern.Channel.lowFrequency">
            <summary>
            True for channels carrying only Low Frequency Effects.
            </summary>
        </member>
        <member name="M:Cavern.Channel.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a channel with given rotation values.
            </summary>
            <param name="x">Rotation around the vertical axis in degrees: elevation</param>
            <param name="y">Rotation around the horizontal axis in degrees: azimuth</param>
        </member>
        <member name="M:Cavern.Channel.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            Constructs a channel with given rotation values and LFE status.
            </summary>
            <param name="x">Rotation around the vertical axis in degrees: elevation</param>
            <param name="y">Rotation around the horizontal axis in degrees: azimuth</param>
            <param name="LFE">True for channels carrying only Low Frequency Effects</param>
        </member>
        <member name="M:Cavern.Channel.#ctor(System.Numerics.Vector3,System.Boolean)">
            <summary>
            Constructs a channel that is placed in the same direction as the given position.
            </summary>
            <remarks>The <paramref name="location"/> is not scaled with <see cref="P:Cavern.Listener.EnvironmentSize"/>.</remarks>
            <param name="location">Spatial position of the channel</param>
            <param name="LFE">True for channels carrying only Low Frequency Effects</param>
        </member>
        <member name="M:Cavern.Channel.IsLFE(System.Int32)">
            <summary>
            Get if a channel is LFE in the current layout.
            </summary>
        </member>
        <member name="M:Cavern.Channel.IsLFE(System.Int32,System.Int32)">
            <summary>
            Get if a channel is LFE for a given channel count.
            </summary>
        </member>
        <member name="M:Cavern.Channel.SymmetryCheck">
            <summary>
            Recalculates symmetry when a channel's position is changed.
            </summary>
        </member>
        <member name="M:Cavern.Channel.Move(System.Single,System.Single)">
            <summary>
            Move this channel to a new position.
            </summary>
            <param name="x">Rotation around the vertical axis in degrees: elevation</param>
            <param name="y">Rotation around the horizontal axis in degrees: azimuth</param>
        </member>
        <member name="M:Cavern.Channel.Rotate(System.Single,System.Single)">
            <summary>
            Rotate this channel.
            </summary>
            <param name="x">Rotation around the vertical axis in degrees: height</param>
            <param name="y">Rotation around the horizontal axis in degrees</param>
        </member>
        <member name="M:Cavern.Channel.Equals(Cavern.Channel)">
            <summary>
            Check if two channels are the same.
            </summary>
        </member>
        <member name="M:Cavern.Channel.Equals(System.Object)">
            <summary>
            Check if the other object is also a <see cref="T:Cavern.Channel"/> and equal to this.
            </summary>
        </member>
        <member name="M:Cavern.Channel.GetHashCode">
            <summary>
            Get a hash value representing this channel.
            </summary>
        </member>
        <member name="M:Cavern.Channel.ToString">
            <summary>
            Display channel position when converted to string.
            </summary>
        </member>
        <member name="M:Cavern.Channel.Recalculate">
            <summary>
            Recalculates properties.
            </summary>
        </member>
        <member name="M:Cavern.Channel.SetPosition(System.Single,System.Single)">
            <summary>
            Set the position of the channel and do all neccessary processing.
            </summary>
        </member>
        <member name="T:Cavern.Channels.ChannelPrototype">
            <summary>
            Light audio channel information structure.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.FrontLeft">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.FrontRight">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.FrontCenter">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ScreenLFE">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.RearLeft">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.RearRight">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.SideLeft">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.SideRight">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.FrontLeftCenter">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.FrontRightCenter">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.HearingImpaired">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.VisuallyImpaired">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.Unused">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.MotionData">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ExternalData">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.TopFrontLeft">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.TopFrontRight">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.TopSideLeft">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.TopSideRight">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.SignLanguage">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.BottomSurround">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.TopFrontCenter">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.GodsVoice">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.RearCenter">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.WideLeft">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.WideRight">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.TopRearLeft">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.TopRearRight">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.TopRearCenter">
            <summary>
            Possible channels to use in layouts.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.AlternativePositions">
            <summary>
            Rendering positions of standard channels in a non-standard cube's corners, indexed by <see cref="T:Cavern.Channels.ReferenceChannel"/>s.
            </summary>
            <remarks>Internal Cavern channel positions are not the same.</remarks>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.Mapping">
            <summary>
            Converts the <see cref="T:Cavern.Channels.ReferenceChannel"/> values to a <see cref="T:Cavern.Channels.ChannelPrototype"/>.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref100">
            <summary>
            Standard 1.0.0 setup (C).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref200">
            <summary>
            Standard 2.0.0 setup (L, R).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref300">
            <summary>
            Standard 3.0.0 setup (L, R, C).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref400">
            <summary>
            Standard 4.0.0 setup (L, R, SL, SR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref500">
            <summary>
            Standard 5.0.0 setup (L, R, C, SL, SR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref510">
            <summary>
            Standard 5.1.0 setup (L, R, C, LFE, SL, SR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref514">
            <summary>
            Standard 5.1.4 setup (L, R, C, LFE, SL, SR, TFL, TFR, TRL, TRR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref516">
            <summary>
            5.1.6 setup with top sides (L, R, C, LFE, SL, SR, TFL, TFR, TSL, TSR, TSR, TRL, TRR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.wav516">
            <summary>
            Standard 5.1.6 setup (L, R, C, LFE, SL, SR, TFL, TFC, TFR, TRL, TRC, TRR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref700">
            <summary>
            Standard 7.0.0 setup (L, R, C, RL, RR, SL, SR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref702">
            <summary>
            Standard 7.0.2 setup (L, R, C, RL, RR, SL, SR, TFL, TFR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref704">
            <summary>
            Standard 7.0.4 setup (L, R, C, RL, RR, SL, SR, TFL, TFR, TRL, TRR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.wav706">
            <summary>
            WAVE-standard 7.0.6 setup (L, R, C, RL, RR, SL, SR, TFL, TFC, TFR, TRL, TRC, TRR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref710">
            <summary>
            Standard 7.1.0 setup (L, R, C, LFE, RL, RR, SL, SR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref712">
            <summary>
            Standard 7.1.2 setup (L, R, C, LFE, RL, RR, SL, SR, TFL, TFR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref712_1">
            <summary>
            7.1.2.1 (out-of-order Cavern XL DCP) setup (L, R, C, LFE, RL, RR, SL, SR, TFL, TFR, BS).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref714">
            <summary>
            Standard 7.1.4 setup (L, R, C, LFE, RL, RR, SL, SR, TFL, TFR, TRL, TRR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref716">
            <summary>
            7.1.6 setup with top sides (L, R, C, LFE, RL, RR, SL, SR, TFL, TFR, TSL, TSR, TSR, TRL, TRR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.wav716">
            <summary>
            Standard 7.1.6 setup (L, R, C, LFE, RL, RR, SL, SR, TFL, TFC, TFR, TRL, TRC, TRR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref810">
            <summary>
            DCP standard 8.1.0 setup (L, R, C, LFE, RL, RR, SL, SR, RC).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.wav906">
            <summary>
            Standard 9.0.6 setup (L, R, C, RL, RR, SL, SR, WL, WR, TFL, TFC, TFR, TRL, TRC, TRR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref914">
            <summary>
            Standard 9.1.4 setup (L, R, C, LFE, RL, RR, SL, SR, WL, WR, TFL, TFR, TRL, TRR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref916">
            <summary>
            9.1.6 setup with top sides (L, R, C, LFE, RL, RR, SL, SR, WL, WR, TFL, TFR, TSL, TSR, TSR, TRL, TRR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.wav916">
            <summary>
            Standard 9.1.6 setup (L, R, C, LFE, RL, RR, SL, SR, WL, WR, TFL, TFC, TFR, TRL, TRC, TRR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref111">
            <summary>
            Standard 11.1 DCP (L, R, C, LFE, SL, SR, TFL, TFR, TFC, GV, TSL, TSR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref111Plus">
            <summary>
            Standard 11.1 DCP with MD/ES signals (L, R, C, LFE, SL, SR, TFL, TFR, TFC, GV, TSL, TSR, MD, ES).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.ref121">
            <summary>
            Standard 12-Track DCP (L, R, C, LFE, RL, RR, TFC, SL, SR, TFL, TFR, TSL, TSR).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.refCavern">
            <summary>
            Standard Cavern DCP with all signals (L, R, C, LFE, SL, SR, HI, VI, TFL, TFR, RL, RR, MD, ES, SL).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.refCavernXL">
            <summary>
            Standard Cavern XL DCP with all signals (L, R, C, LFE, SL, SR, HI, VI, TFL, TFR, RL, RR, MD, ES, SL, BS).
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.HomeStandardMatrix">
            <summary>
            Industry standard channel orders for each input channel count.
            </summary>
            <remarks>Matrices with 8+ channels are DCP orders, with messy standardization, and are
            unused in commercial applications. Manual revision before each workflow is recommended
            when working with non-5.1 DCPs or content with 8+ channels.</remarks>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.IndustryStandardMatrix">
            <summary>
            Industry standard channel orders for each input channel count.
            </summary>
            <remarks>Matrices with 8+ channels are DCP orders, with messy standardization, and are
            unused in commercial applications. Manual revision before each workflow is recommended
            when working with non-5.1 DCPs or content with 8+ channels.</remarks>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.frontLeftMark">
            <summary>
            Semi-standard (Equalizer APO) channel names.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.frontRightMark">
            <summary>
            Semi-standard (Equalizer APO) channel names.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.frontCenterMark">
            <summary>
            Semi-standard (Equalizer APO) channel names.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.screenLFEMark">
            <summary>
            Semi-standard (Equalizer APO) channel names.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.subwooferMark">
            <summary>
            Semi-standard (Equalizer APO) channel names.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.rearLeftMark">
            <summary>
            Semi-standard (Equalizer APO) channel names.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.rearRightMark">
            <summary>
            Semi-standard (Equalizer APO) channel names.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.sideLeftMark">
            <summary>
            Semi-standard (Equalizer APO) channel names.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.sideRightMark">
            <summary>
            Semi-standard (Equalizer APO) channel names.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.Y">
            <summary>
            Horizontal axis angle.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.X">
            <summary>
            Vertical axis angle.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.Name">
            <summary>
            Channel name.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.LFE">
            <summary>
            True if the channel is used for Low Frequency Effects.
            </summary>
        </member>
        <member name="F:Cavern.Channels.ChannelPrototype.Muted">
            <summary>
            Mute status.
            </summary>
            <remarks>Some channels should not be played back on the spatial master,
            like hearing/visually impaired tracks.</remarks>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.#ctor(System.Single,System.String,System.Boolean,System.Boolean)">
            <summary>
            Standard channel constructor.
            </summary>
            <param name="y">Horizontal axis angle</param>
            <param name="name">Channel name</param>
            <param name="LFE">True if the channel is used for Low Frequency Effects</param>
            <param name="muted">Mute status</param>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.#ctor(System.Single,System.Single,System.String)">
            <summary>
            Spatial channel constructor.
            </summary>
            <param name="y">Horizontal axis angle</param>
            <param name="x">Vertical axis angle</param>
            <param name="name">Channel name</param>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.FromStandardName(System.String)">
            <summary>
            Converts a standard channel shorthand to a <see cref="T:Cavern.Channels.ChannelPrototype"/>.
            </summary>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.GetStandardMatrix(System.Int32)">
            <summary>
            Gets a home cinema standard channel matrix for a given channel count.
            </summary>
            <remarks>If the channel count is larger than the largest supported layout, it will be filled with
            <see cref="F:Cavern.Channels.ReferenceChannel.Unknown"/>.</remarks>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.GetIndustryStandardMatrix(System.Int32)">
            <summary>
            Gets an industry standard channel matrix for a given channel count.
            </summary>
            <remarks>If the channel count is larger than the largest supported layout, it will be filled with
            <see cref="F:Cavern.Channels.ReferenceChannel.Unknown"/>.</remarks>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.Get(System.Int32,System.Int32)">
            <summary>
            Get a <paramref name="channel"/>'s <see cref="T:Cavern.Channels.ChannelPrototype"/> of the home standard layout
            with a given number of <paramref name="channels"/>.
            </summary>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.Get(Cavern.Channels.ReferenceChannel[])">
            <summary>
            Convert a mapping of <see cref="T:Cavern.Channels.ReferenceChannel"/>s to <see cref="T:Cavern.Channels.ChannelPrototype"/>s.
            </summary>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.GetNames(Cavern.Channels.ReferenceChannel[])">
            <summary>
            Convert a mapping of <see cref="T:Cavern.Channels.ReferenceChannel"/>s to the names of the channels.
            </summary>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.GetShortNames(Cavern.Channels.ReferenceChannel[])">
            <summary>
            Convert a mapping of <see cref="T:Cavern.Channels.ReferenceChannel"/>s to channel name initials.
            </summary>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.ToAlternativePositions(Cavern.Channels.ChannelPrototype[])">
            <summary>
            Convert a prototype array to their corresponding alternative positions in the current environment.
            </summary>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.ToAlternativePositions(Cavern.Channels.ReferenceChannel[])">
            <summary>
            Convert a prototype array to their corresponding alternative positions in the current environment.
            </summary>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.ToPositions(Cavern.Channels.ChannelPrototype[])">
            <summary>
            Convert a prototype array to their corresponding positions in the current environment.
            </summary>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.ToPositions(Cavern.Channels.ReferenceChannel[])">
            <summary>
            Convert a prototype array to their corresponding positions in the current environment.
            </summary>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.ToLayout(Cavern.Channels.ChannelPrototype[])">
            <summary>
            Convert a prototype array to a <see cref="T:Cavern.Channel"/> array that can be set in <see cref="P:Cavern.Listener.Channels"/>.
            </summary>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.ToLayout(Cavern.Channels.ReferenceChannel[])">
            <summary>
            Convert a reference array to a <see cref="T:Cavern.Channel"/> array that can be set in <see cref="P:Cavern.Listener.Channels"/>.
            </summary>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.Equals(Cavern.Channels.ChannelPrototype)">
            <summary>
            Check if two channel prototypes are the same.
            </summary>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.ToString">
            <summary>
            Human-readable channel prototype data.
            </summary>
        </member>
        <member name="M:Cavern.Channels.ChannelPrototype.GetStandardMatrix(Cavern.Channels.ReferenceChannel[][],System.Int32)">
            <summary>
            Get the standard matrix from one of the standard matrix databases.
            </summary>
        </member>
        <member name="T:Cavern.Channels.EqualizerAPOUtils">
            <summary>
            Helper functions for handling Equalizer APO configuration files.
            </summary>
        </member>
        <member name="M:Cavern.Channels.EqualizerAPOUtils.GetReferenceChannel(System.String)">
            <summary>
            Converts Equalizer APO's channel names to <see cref="T:Cavern.Channels.ReferenceChannel"/> values.
            </summary>
        </member>
        <member name="M:Cavern.Channels.EqualizerAPOUtils.GetChannelLabel(System.Int32,System.Int32)">
            <summary>
            Get Equalizer APO's label for a channel of a given channel count.
            </summary>
        </member>
        <member name="M:Cavern.Channels.EqualizerAPOUtils.GetChannelLabel(Cavern.Channels.ReferenceChannel)">
            <summary>
            Get Equalizer APO's label for a given reference channel.
            </summary>
        </member>
        <member name="F:Cavern.Channels.EqualizerAPOUtils.APO40">
            <summary>
            Channels in the 4.0 layout of Equalizer APO.
            </summary>
        </member>
        <member name="F:Cavern.Channels.EqualizerAPOUtils.APO51">
            <summary>
            Channels in the 5.1 layout of Equalizer APO.
            </summary>
        </member>
        <member name="F:Cavern.Channels.EqualizerAPOUtils.APO71">
            <summary>
            Channels in the 7.1 layout of Equalizer APO.
            </summary>
        </member>
        <member name="T:Cavern.Channels.ReferenceChannel">
            <summary>
            Possible channels in channel-based legacy systems.
            </summary>
            <remarks>The standard 7.1 layout is the first 8 entries. When you update this, don't forget:<br />
            - Cavern.Format.Renderers.Renderer<br />
            - Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMConsts<br />
            - <see cref="F:Cavern.Channels.ChannelPrototype.Mapping"/></remarks>
        </member>
        <member name="T:Cavern.Channels.ReferenceChannelExtensions">
            <summary>
            Extension functions for reference channels.
            </summary>
        </member>
        <member name="M:Cavern.Channels.ReferenceChannelExtensions.GetShortName(Cavern.Channels.ReferenceChannel)">
            <summary>
            Get the first letters of each word in the channel's name, like TFL from Top Front Left.
            </summary>
        </member>
        <member name="T:Cavern.Clip">
            <summary>
            Audio content.
            </summary>
        </member>
        <member name="P:Cavern.Clip.Name">
            <summary>
            Name of the clip.
            </summary>
        </member>
        <member name="P:Cavern.Clip.Channels">
            <summary>
            Channel count for the clip.
            </summary>
        </member>
        <member name="P:Cavern.Clip.Samples">
            <summary>
            The length of the clip in samples, for a single channel.
            </summary>
        </member>
        <member name="P:Cavern.Clip.Length">
            <summary>
            The length of the clip in seconds.
            </summary>
        </member>
        <member name="P:Cavern.Clip.SampleRate">
            <summary>
            Sampling rate of the clip.
            </summary>
        </member>
        <member name="F:Cavern.Clip.data">
            <summary>
            Samples for each channel.
            </summary>
        </member>
        <member name="M:Cavern.Clip.#ctor(Cavern.MultichannelWaveform,System.Int32)">
            <summary>
            Audio content.
            </summary>
            <param name="data">Audio data, with the size of [channels][samples for given channel]</param>
            <param name="sampleRate">Sample rate</param>
        </member>
        <member name="M:Cavern.Clip.#ctor(System.Single[],System.Int32,System.Int32)">
            <summary>
            Audio content.
            </summary>
            <param name="data">Audio data, with interlaced channels</param>
            <param name="channels">Channel count</param>
            <param name="sampleRate">Sample rate</param>
        </member>
        <member name="M:Cavern.Clip.op_Implicit(Cavern.Clip)~System.Boolean">
            <summary>
            Implicit null check.
            </summary>
        </member>
        <member name="M:Cavern.Clip.GetData(Cavern.MultichannelWaveform,System.Int32)">
            <summary>
            Fills an array with sample data from the clip.
            Clip data overflows, and free samples are filled with the beginning of the Clip.
            </summary>
            <param name="output">Audio data cache</param>
            <param name="offset">Offset from the beginning of the clip in samples, for a single channel</param>
            <returns>The operation was successful as the channel counts matched.</returns>
        </member>
        <member name="M:Cavern.Clip.GetDataNonLooping(Cavern.MultichannelWaveform,System.Int32)">
            <summary>
            Fills an array with sample data from the clip.
            Clip data doesn't overflow and free samples are filled with zeros.
            </summary>
            <param name="output">Audio data cache</param>
            <param name="offset">Offset from the beginning of the clip in samples, for a single channel</param>
            <returns>The operation was successful as the channel counts matched.</returns>
        </member>
        <member name="M:Cavern.Clip.GetData(System.Single[],System.Int32)">
            <summary>
            Fills an array with sample data from the clip.
            Clip data overflows, and free samples are filled with the beginning of the Clip.
            </summary>
            <param name="output">Audio data cache</param>
            <param name="offset">Offset from the beginning of the clip in samples, for a single channel</param>
            <returns>The operation was successful as the channel counts matched.</returns>
        </member>
        <member name="M:Cavern.Clip.GetData(System.Single[],System.Int32,System.Int32)">
            <summary>
            Fills an array with a single channel's sample data from the clip.
            Clip data overflows, and free samples are filled with the beginning of the Clip.
            </summary>
            <param name="output">Audio data cache</param>
            <param name="channel">Channel ID to get samples from</param>
            <param name="offset">Offset from the beginning of the clip in samples, for a single channel</param>
            <returns>The operation was successful as the channel counts matched.</returns>
        </member>
        <member name="M:Cavern.Clip.GetDataNonLooping(System.Single[],System.Int32)">
            <summary>
            Fills an array with sample data from the clip. Clip data doesn't overflow and free samples are filled with zeros.
            </summary>
            <param name="output">Audio data cache</param>
            <param name="offset">Offset from the beginning of the clip in samples, for a single channel</param>
            <returns>The operation was successful as the channel counts matched.</returns>
        </member>
        <member name="M:Cavern.Clip.SetData(Cavern.MultichannelWaveform,System.Int32)">
            <summary>
            Overwrite samples in this clip.
            </summary>
            <param name="input">Data source</param>
            <param name="offset">Offset from the beginning of the clip in samples, for a single channel</param>
            <returns>The operation was successful as the channel counts matched.</returns>
        </member>
        <member name="M:Cavern.Clip.SetData(System.Single[],System.Int32)">
            <summary>
            Overwrite samples in this clip.
            </summary>
            <param name="input">Data source</param>
            <param name="offset">Offset from the beginning of the clip in samples, for a single channel</param>
            <returns>The operation was successful as the channel counts matched.</returns>
        </member>
        <member name="T:Cavern.Filters.Allpass">
            <summary>
            Simple first-order allpass filter.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Allpass.#ctor(System.Int32,System.Double)">
            <summary>
            Simple first-order allpass filter with maximum flatness and no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
        </member>
        <member name="M:Cavern.Filters.Allpass.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Simple first-order allpass filter with no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
        </member>
        <member name="M:Cavern.Filters.Allpass.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Simple first-order allpass filter.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
            <param name="gain">Gain of the filter in decibels</param>
        </member>
        <member name="M:Cavern.Filters.Allpass.Reset(System.Single,System.Single,System.Single)">
            <summary>
            Reset the parameters specifically for the derived filter.
            </summary>
            <param name="cosW0">Cosine of omega0</param>
            <param name="alpha">Value of the alpha parameter</param>
            <param name="divisor">1 / a0, as a0 is the same for all biquad filters</param>
        </member>
        <member name="T:Cavern.Filters.Bandpass">
            <summary>
            Simple first-order bandpass filter.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Bandpass.#ctor(System.Int32,System.Double)">
            <summary>
            Simple first-order bandpass filter with maximum flatness and no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
        </member>
        <member name="M:Cavern.Filters.Bandpass.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Simple first-order bandpass filter with no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
        </member>
        <member name="M:Cavern.Filters.Bandpass.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Simple first-order bandpass filter.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
            <param name="gain">Gain of the filter in decibels</param>
        </member>
        <member name="M:Cavern.Filters.Bandpass.Reset(System.Single,System.Single,System.Single)">
            <summary>
            Reset the parameters specifically for the derived filter.
            </summary>
            <param name="cosW0">Cosine of omega0</param>
            <param name="alpha">Value of the alpha parameter</param>
            <param name="divisor">1 / a0, as a0 is the same for all biquad filters</param>
        </member>
        <member name="T:Cavern.Filters.BandpassFlat">
            <summary>
            Combination of a lowpass and a highpass filter.
            </summary>
        </member>
        <member name="M:Cavern.Filters.BandpassFlat.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Combination of a lowpass and a highpass filter with 24 dB/octave rolloffs and no additional gain.
            </summary>
            <param name="lowFreq">Low frequency (highpass) cutoff knee</param>
            <param name="highFreq">High frequency (lowpass) cutoff knee</param>
            <param name="sampleRate">Sample rate of the system to be EQ'd</param>
        </member>
        <member name="M:Cavern.Filters.BandpassFlat.#ctor(System.Double,System.Double,System.Int32,System.Double,System.Int32)">
            <summary>
            Combination of a lowpass and a highpass filter with custom Q-factor and slope, but no additional gain.
            </summary>
            <param name="lowFreq">Low frequency (highpass) cutoff knee</param>
            <param name="highFreq">High frequency (lowpass) cutoff knee</param>
            <param name="sampleRate">Sample rate of the system to be EQ'd</param>
            <param name="q">Q-factor of the filter</param>
            <param name="order">Each order increases the slope with 6 dB/octave</param>
        </member>
        <member name="M:Cavern.Filters.BandpassFlat.#ctor(System.Double,System.Double,System.Int32,System.Double,System.Int32,System.Double)">
            <summary>
            Combination of a lowpass and a highpass filter with custom Q-factor, slopa, and additional gain.
            </summary>
            <param name="lowFreq">Low frequency (highpass) cutoff knee</param>
            <param name="highFreq">High frequency (lowpass) cutoff knee</param>
            <param name="sampleRate">Sample rate of the system to be EQ'd</param>
            <param name="q">Q-factor of the filter</param>
            <param name="order">Each order increases the slope with 6 dB/octave</param>
            <param name="gain">Filter gain</param>
        </member>
        <member name="M:Cavern.Filters.BandpassFlat.Process(System.Single[])">
            <summary>
            Apply bandpass on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
        </member>
        <member name="M:Cavern.Filters.BandpassFlat.Process(System.Single[],System.Int32,System.Int32)">
            <summary>
            Apply bandpass on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
            <param name="samples">Input samples</param>
            <param name="channel">Channel to filter</param>
            <param name="channels">Total channels</param>
        </member>
        <member name="T:Cavern.Filters.BiquadFilter">
            <summary>
            Simple first-order biquad filter.
            </summary>
        </member>
        <member name="P:Cavern.Filters.BiquadFilter.CenterFreq">
            <summary>
            Center frequency (-3 dB point) of the filter.
            </summary>
        </member>
        <member name="P:Cavern.Filters.BiquadFilter.Q">
            <summary>
            Q-factor of the filter.
            </summary>
        </member>
        <member name="P:Cavern.Filters.BiquadFilter.Gain">
            <summary>
            Gain of the filter in decibels.
            </summary>
        </member>
        <member name="P:Cavern.Filters.BiquadFilter.a1">
            <summary>
            Transfer function variable.
            </summary>
        </member>
        <member name="P:Cavern.Filters.BiquadFilter.a2">
            <summary>
            Transfer function variable.
            </summary>
        </member>
        <member name="P:Cavern.Filters.BiquadFilter.b0">
            <summary>
            Transfer function variable.
            </summary>
        </member>
        <member name="P:Cavern.Filters.BiquadFilter.b1">
            <summary>
            Transfer function variable.
            </summary>
        </member>
        <member name="P:Cavern.Filters.BiquadFilter.b2">
            <summary>
            Transfer function variable.
            </summary>
        </member>
        <member name="F:Cavern.Filters.BiquadFilter.centerFreq">
            <summary>
            Center frequency (-3 dB point) of the filter.
            </summary>
        </member>
        <member name="F:Cavern.Filters.BiquadFilter.q">
            <summary>
            Q-factor of the filter.
            </summary>
        </member>
        <member name="F:Cavern.Filters.BiquadFilter.gain">
            <summary>
            Gain of the filter in decibels.
            </summary>
        </member>
        <member name="F:Cavern.Filters.BiquadFilter.sampleRate">
            <summary>
            Cached sample rate.
            </summary>
        </member>
        <member name="F:Cavern.Filters.BiquadFilter.x1">
            <summary>
            History sample.
            </summary>
        </member>
        <member name="F:Cavern.Filters.BiquadFilter.x2">
            <summary>
            History sample.
            </summary>
        </member>
        <member name="F:Cavern.Filters.BiquadFilter.y1">
            <summary>
            History sample.
            </summary>
        </member>
        <member name="F:Cavern.Filters.BiquadFilter.y2">
            <summary>
            History sample.
            </summary>
        </member>
        <member name="M:Cavern.Filters.BiquadFilter.#ctor(System.Int32,System.Double)">
            <summary>
            Simple first-order biquad filter with maximum flatness and no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
        </member>
        <member name="M:Cavern.Filters.BiquadFilter.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Simple first-order biquad filter with no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
        </member>
        <member name="M:Cavern.Filters.BiquadFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Simple first-order biquad filter.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
            <param name="gain">Gain of the filter in decibels</param>
        </member>
        <member name="M:Cavern.Filters.BiquadFilter.Reset(System.Double)">
            <summary>
            Regenerate the transfer function with maximum flatness and no additional gain.
            </summary>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
        </member>
        <member name="M:Cavern.Filters.BiquadFilter.Reset(System.Double,System.Double)">
            <summary>
            Regenerate the transfer function with a custom Q-factor, but no additional gain.
            </summary>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
        </member>
        <member name="M:Cavern.Filters.BiquadFilter.Reset(System.Double,System.Double,System.Double)">
            <summary>
            Regenerate the transfer function.
            </summary>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
            <param name="gain">Gain of the filter in decibels</param>
        </member>
        <member name="M:Cavern.Filters.BiquadFilter.Process(System.Single[],System.Int32,System.Int32)">
            <summary>
            Apply this filter on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
            <param name="samples">Input samples</param>
            <param name="channel">Channel to filter</param>
            <param name="channels">Total channels</param>
        </member>
        <member name="M:Cavern.Filters.BiquadFilter.Reset(System.Single,System.Single,System.Single)">
            <summary>
            Reset the parameters specifically for the derived filter.
            </summary>
            <param name="cosW0">Cosine of omega0</param>
            <param name="alpha">Value of the alpha parameter</param>
            <param name="divisor">1 / a0, as a0 is the same for all biquad filters</param>
        </member>
        <member name="M:Cavern.Filters.BiquadFilter.SetupPass(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets up a lowpass/highpass filter.
            </summary>
        </member>
        <member name="M:Cavern.Filters.BiquadFilter.ToString">
            <summary>
            Display the filter's parameters when converting to string.
            </summary>
        </member>
        <member name="T:Cavern.Filters.Cavernize">
            <summary>
            Separates ground and height data for a channel of a regular surround mix.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Cavernize.Effect">
            <summary>
            Height separation effect strength.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Cavernize.SmoothFactor">
            <summary>
            Ratio of the distance actually moved between calculated heights of ftames. Should be set with
            <see cref="M:Cavern.Filters.Cavernize.CalculateSmoothingFactor(System.Int32,System.Single)"/>.
            </summary>
            <remarks>The default value is calculated with 0.8 smoothness, with an update rate of 240 at
            48 kHz sampling.</remarks>
        </member>
        <member name="P:Cavern.Filters.Cavernize.GroundCrossover">
            <summary>
            Keep all frequencies below this on the ground.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Cavernize.Height">
            <summary>
            The moving part's normalized height from the ground. Clamped between -0.2 and 1, 1 means max height.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Cavernize.GroundLevel">
            <summary>
            Audio that must be played at ground level. Results are from the last frame.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Cavernize.HeightLevel">
            <summary>
            Audio that should be played at the level by <see cref="P:Cavern.Filters.Cavernize.Height"/>. Results are from the last frame.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Cavernize.crossover">
            <summary>
            Crossover that mixes height sounds below its frequency back to the ground.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Cavernize.lastLow">
            <summary>
            Last low frequency sample (used in the height calculation algorithm).
            </summary>
        </member>
        <member name="F:Cavern.Filters.Cavernize.lastNormal">
            <summary>
            Last unmodified sample (used in the height calculation algorithm).
            </summary>
        </member>
        <member name="F:Cavern.Filters.Cavernize.lastHigh">
            <summary>
            Last high frequency sample (used in the height calculation algorithm).
            </summary>
        </member>
        <member name="M:Cavern.Filters.Cavernize.#ctor(System.Int32)">
            <summary>
            Separates ground and height data for a channel of a regular surround mix. Constructs the filter with keeping sounds
            below 250 Hz on the ground.
            </summary>
            <param name="sampleRate">Content sample rate</param>
        </member>
        <member name="M:Cavern.Filters.Cavernize.#ctor(System.Int32,System.Single)">
            <summary>
            Separates ground and height data for a channel of a regular surround mix.
            </summary>
            <param name="sampleRate">Content sample rate</param>
            <param name="crossoverFrequency">Keep sounds below this frequency on the ground layer</param>
        </member>
        <member name="M:Cavern.Filters.Cavernize.CalculateSmoothingFactor(System.Int32,System.Int32,System.Single)">
            <summary>
            Generate the smoothing factor for a smoothness value.
            </summary>
            <param name="sampleRate">System sample rate</param>
            <param name="updateRate">Block size for processing</param>
            <param name="smoothness">Smoothness from 0 to 1</param>
        </member>
        <member name="M:Cavern.Filters.Cavernize.CalculateSmoothingFactor(System.Int32,System.Single)">
            <summary>
            Generate the smoothing factor for a smoothness value.
            </summary>
            <param name="updateRate">Block size for processing</param>
            <param name="smoothness">Smoothness from 0 to 1</param>
        </member>
        <member name="M:Cavern.Filters.Cavernize.Process(System.Single[])">
            <summary>
            Cavernize an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
            <param name="samples">Input samples</param>
        </member>
        <member name="M:Cavern.Filters.Cavernize.PresetOutput(System.Int32)">
            <summary>
            Create empty outputs for a given <paramref name="updateRate"/>> in case they are
            used before processing. This optimizes zero checks.
            </summary>
        </member>
        <member name="T:Cavern.Filters.Comb">
            <summary>
            Normalized feedforward comb filter.
            </summary>
            <remarks>The feedback comb filter is called <see cref="T:Cavern.Filters.Echo"/>.</remarks>
        </member>
        <member name="P:Cavern.Filters.Comb.Alpha">
            <summary>
            Wet mix multiplier.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Comb.K">
            <summary>
            Delay in samples.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Comb.Frequency">
            <summary>
            First minimum point.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Comb.delay">
            <summary>
            Delay filter generating the samples fed forward.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Comb.cache">
            <summary>
            Array used to hold samples processed by <see cref="F:Cavern.Filters.Comb.delay"/>.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Comb.sampleRate">
            <summary>
            Cached source sample rate.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Comb.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Normalized feedforward comb filter.
            </summary>
            <param name="sampleRate">Source sample rate</param>
            <param name="K">Delay in samples</param>
            <param name="alpha">Wet mix multiplier</param>
        </member>
        <member name="M:Cavern.Filters.Comb.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Normalized feedforward comb filter.
            </summary>
            <param name="sampleRate">Source sample rate</param>
            <param name="frequency">First minimum point</param>
            <param name="alpha">Wet mix multiplier</param>
        </member>
        <member name="M:Cavern.Filters.Comb.Process(System.Single[])">
            <summary>
            Apply comb on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
        </member>
        <member name="T:Cavern.Filters.ComplexFilter">
            <summary>
            Multiple filters in series.
            </summary>
        </member>
        <member name="F:Cavern.Filters.ComplexFilter.Filters">
            <summary>
            Filters to apply on the output.
            </summary>
        </member>
        <member name="M:Cavern.Filters.ComplexFilter.#ctor">
            <summary>
            Construct an empty filter set.
            </summary>
        </member>
        <member name="M:Cavern.Filters.ComplexFilter.#ctor(Cavern.Filters.Filter[])">
            <summary>
            Create a usable filter set from a precreated collection.
            </summary>
        </member>
        <member name="M:Cavern.Filters.ComplexFilter.Process(System.Single[])">
            <summary>
            Apply these filters on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
        </member>
        <member name="M:Cavern.Filters.ComplexFilter.Process(System.Single[],System.Int32,System.Int32)">
            <summary>
            Apply these filters on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
            <param name="samples">Input samples</param>
            <param name="channel">Channel to filter</param>
            <param name="channels">Total channels</param>
        </member>
        <member name="T:Cavern.Filters.Convolver">
            <summary>
            Simple convolution window filter.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Convolver.Delay">
            <summary>
            Additional impulse delay in samples.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Convolver.Impulse">
            <summary>
            Impulse response to convolve with.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Convolver.delay">
            <summary>
            Additional impulse delay in samples.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Convolver.impulse">
            <summary>
            Impulse response to convolve with.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Convolver.future">
            <summary>
            Samples to be copied to the beginning of the next output.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Convolver.#ctor(System.Single[],System.Int32)">
            <summary>
            Construct a convolver for a target impulse response.
            </summary>
            <param name="impulse">Impulse response to convolve with</param>
            <param name="delay">Additional impulse delay in samples</param>
        </member>
        <member name="M:Cavern.Filters.Convolver.Convolve(System.Single[],System.Single[])">
            <summary>
            Perform a convolution.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Convolver.Convolve(System.Single[],System.Single[],System.Int32)">
            <summary>
            Perform a convolution with a delay.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Convolver.Process(System.Single[])">
            <summary>
            Apply convolution on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Convolver.Finalize(System.Single[],System.Single[])">
            <summary>
            Output the result and handle the future.
            </summary>
        </member>
        <member name="T:Cavern.Filters.Crossover">
            <summary>
            Simple variable-order crossover.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Crossover.SampleRate">
            <summary>
            Cached filter sample rate.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Crossover.Frequency">
            <summary>
            Crossover frequency.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Crossover.Order">
            <summary>
            Number of filters per pass.
            </summary>
            <remarks>A value of 2 is recommended for notch prevention when mixing
            <see cref="P:Cavern.Filters.Crossover.LowOutput"/> and <see cref="P:Cavern.Filters.Crossover.HighOutput"/> back together.</remarks>
        </member>
        <member name="P:Cavern.Filters.Crossover.LowOutput">
            <summary>
            Low frequency data.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Crossover.HighOutput">
            <summary>
            High frequency data.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Crossover.lowpasses">
            <summary>
            Lowpass filters for each pass.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Crossover.highpasses">
            <summary>
            Highpass filters for each pass.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Crossover.RecreateFilters(System.Double,System.Int32)">
            <summary>
            Create filters for each pass.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Crossover.#ctor(System.Int32,System.Double)">
            <summary>
            Simple 2nd-order crossover.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="frequency">Crossover frequency</param>
        </member>
        <member name="M:Cavern.Filters.Crossover.#ctor(System.Int32,System.Double,System.Int32)">
            <summary>
            Simple variable-order crossover.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="frequency">Crossover frequency</param>
            <param name="order">Number of filters per pass, 2 is recommended for mixing notch prevention</param>
        </member>
        <member name="M:Cavern.Filters.Crossover.PresetOutput(System.Int32)">
            <summary>
            Create empty outputs for a given <paramref name="updateRate"/>> in case they are used before processing. This optimizes zero checks.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Crossover.Process(System.Single[],System.Int32,System.Int32)">
            <summary>
            Apply crossover on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
            <param name="samples">Input samples</param>
            <param name="channel">Channel to filter</param>
            <param name="channels">Total channels</param>
        </member>
        <member name="M:Cavern.Filters.Crossover.Process(System.Single[],System.Single[]@,System.Single[]@)">
            <summary>
            Apply crossover on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
            <param name="samples">Input samples</param>
            <param name="lows">Low frequency data</param>
            <param name="highs">High frequency data</param>
        </member>
        <member name="M:Cavern.Filters.Crossover.Process(System.Single[],System.Int32,System.Int32,System.Single[]@,System.Single[]@)">
            <summary>
            Apply crossover on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
            <param name="samples">Input samples</param>
            <param name="channel">Channel to filter</param>
            <param name="channels">Total channels</param>
            <param name="lows">Low frequency data</param>
            <param name="highs">High frequency data</param>
        </member>
        <member name="T:Cavern.Filters.DebugCrossover">
            <summary>
            Used to showcase crossover distortion, this filter mixes crossover outputs.
            </summary>
        </member>
        <member name="M:Cavern.Filters.DebugCrossover.#ctor(System.Int32,System.Double)">
            <summary>
            Used to showcase 2nd-order crossover distortion, this filter mixes crossover outputs.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="frequency">Crossover frequency</param>
        </member>
        <member name="M:Cavern.Filters.DebugCrossover.#ctor(System.Int32,System.Double,System.Int32)">
            <summary>
            Used to showcase crossover distortion, this filter mixes crossover outputs.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="frequency">Crossover frequency</param>
            <param name="order">Number of filters per pass, 2 is recommended for mixing notch prevention</param>
        </member>
        <member name="M:Cavern.Filters.DebugCrossover.Process(System.Single[])">
            <summary>
            Apply crossover on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
        </member>
        <member name="M:Cavern.Filters.DebugCrossover.Process(System.Single[],System.Int32,System.Int32)">
            <summary>
            Apply crossover on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
            <param name="samples">Input samples</param>
            <param name="channel">Channel to filter</param>
            <param name="channels">Total channels</param>
        </member>
        <member name="T:Cavern.Filters.Delay">
            <summary>
            Delays the audio.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Delay.DelaySamples">
            <summary>
            Delay in samples.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Delay.cache">
            <summary>
            Cached samples for the next block. Alternates between two arrays to prevent memory allocation.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Delay.usedCache">
            <summary>
            The used cache (0 or 1).
            </summary>
        </member>
        <member name="M:Cavern.Filters.Delay.#ctor(System.Int32)">
            <summary>
            Create a delay for a given length in samples.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Delay.#ctor(System.Double,System.Int32)">
            <summary>
            Create a delay for a given length in seconds.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Delay.Process(System.Single[])">
            <summary>
            Apply delay on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
        </member>
        <member name="T:Cavern.Filters.DualConvolver">
            <summary>
            Performs two optimized convolutions for the cost of one.
            </summary>
            <remarks>This filter is using the overlap and add method using FFTs.</remarks>
        </member>
        <member name="F:Cavern.Filters.DualConvolver.filter">
            <summary>
            Created convolution filter in Fourier-space.
            </summary>
        </member>
        <member name="F:Cavern.Filters.DualConvolver.present">
            <summary>
            Cache to perform the FFT in.
            </summary>
        </member>
        <member name="F:Cavern.Filters.DualConvolver.future">
            <summary>
            Overlap samples from previous runs.
            </summary>
        </member>
        <member name="F:Cavern.Filters.DualConvolver.cache">
            <summary>
            FFT optimization.
            </summary>
        </member>
        <member name="F:Cavern.Filters.DualConvolver.delay1">
            <summary>
            Delay applied with the real dimension of the convolution.
            </summary>
        </member>
        <member name="F:Cavern.Filters.DualConvolver.delay2">
            <summary>
            Delay applied with the imaginary dimension of the convolution.
            </summary>
        </member>
        <member name="M:Cavern.Filters.DualConvolver.#ctor(System.Single[],System.Single[])">
            <summary>
            Constructs an optimized convolution with no delay.
            </summary>
        </member>
        <member name="M:Cavern.Filters.DualConvolver.#ctor(System.Single[],System.Single[],System.Int32,System.Int32)">
            <summary>
            Constructs an optimized convolution with additional delays.
            </summary>
        </member>
        <member name="M:Cavern.Filters.DualConvolver.Process(System.Single[],System.Single[])">
            <summary>
            Apply convolution on both arrays of samples. One filter should be applied to only two continuous streams of samples.
            </summary>
            <param name="samplesInOut">The samples to be processed, this will be convolved with the first impulse</param>
            <param name="samplesOut"><paramref name="samplesInOut"/> convolved with the second impulse</param>
            <remarks>The length of both arrays must match.</remarks>
        </member>
        <member name="M:Cavern.Filters.DualConvolver.ProcessTimeslot(System.Single[],System.Single[],System.Int32,System.Int32)">
            <summary>
            In case there are more input samples than the size of the filter, split it in parts.
            </summary>
        </member>
        <member name="T:Cavern.Filters.Echo">
            <summary>
            Simple echo/reverberation filter with delay.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Echo.Strength">
            <summary>
            Effect strength.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Echo.DelaySamples">
            <summary>
            Delay between echoes in samples.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Echo.DelayTime">
            <summary>
            Delay between echoes in seconds.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Echo.sampleRate">
            <summary>
            Cached audio sample rate.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Echo.cache">
            <summary>
            Samples to mix back to the next block.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Echo.cachePos">
            <summary>
            Cache is a loop, this is the current position.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Echo.delay">
            <summary>
            Delay between echoes in samples.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Echo.#ctor(System.Int32)">
            <summary>
            Create an echo filter with the default effect strength (0.25) and delay (0.1 seconds).
            </summary>
            <param name="sampleRate">Audio sample rate</param>
        </member>
        <member name="M:Cavern.Filters.Echo.#ctor(System.Int32,System.Double)">
            <summary>
            Create an echo filter with a custom effect strength and default delay (0.1 seconds).
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="strength">Effect strength</param>
        </member>
        <member name="M:Cavern.Filters.Echo.#ctor(System.Int32,System.Double,System.Int32)">
            <summary>
            Create an echo filter with custom effect strength and delay.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="strength">Effect strength</param>
            <param name="delay">Delay between echoes in samples</param>
        </member>
        <member name="M:Cavern.Filters.Echo.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Create an echo filter with custom effect strength and delay.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="strength">Effect strength</param>
            <param name="delay">Delay between echoes in seconds</param>
        </member>
        <member name="M:Cavern.Filters.Echo.Reset(System.Double,System.Int32)">
            <summary>
            Reset filter settings.
            </summary>
            <param name="strength">Effect strength</param>
            <param name="delay">Delay between echoes in samples</param>
        </member>
        <member name="M:Cavern.Filters.Echo.Reset(System.Double,System.Double)">
            <summary>
            Reset filter settings.
            </summary>
            <param name="strength">Effect strength</param>
            <param name="delay">Delay between echoes in seconds</param>
        </member>
        <member name="M:Cavern.Filters.Echo.Process(System.Single[],System.Int32,System.Int32)">
            <summary>
            Apply echo on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
            <param name="samples">Input samples</param>
            <param name="channel">Channel to filter</param>
            <param name="channels">Total channels</param>
        </member>
        <member name="T:Cavern.Filters.FastConvolver">
            <summary>
            Performs an optimized convolution.
            </summary>
            <remarks>This filter is using the overlap and add method using FFTs, with non-thread-safe caches.
            For a thread-safe fast convolver, use <see cref="T:Cavern.Filters.ThreadSafeFastConvolver"/>.</remarks>
        </member>
        <member name="F:Cavern.Filters.FastConvolver.filter">
            <summary>
            Created convolution filter in Fourier-space.
            </summary>
        </member>
        <member name="F:Cavern.Filters.FastConvolver.present">
            <summary>
            Cache to perform the FFT in.
            </summary>
        </member>
        <member name="F:Cavern.Filters.FastConvolver.future">
            <summary>
            Overlap samples from previous runs.
            </summary>
        </member>
        <member name="F:Cavern.Filters.FastConvolver.cache">
            <summary>
            FFT optimization.
            </summary>
        </member>
        <member name="F:Cavern.Filters.FastConvolver.delay">
            <summary>
            Delay applied with the convolution.
            </summary>
        </member>
        <member name="M:Cavern.Filters.FastConvolver.#ctor(System.Single[])">
            <summary>
            Constructs an optimized convolution with no delay.
            </summary>
        </member>
        <member name="M:Cavern.Filters.FastConvolver.#ctor(System.Single[],System.Int32)">
            <summary>
            Constructs an optimized convolution with added delay.
            </summary>
        </member>
        <member name="M:Cavern.Filters.FastConvolver.CreateCache(System.Int32)">
            <summary>
            Create the FFT cache used for accelerating the convolution in Fourier-space.
            </summary>
        </member>
        <member name="M:Cavern.Filters.FastConvolver.Process(System.Single[])">
            <summary>
            Apply convolution on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
        </member>
        <member name="M:Cavern.Filters.FastConvolver.ConvolveFourier(System.Single[],System.Single[])">
            <summary>
            Performs the convolution of two real signals. The FFT of the result is returned.
            </summary>
            <remarks>Requires <paramref name="excitation"/> and <paramref name="impulse"/>
            to match in a length of a power of 2.</remarks>
        </member>
        <member name="M:Cavern.Filters.FastConvolver.ConvolveFourier(System.Single[],System.Single[],Cavern.Utilities.FFTCache)">
            <summary>
            Performs the convolution of two real signals. The FFT of the result is returned.
            </summary>
            <remarks>Requires <paramref name="excitation"/> and <paramref name="impulse"/>
            to match in a length of a power of 2.</remarks>
        </member>
        <member name="M:Cavern.Filters.FastConvolver.Convolve(System.Single[],System.Single[])">
            <summary>
            Performs the convolution of two real signals. The real result is returned.
             The <see cref="T:Cavern.Utilities.FFTCache"/> will be created temporarily and performance will suffer.
            </summary>
        </member>
        <member name="M:Cavern.Filters.FastConvolver.Convolve(System.Single[],System.Single[],Cavern.Utilities.FFTCache)">
            <summary>
            Performs the convolution of two real signals. The real result is returned.
            </summary>
            <remarks>Requires <paramref name="excitation"/> and <paramref name="impulse"/>
            to match in a length of a power of 2.</remarks>
        </member>
        <member name="M:Cavern.Filters.FastConvolver.ProcessTimeslot(System.Single[],System.Int32,System.Int32)">
            <summary>
            In case there are more input samples than the size of the filter, split it in parts.
            </summary>
        </member>
        <member name="T:Cavern.Filters.Filter">
            <summary>
            Abstract audio filter.
            </summary>
            <remarks>You have to override at least one Process function, otherwise they'll call each other.</remarks>
        </member>
        <member name="M:Cavern.Filters.Filter.Process(System.Single[])">
            <summary>
            Apply this filter on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Filter.Process(System.Single[],System.Int32,System.Int32)">
            <summary>
            Apply this filter on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
            <param name="samples">Input samples</param>
            <param name="channel">Channel to filter</param>
            <param name="channels">Total channels</param>
        </member>
        <member name="T:Cavern.Filters.FilterExtensions">
            <summary>
            Extension functions for <see cref="T:Cavern.Filters.Filter"/>s.
            </summary>
        </member>
        <member name="M:Cavern.Filters.FilterExtensions.ProcessAllChannels(Cavern.Filters.Filter[],System.Single[])">
            <summary>
            Process all channels of an interlaced <paramref name="target"/> stream with the <paramref name="filters"/> for each channel.
            </summary>
        </member>
        <member name="T:Cavern.Filters.Gain">
            <summary>
            Signal level multiplier filter.
            </summary>
        </member>
        <member name="P:Cavern.Filters.Gain.GainValue">
            <summary>
            Filter gain in decibels.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Gain.gainValue">
            <summary>
            Filter gain as a multiplier.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Gain.#ctor(System.Double)">
            <summary>
            Signal level multiplier filter.
            </summary>
            <param name="gain">Filter gain in decibels</param>
        </member>
        <member name="M:Cavern.Filters.Gain.Process(System.Single[])">
            <summary>
            Apply gain on an array of samples. This filter can be used on multiple streams.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Gain.Process(System.Single[],System.Int32,System.Int32)">
            <summary>
            Apply gain on an array of samples. This filter can be used on multiple streams.
            </summary>
            <param name="samples">Input samples</param>
            <param name="channel">Channel to filter</param>
            <param name="channels">Total channels</param>
        </member>
        <member name="T:Cavern.Filters.Highpass">
            <summary>
            Simple first-order highpass filter.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Highpass.#ctor(System.Int32,System.Double)">
            <summary>
            Simple first-order highpass filter with maximum flatness and no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
        </member>
        <member name="M:Cavern.Filters.Highpass.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Simple first-order highpass filter with no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
        </member>
        <member name="M:Cavern.Filters.Highpass.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Simple first-order highpass filter.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
            <param name="gain">Gain of the filter in decibels</param>
        </member>
        <member name="M:Cavern.Filters.Highpass.Reset(System.Single,System.Single,System.Single)">
            <summary>
            Reset the parameters specifically for the derived filter.
            </summary>
            <param name="cosW0">Cosine of omega0</param>
            <param name="alpha">Value of the alpha parameter</param>
            <param name="divisor">1 / a0, as a0 is the same for all biquad filters</param>
        </member>
        <member name="T:Cavern.Filters.HighShelf">
            <summary>
            Simple first-order high shelf filter.
            </summary>
        </member>
        <member name="M:Cavern.Filters.HighShelf.#ctor(System.Int32,System.Double)">
            <summary>
            Simple first-order high shelf filter with maximum flatness and no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
        </member>
        <member name="M:Cavern.Filters.HighShelf.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Simple first-order high shelf filter with no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
        </member>
        <member name="M:Cavern.Filters.HighShelf.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Simple first-order high shelf filter.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
            <param name="gain">Gain of the filter in decibels</param>
        </member>
        <member name="M:Cavern.Filters.HighShelf.Reset(System.Single,System.Single,System.Single)">
            <summary>
            Reset the parameters specifically for the derived filter.
            </summary>
            <param name="cosW0">Cosine of omega0</param>
            <param name="alpha">Value of the alpha parameter</param>
            <param name="_">Would be the divisor, but it's calculated differently for this filter</param>
        </member>
        <member name="T:Cavern.Filters.Lowpass">
            <summary>
            Simple first-order lowpass filter.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Lowpass.#ctor(System.Int32,System.Double)">
            <summary>
            Simple first-order lowpass filter with maximum flatness and no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
        </member>
        <member name="M:Cavern.Filters.Lowpass.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Simple first-order lowpass filter with no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
        </member>
        <member name="M:Cavern.Filters.Lowpass.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Simple first-order lowpass filter.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
            <param name="gain">Gain of the filter in decibels</param>
        </member>
        <member name="M:Cavern.Filters.Lowpass.Reset(System.Single,System.Single,System.Single)">
            <summary>
            Reset the parameters specifically for the derived filter.
            </summary>
            <param name="cosW0">Cosine of omega0</param>
            <param name="alpha">Value of the alpha parameter</param>
            <param name="divisor">1 / a0, as a0 is the same for all biquad filters</param>
        </member>
        <member name="T:Cavern.Filters.LowShelf">
            <summary>
            Simple first-order low shelf filter.
            </summary>
        </member>
        <member name="M:Cavern.Filters.LowShelf.#ctor(System.Int32,System.Double)">
            <summary>
            Simple first-order low shelf filter with maximum flatness and no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
        </member>
        <member name="M:Cavern.Filters.LowShelf.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Simple first-order low shelf filter with no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
        </member>
        <member name="M:Cavern.Filters.LowShelf.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Simple first-order low shelf filter.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
            <param name="gain">Gain of the filter in decibels</param>
        </member>
        <member name="M:Cavern.Filters.LowShelf.Reset(System.Single,System.Single,System.Single)">
            <summary>
            Reset the parameters specifically for the derived filter.
            </summary>
            <param name="cosW0">Cosine of omega0</param>
            <param name="alpha">Value of the alpha parameter</param>
            <param name="_">Would be the divisor, but it's calculated differently for this filter</param>
        </member>
        <member name="T:Cavern.Filters.Normalizer">
            <summary>
            Makes sure the content always stays as close to 0 dB as possible.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Normalizer.decayFactor">
            <summary>
            Gain increment per frame, should be decay rate * update rate / sample rate.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Normalizer.limiterOnly">
            <summary>
            Don't go over 0 dB gain. If true, the normalizer will act as a clipping protector.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Normalizer.lastGain">
            <summary>
            Last normalizer gain.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Normalizer.#ctor(System.Boolean)">
            <summary>
            Create a normalizer or limiter.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Normalizer.Process(System.Single[])">
            <summary>
            Apply normalization on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
        </member>
        <member name="T:Cavern.Filters.Notch">
            <summary>
            Simple first-order notch filter.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Notch.#ctor(System.Int32,System.Double)">
            <summary>
            Simple first-order notch filter with maximum flatness and no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
        </member>
        <member name="M:Cavern.Filters.Notch.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Simple first-order notch filter with no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
        </member>
        <member name="M:Cavern.Filters.Notch.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Simple first-order notch filter.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
            <param name="gain">Gain of the filter in decibels</param>
        </member>
        <member name="M:Cavern.Filters.Notch.Reset(System.Single,System.Single,System.Single)">
            <summary>
            Reset the parameters specifically for the derived filter.
            </summary>
            <param name="cosW0">Cosine of omega0</param>
            <param name="alpha">Value of the alpha parameter</param>
            <param name="divisor">1 / a0, as a0 is the same for all biquad filters</param>
        </member>
        <member name="T:Cavern.Filters.PeakingEQ">
            <summary>
            Simple first-order peaking filter.
            </summary>
        </member>
        <member name="M:Cavern.Filters.PeakingEQ.#ctor(System.Int32,System.Double)">
            <summary>
            Simple first-order peaking filter with maximum flatness and no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
        </member>
        <member name="M:Cavern.Filters.PeakingEQ.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Simple first-order peaking filter with no additional gain.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
        </member>
        <member name="M:Cavern.Filters.PeakingEQ.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Simple first-order peaking filter.
            </summary>
            <param name="sampleRate">Audio sample rate</param>
            <param name="centerFreq">Center frequency (-3 dB point) of the filter</param>
            <param name="q">Q-factor of the filter</param>
            <param name="gain">Gain of the filter in decibels</param>
        </member>
        <member name="M:Cavern.Filters.PeakingEQ.Reset(System.Single,System.Single,System.Single)">
            <summary>
            Reset the parameters specifically for the derived filter.
            </summary>
            <param name="cosW0">Cosine of omega0</param>
            <param name="alpha">Value of the alpha parameter</param>
            <param name="_">Would be the divisor, but it's calculated differently for this filter</param>
        </member>
        <member name="T:Cavern.Filters.PhaseShifter">
            <summary>
            Performs a Hilbert transform for a 90-degree phase shift.
            </summary>
            <remarks>This filter is based on the <see cref="T:Cavern.Filters.FastConvolver"/>.</remarks>
        </member>
        <member name="M:Cavern.Filters.PhaseShifter.#ctor(System.Int32)">
            <summary>
            Creates a phase shifter for a given block size.
            </summary>
        </member>
        <member name="M:Cavern.Filters.PhaseShifter.GenerateFilter(System.Int32)">
            <summary>
            Generate the Hilbert transform's impulse response for a given block size.
            </summary>
        </member>
        <member name="T:Cavern.Filters.SpikeConvolver">
            <summary>
            Simple convolution window
            </summary>
        </member>
        <member name="M:Cavern.Filters.SpikeConvolver.#ctor(System.Single[],System.Int32)">
            <summary>
            Construct a spike convolver for a target impulse response.
            </summary>
            <param name="impulse">Impulse response to convolve with</param>
            <param name="delay">Additional impulse delay in samples</param>
        </member>
        <member name="M:Cavern.Filters.SpikeConvolver.SpikeConvolve(System.Single[],System.Single[])">
            <summary>
            Perform a convolution.
            </summary>
        </member>
        <member name="M:Cavern.Filters.SpikeConvolver.SpikeConvolve(System.Single[],System.Single[],System.Int32)">
            <summary>
            Perform a convolution with a delay.
            </summary>
        </member>
        <member name="M:Cavern.Filters.SpikeConvolver.Process(System.Single[])">
            <summary>
            Apply convolution on an array of samples. One filter should be applied to only one continuous stream of samples.
            </summary>
        </member>
        <member name="T:Cavern.Filters.ThreadSafeFastConvolver">
            <summary>
            Performs an optimized convolution while being thread-safe.
            </summary>
            <remarks>This filter is using the overlap and add method using FFTs.</remarks>
        </member>
        <member name="M:Cavern.Filters.ThreadSafeFastConvolver.#ctor(System.Single[])">
            <summary>
            Constructs a thread-safe optimized convolution with no delay.
            </summary>
        </member>
        <member name="M:Cavern.Filters.ThreadSafeFastConvolver.#ctor(System.Single[],System.Int32)">
            <summary>
            Constructs a thread-safe optimized convolution with added delay.
            </summary>
        </member>
        <member name="M:Cavern.Filters.ThreadSafeFastConvolver.CreateCache(System.Int32)">
            <summary>
            Create the FFT cache used for accelerating the convolution in Fourier-space.
            </summary>
        </member>
        <member name="T:Cavern.Filters.Utilities.QFactor">
            <summary>
            Q-factor conversion utilities.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Utilities.QFactor.FromBandwidth(System.Double,System.Double,System.Double)">
            <summary>
            Convert bandwidth to Q-factor.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Utilities.QFactor.FromBandwidth(System.Double,System.Double)">
            <summary>
            Convert bandwidth to Q-factor.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Utilities.QFactor.FromBandwidth(System.Double)">
            <summary>
            Convert bandwidth to Q-factor.
            </summary>
        </member>
        <member name="M:Cavern.Filters.Utilities.QFactor.FromSlope(System.Double,System.Double)">
            <summary>
            Convert slope to Q-factor.
            </summary>
            <param name="slope">Filter steepness factor</param>
            <param name="gain">Filter gain in decibels</param>
        </member>
        <member name="M:Cavern.Filters.Utilities.QFactor.FromSlopeDecibels(System.Double,System.Double)">
            <summary>
            Convert slope to Q-factor.
            </summary>
            <param name="slope">Filter steepness in decibels</param>
            <param name="gain">Filter gain in decibels</param>
        </member>
        <member name="M:Cavern.Filters.Utilities.QFactor.ToBandwidth(System.Double)">
            <summary>
            Convert Q-factor to bandwidth.
            </summary>
        </member>
        <member name="F:Cavern.Filters.Utilities.QFactor.reference">
            <summary>
            Sqrt(2)/2, the Q factor for maximum flatness.
            </summary>
        </member>
        <member name="T:Cavern.Listener">
            <summary>
            Center of a listening space. Attached <see cref="T:Cavern.Source"/>s will be rendered relative to this object's position.
            </summary>
        </member>
        <member name="P:Cavern.Listener.Info">
            <summary>
            Version and creator information.
            </summary>
        </member>
        <member name="P:Cavern.Listener.DefaultSampleRate">
            <summary>
            Default sample rate.
            </summary>
        </member>
        <member name="P:Cavern.Listener.EnvironmentType">
            <summary>
            3D environment type.
            </summary>
            <remarks>Set by the user and applied when a <see cref="T:Cavern.Listener"/> is created.
            Don't override without user interaction.</remarks>
        </member>
        <member name="P:Cavern.Listener.HeadphoneVirtualizer">
            <summary>
            Virtual surround effect for headphones. This will replace the active <see cref="P:Cavern.Listener.Channels"/> on the next frame.
            </summary>
            <remarks>Set by the user and applied when a <see cref="T:Cavern.Listener"/> is created.
            Don't override without user interaction.</remarks>
        </member>
        <member name="P:Cavern.Listener.Channels">
            <summary>
            Output channel layout. The default setup is the standard 5.1.
            </summary>
            <remarks>Set by the user and applied when a <see cref="T:Cavern.Listener"/> is created.</remarks>
        </member>
        <member name="P:Cavern.Listener.IsSpherical">
            <summary>
            Gets if the speakers are placed in a sphere according to current layout settings.
            </summary>
        </member>
        <member name="P:Cavern.Listener.IsSymmetric">
            <summary>
            Is the user's speaker layout symmetrical?
            </summary>
        </member>
        <member name="P:Cavern.Listener.EnvironmentSize">
            <summary>
            The single most important variable defining sound space in symmetric mode, the environment scaling.
            Originally set by the user and applied when a <see cref="T:Cavern.Listener"/> is created, however, overriding
            it in specific applications can make a huge difference. Objects inside a box this size are positioned
            inside the room, and defines the range of balance between left/right, front/rear, and top/bottom speakers.
            Does not affect directional rendering. The user's settings should be
            respected, thus this vector should be scaled, not completely overridden.
            </summary>
        </member>
        <member name="P:Cavern.Listener.ScreenSize">
            <summary>
            Relative size of the screen to the front wall's width. Used for rendering screen-anchored objects.
            The user's settings should be respected, thus this vector should not be overridden without good reason.
            </summary>
        </member>
        <member name="P:Cavern.Listener.MaximumSources">
            <summary>
            How many sources can be played at the same time.
            </summary>
        </member>
        <member name="F:Cavern.Listener.leftChannels">
            <summary>
            Channel count on the left side of the room, but 1 if there's none, as it's used for volume division.
            </summary>
        </member>
        <member name="F:Cavern.Listener.rightChannels">
            <summary>
            Channel count on the right side of the room, but 1 if there's none, as it's used for volume division.
            </summary>
        </member>
        <member name="P:Cavern.Listener.EnvironmentSizeInverse">
            <summary>
            1 / <see cref="P:Cavern.Listener.EnvironmentSize"/> on each axis. Cached optimization value for when a division is needed.
            </summary>
        </member>
        <member name="P:Cavern.Listener.Position">
            <summary>
            Absolute spatial position.
            </summary>
        </member>
        <member name="P:Cavern.Listener.Rotation">
            <summary>
            Rotation in Euler angles (degrees).
            </summary>
        </member>
        <member name="P:Cavern.Listener.Volume">
            <summary>
            Global playback amplitude multiplier.
            </summary>
        </member>
        <member name="P:Cavern.Listener.LFEVolume">
            <summary>
            LFE channels' amplitude multiplier.
            </summary>
        </member>
        <member name="P:Cavern.Listener.Range">
            <summary>
            Hearing distance.
            </summary>
        </member>
        <member name="P:Cavern.Listener.Normalizer">
            <summary>
            Adaption speed of the normalizer. 0 means disabled.
            </summary>
        </member>
        <member name="P:Cavern.Listener.LimiterOnly">
            <summary>
            If active, the normalizer won't increase the volume above 100%.
            </summary>
        </member>
        <member name="P:Cavern.Listener.SampleRate">
            <summary>
            Project sample rate (min. 44100). It's best to have all your audio clips in this sample rate for maximum performance.
            </summary>
        </member>
        <member name="P:Cavern.Listener.UpdateRate">
            <summary>
            Update interval in audio samples (min. 16).
            Lower values mean better interpolation, but require more processing power.
            </summary>
        </member>
        <member name="P:Cavern.Listener.DelayTarget">
            <summary>
            Maximum audio delay, defined in this FPS value. This is the minimum frame rate required to render continuous audio.
            </summary>
        </member>
        <member name="P:Cavern.Listener.AudioQuality">
            <summary>
            Lower qualities increase performance for many sources.
            </summary>
        </member>
        <member name="P:Cavern.Listener.LFESeparation">
            <summary>
            Only mix LFE tagged sources to subwoofers.
            </summary>
        </member>
        <member name="P:Cavern.Listener.DirectLFE">
            <summary>
            Disable lowpass on the LFE channel.
            </summary>
        </member>
        <member name="P:Cavern.Listener.ActiveSources">
            <summary>
            Attached <see cref="T:Cavern.Source"/>s.
            </summary>
        </member>
        <member name="F:Cavern.Listener.headphoneVirtualizer">
            <summary>
            Virtual surround effect for headphones. This will replace the active <see cref="P:Cavern.Listener.Channels"/> on the next frame.
            </summary>
        </member>
        <member name="F:Cavern.Listener.environmentType">
            <summary>
            3D environment type.
            </summary>
        </member>
        <member name="F:Cavern.Listener.environmentSize">
            <summary>
            Value of <see cref="P:Cavern.Listener.EnvironmentSize"/>.
            </summary>
        </member>
        <member name="F:Cavern.Listener.pulseDelta">
            <summary>
            Position between the last and current game frame's playback position.
            </summary>
        </member>
        <member name="F:Cavern.Listener.sourceDistances">
            <summary>
            Distances of sources from the listener.
            </summary>
        </member>
        <member name="F:Cavern.Listener.activeSources">
            <summary>
            Attached <see cref="T:Cavern.Source"/>s.
            </summary>
        </member>
        <member name="F:Cavern.Listener.results">
            <summary>
            All sources from the last frame, rendered to the active <see cref="P:Cavern.Listener.Channels"/>.
            </summary>
        </member>
        <member name="F:Cavern.Listener.normalizer">
            <summary>
            Active normalizer filter.
            </summary>
        </member>
        <member name="F:Cavern.Listener.renderBuffer">
            <summary>
            Result of the last update. Size is [<see cref="P:Cavern.Listener.Channels"/>.Length * <see cref="P:Cavern.Listener.UpdateRate"/>].
            </summary>
        </member>
        <member name="F:Cavern.Listener.multiframeBuffer">
            <summary>
            Same as <see cref="F:Cavern.Listener.renderBuffer"/>, for multiple frames.
            </summary>
        </member>
        <member name="F:Cavern.Listener.channelCount">
            <summary>
            Optimization variables.
            </summary>
        </member>
        <member name="F:Cavern.Listener.lastSampleRate">
            <summary>
            Optimization variables.
            </summary>
        </member>
        <member name="F:Cavern.Listener.lastUpdateRate">
            <summary>
            Optimization variables.
            </summary>
        </member>
        <member name="F:Cavern.Listener.lowpasses">
            <summary>
            Lowpass filters for each channel.
            </summary>
        </member>
        <member name="F:Cavern.Listener.virtualizer">
            <summary>
            Active virtualization filter.
            </summary>
        </member>
        <member name="M:Cavern.Listener.#ctor">
            <summary>
            Center of a listening space. Attached <see cref="T:Cavern.Source"/>s will be rendered relative to this object's position.
            The layout set up by the user will be used.
            </summary>
        </member>
        <member name="M:Cavern.Listener.#ctor(System.Boolean)">
            <summary>
            Center of a listening space. Attached <see cref="T:Cavern.Source"/>s will be rendered relative to this object's position.
            </summary>
            <param name="loadGlobals">Load the global settings for all listeners. This should be false for listeners created
            on the fly, as this overwrites previous application settings that might have been modified.</param>
        </member>
        <member name="M:Cavern.Listener.GetLayoutName">
            <summary>
            Current speaker layout name in the format of &lt;main&gt;.&lt;LFE&gt;.&lt;height&gt;.&lt;floor&gt;,
            or simply "Virtualization".
            </summary>
        </member>
        <member name="M:Cavern.Listener.ReplaceChannels(Cavern.Channel[])">
            <summary>
            Replace the channel layout.
            </summary>
            <remarks>If you're making your own configurator, don't forget to overwrite the Cavern configuration file.</remarks>
        </member>
        <member name="M:Cavern.Listener.ReplaceChannels(System.Int32)">
            <summary>
            Replace the channel layout with a standard of a given channel count.
            The <see cref="T:Cavern.Listener"/> will set up itself automatically with the user's saved configuration.
            The used audio channels can be queried through <see cref="P:Cavern.Listener.Channels"/>, which should be respected,
            and the output audio channel count should be set to its length. If this is not possible,
            the layout could be set to a standard by the number of channels with this function.
            </summary>
        </member>
        <member name="M:Cavern.Listener.op_Implicit(Cavern.Listener)~System.Boolean">
            <summary>
            Implicit null check.
            </summary>
        </member>
        <member name="M:Cavern.Listener.Recalculate">
            <summary>
            Recalculate the rendering environment.
            </summary>
        </member>
        <member name="M:Cavern.Listener.AttachSource(Cavern.Source)">
            <summary>
            Attach a source to this listener.
            </summary>
        </member>
        <member name="M:Cavern.Listener.AttachPrioritySource(Cavern.Source)">
            <summary>
            Attach a source to this listener, to the first place of the processing queue.
            </summary>
        </member>
        <member name="M:Cavern.Listener.DetachSource(Cavern.Source)">
            <summary>
            Detach a source from this listener.
            </summary>
        </member>
        <member name="M:Cavern.Listener.DetachAllSources">
            <summary>
            Detach all sources from this listener.
            </summary>
        </member>
        <member name="M:Cavern.Listener.Ping">
            <summary>
            Perform an update on all objects without rendering anything to the listener's output.
            </summary>
        </member>
        <member name="M:Cavern.Listener.Render(System.Int32)">
            <summary>
            Ask for update ticks.
            </summary>
        </member>
        <member name="M:Cavern.Listener.Reoptimize">
            <summary>
            Recreate optimization arrays.
            </summary>
        </member>
        <member name="M:Cavern.Listener.Frame">
            <summary>
            A single update.
            </summary>
        </member>
        <member name="F:Cavern.Listener.info">
            <summary>
            Version and creator information.
            </summary>
            <remarks>Hardcoded, because version reading is unsupported for .NET Standard projects</remarks>
        </member>
        <member name="F:Cavern.Listener.defaultSourceLimit">
            <summary>
            Default value of <see cref="P:Cavern.Listener.MaximumSources"/>.
            </summary>
        </member>
        <member name="T:Cavern.Remapping.CavernizeUpmixer">
            <summary>
            Creates height information for ground sources with the <see cref="T:Cavern.Filters.Cavernize"/> filter.
            </summary>
        </member>
        <member name="P:Cavern.Remapping.CavernizeUpmixer.Effect">
            <summary>
            Height separation effect strength.
            </summary>
        </member>
        <member name="P:Cavern.Remapping.CavernizeUpmixer.Smoothness">
            <summary>
            Smoothness of object movements, [0;1].
            </summary>
        </member>
        <member name="F:Cavern.Remapping.CavernizeUpmixer.CenterStays">
            <summary>
            Keep the center channel from gaining height.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.CavernizeUpmixer.sources">
            <summary>
            Mono sources to upconvert. Don't attach these to a <see cref="T:Cavern.Listener"/>.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.CavernizeUpmixer.filters">
            <summary>
            Height separation filters for each channel.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.CavernizeUpmixer.pinger">
            <summary>
            A dummy listener to forefully get source samples.
            </summary>
        </member>
        <member name="M:Cavern.Remapping.CavernizeUpmixer.#ctor(System.Collections.Generic.IList{Cavern.Source},System.Int32,System.Int32)">
            <summary>
            Creates height information for ground sources with the <see cref="T:Cavern.Filters.Cavernize"/> filter.
            </summary>
            <param name="sources">Mono sources to upconvert, not attached to any <see cref="T:Cavern.Listener"/></param>
            <param name="sampleRate">Content sample rate</param>
            <param name="crossoverFrequency">Keep sounds below this frequency on the ground layer</param>
        </member>
        <member name="M:Cavern.Remapping.CavernizeUpmixer.UpdateSources(System.Int32)">
            <summary>
            Get the input samples, place the upmixed targets in space, and return their samples.
            </summary>
        </member>
        <member name="T:Cavern.Remapping.DisassemblerUpmixer">
            <summary>
            Uses <see cref="T:Cavern.Remapping.SpectralDisassembler"/>s to create a better quality upmix than matrixing.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.DisassemblerUpmixer.smoothness">
            <summary>
            Smoothness of object movements, [0;1].
            </summary>
        </member>
        <member name="F:Cavern.Remapping.DisassemblerUpmixer.disassemblers">
            <summary>
            Intermediate source calculators.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.DisassemblerUpmixer.sampleRate">
            <summary>
            Content sample rate.
            </summary>
        </member>
        <member name="M:Cavern.Remapping.DisassemblerUpmixer.#ctor(System.Numerics.Vector3[],System.ValueTuple{System.Int32,System.Int32}[],System.Int32,System.Int32)">
            <summary>
            Uses <see cref="T:Cavern.Remapping.SpectralDisassembler"/>s to create a better quality upmix than matrixing.
            </summary>
            <param name="positions">Location of the input channels in the environment</param>
            <param name="pairs">Pairs of indices of later given inputs to recreate the space between</param>
            <param name="intermediateSourceCount">Number of bands to separate</param>
            <param name="sampleRate">Content sample rate</param>
        </member>
        <member name="M:Cavern.Remapping.DisassemblerUpmixer.UpdateSources(System.Int32)">
            <summary>
            Get the input samples, disassemble them, and place them in space.
            </summary>
        </member>
        <member name="T:Cavern.Remapping.NearestUpmixer">
            <summary>
            Upmixes channels with interpolated positions between sources.
            </summary>
        </member>
        <member name="M:Cavern.Remapping.NearestUpmixer.#ctor(System.Numerics.Vector3[],System.ValueTuple{System.Int32,System.Int32}[],System.Int32,System.Int32)">
            <summary>
            Upmixes channels with interpolated positions between sources.
            </summary>
            <param name="positions">Location of the input channels in the environment</param>
            <param name="pairs">Pairs of indices of later given inputs to recreate the space between</param>
            <param name="intermediateSourceCount">Number of bands to separate</param>
            <param name="sampleRate">Content sample rate</param>
        </member>
        <member name="M:Cavern.Remapping.NearestUpmixer.UpdateSources(System.Int32)">
            <summary>
            Get the input samples, place the upmixed targets in space, and return their samples.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.NearestUpmixer.vTotal">
            <summary>
            To get the total voltage, you'd need to sum sqrt(p) and sqrt(1 - p) for all channels in <see cref="M:Cavern.Remapping.NearestUpmixer.UpdateSources(System.Int32)"/>.
            This sum would take a long time to calculate, and setting gains after mixing would take even more.
            The result of sum(i: 1->n) sqrt(i/n) would be sqrt(1/n) * H(4, -1/2) where H is the generalized harmonic number.
            Graphed out, this result is more or less linear, we just need a good anchor for minimal error, and it's n = 10.
            The number you see here, is the result * 2 (for both the insert and the mix) / 10 (as it's the result at n = 10),
            and this way, the voltage total can be linearized.
            </summary>
        </member>
        <member name="T:Cavern.Remapping.PairBasedUpmixer">
            <summary>
            An <see cref="T:Cavern.Remapping.Upmixer"/> that recreates intermediate points between pairs of input sources.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.PairBasedUpmixer.positions">
            <summary>
            Location of the input channels in the environment.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.PairBasedUpmixer.pairs">
            <summary>
            Pairs of indices of inputs to recreate the space between.
            </summary>
        </member>
        <member name="M:Cavern.Remapping.PairBasedUpmixer.#ctor(System.Numerics.Vector3[],System.ValueTuple{System.Int32,System.Int32}[],System.Int32,System.Int32)">
            <summary>
            An <see cref="T:Cavern.Remapping.Upmixer"/> that recreates intermediate points between pairs of input sources.
            </summary>
            <param name="positions">Location of the input channels in the environment</param>
            <param name="pairs">Pairs of indices of later given inputs to recreate the space between</param>
            <param name="intermediateSourceCount">Number of bands to separate</param>
            <param name="sampleRate">Content sample rate</param>
        </member>
        <member name="M:Cavern.Remapping.PairBasedUpmixer.GetLayeredPairs(System.Numerics.Vector3[])">
            <summary>
            Connects channels in a circle on each height level.
            </summary>
        </member>
        <member name="T:Cavern.Remapping.RemappedChannel">
            <summary>
            Easily editable clip for <see cref="T:Cavern.Remapping.Remapper"/>'s channel spoofing.
            </summary>
        </member>
        <member name="M:Cavern.Remapping.RemappedChannel.#ctor(System.Int32)">
            <summary>
            Easily editable clip for <see cref="T:Cavern.Remapping.Remapper"/>'s channel spoofing.
            </summary>
            <param name="updateRate">Source stream's update rate</param>
        </member>
        <member name="M:Cavern.Remapping.RemappedChannel.Remake(System.Int32)">
            <summary>
            Apply the new update rate of the <see cref="T:Cavern.Remapping.Remapper"/>.
            </summary>
        </member>
        <member name="M:Cavern.Remapping.RemappedChannel.Update(System.Single[],System.Int32,System.Int32)">
            <summary>
            Read samples from the source for the next frame.
            </summary>
            <param name="stream">Source stream</param>
            <param name="channel">Target channel</param>
            <param name="channels">Source channel count</param>
        </member>
        <member name="T:Cavern.Remapping.Remapper">
            <summary>
            Convert any standard multichannel audio stream to the channel layout set for Cavern.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.Remapper.channels">
            <summary>
            Channels to remap.
            </summary>
        </member>
        <member name="P:Cavern.Remapping.Remapper.UpdateRate">
            <summary>
            Remapping update rate.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.Remapper.listener">
            <summary>
            Cavern rendering environment to upscale to.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.Remapper.clips">
            <summary>
            Easily editable <see cref="T:Cavern.Clip"/>s for channel spoofing.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.Remapper.sources">
            <summary>
            Sources representing each source channel.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.Remapper.updateRate">
            <summary>
            Source update rate.
            </summary>
        </member>
        <member name="M:Cavern.Remapping.Remapper.#ctor(System.Int32,System.Int32)">
            <summary>
            Convert any standard multichannel audio stream to the channel layout set for Cavern while using a standard layout
            for the given number of <paramref name="channels"/>.
            </summary>
            <param name="channels">Channels to remap</param>
            <param name="updateRate">Remapping update rate</param>
        </member>
        <member name="M:Cavern.Remapping.Remapper.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert any standard multichannel audio stream to the channel layout set for Cavern.
            </summary>
            <param name="channels">Channels to remap</param>
            <param name="updateRate">Remapping update rate</param>
            <param name="loadCavernSettings">Load user settings including the Cavern channel layout</param>
        </member>
        <member name="M:Cavern.Remapping.Remapper.Update(System.Single[],System.Int32)">
            <summary>
            Remap a multichannel audio frame.
            </summary>
            <param name="stream">Source audio stream</param>
            <param name="channels">Source channel count</param>
        </member>
        <member name="M:Cavern.Remapping.Remapper.Dispose">
            <summary>
            Remove the created sources from the listener.
            </summary>
        </member>
        <member name="T:Cavern.Remapping.SpectralDisassembler">
            <summary>
            Deconstructs a stereo track to positioned bands. Bands will be created in equal octave ranges.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.SpectralDisassembler.minFreq">
            <summary>
            Lowest frequency to consider when creating any band.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.SpectralDisassembler.maxFreq">
            <summary>
            Highest frequency to consider when creating any band.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.SpectralDisassembler.smoothnessFactor">
            <summary>
            Smoothness of object movements, [0;1], should be set from another [0;1] ratio
            with <see cref="M:Cavern.Filters.Cavernize.CalculateSmoothingFactor(System.Int32,System.Int32,System.Single)"/>.
            </summary>
        </member>
        <member name="T:Cavern.Remapping.SpectralDisassembler.SpectralPart">
            <summary>
            Contains one band of deconstruction, a fixed width of the full content spectrum, with relative spatial placement.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.SpectralDisassembler.SpectralPart.panning">
            <summary>
            Ratio of the position between left and right input channels.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.SpectralDisassembler.SpectralPart.samples">
            <summary>
            Band-limited audio data from the mono mix of the original content.
            </summary>
        </member>
        <member name="M:Cavern.Remapping.SpectralDisassembler.SpectralPart.System#IEquatable{Cavern#Remapping#SpectralDisassembler#SpectralPart}#Equals(Cavern.Remapping.SpectralDisassembler.SpectralPart)">
            Check if two <see cref="T:Cavern.Remapping.SpectralDisassembler.SpectralPart"/>s describe the same <see cref="F:Cavern.Remapping.SpectralDisassembler.SpectralPart.panning"/>.
        </member>
        <member name="F:Cavern.Remapping.SpectralDisassembler.filters">
            <summary>
            Filters for each subband, twice (for each channel).
            </summary>
        </member>
        <member name="F:Cavern.Remapping.SpectralDisassembler.output">
            <summary>
            Deconstructed content with bands and their positions.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.SpectralDisassembler.mixTemp">
            <summary>
            Helper array used for mixing band-limited content together.
            </summary>
        </member>
        <member name="M:Cavern.Remapping.SpectralDisassembler.#ctor(System.Int32,System.Int32)">
            <summary>
            Deconstructs a stereo track to positioned bands.
            </summary>
            <param name="bands">Number of bands to separate</param>
            <param name="sampleRate">Sample rate of the content to be filtered</param>
        </member>
        <member name="M:Cavern.Remapping.SpectralDisassembler.Process(System.Single[],System.Single[])">
            <summary>
            Deconstruct a frame of stereo data to bands positioned between the source channels.
            </summary>
        </member>
        <member name="T:Cavern.Remapping.SurroundUpmixer">
            <summary>
            Creates 5.1 or 7.1 mixes from any legacy stream by matrix upmixing. Keeps any additional channels.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.SurroundUpmixer.sourceRouting">
            <summary>
            Which input channel should be routed to which output without any modification.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.SurroundUpmixer.frontsAvailable">
            <summary>
            The front channels are available and matrixing can commence.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.SurroundUpmixer.centerAvailable">
            <summary>
            The center channel and LFE are available and no matrixing is needed for them.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.SurroundUpmixer.sidesAvailable">
            <summary>
            The side channels are available and no matrixing is needed for them.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.SurroundUpmixer.rearsAvailable">
            <summary>
            The rear channels are available and no matrixing is needed for them.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.SurroundUpmixer.mode51">
            <summary>
            Upmix up to 5.1 only.
            </summary>
        </member>
        <member name="M:Cavern.Remapping.SurroundUpmixer.#ctor(Cavern.Channels.ReferenceChannel[],System.Int32)">
            <summary>
            Creates 7.1 mixes from any legacy stream by matrix upmixing. Keeps any additional channels, and
            uses Cavern's channel positions.
            </summary>
            <param name="sourceChannels">The channel that is present at each index in the input array</param>
            <param name="sampleRate">Content sample rate</param>
        </member>
        <member name="M:Cavern.Remapping.SurroundUpmixer.#ctor(Cavern.Channels.ReferenceChannel[],System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates 5.1 or 7.1 mixes from any legacy stream by matrix upmixing. Keeps any additional channels.
            </summary>
            <param name="sourceChannels">The channel that is present at each index in the input array</param>
            <param name="sampleRate">Content sample rate</param>
            <param name="mode51">Upmix up to 5.1 only, and don't create the rear channels</param>
            <param name="widen">Use the corners of the room for speaker placements
            instead of Cavern's internal positions (&quot;movie mode&quot;)</param>
        </member>
        <member name="M:Cavern.Remapping.SurroundUpmixer.UpdateSources(System.Int32)">
            <summary>
            Get the input samples, place the upmixed targets in space, and return their samples.
            </summary>
        </member>
        <member name="M:Cavern.Remapping.SurroundUpmixer.MonoMixOf2(Cavern.Channels.ReferenceChannel,Cavern.Channels.ReferenceChannel,Cavern.Channels.ReferenceChannel)">
            <summary>
            Mix a channel from two others by the (<paramref name="source1"/> + <paramref name="source2"/>) / 2 formula.
            </summary>
        </member>
        <member name="M:Cavern.Remapping.SurroundUpmixer.DifferenceOf2(Cavern.Channels.ReferenceChannel,Cavern.Channels.ReferenceChannel,Cavern.Channels.ReferenceChannel)">
            <summary>
            Mix a channel from two others by the (<paramref name="source1"/> - <paramref name="source2"/>) / 2 formula.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.SurroundUpmixer.matrixSize">
            <summary>
            Number of output channels, the corresponding standard matrix will be used.
            </summary>
            <remarks>Some values are hardcoded, this must always be 8.</remarks>
        </member>
        <member name="T:Cavern.Remapping.Upmixer">
            <summary>
            Creates new, intermediate sources of an existing channel-based render.
            </summary>
        </member>
        <member name="T:Cavern.Remapping.Upmixer.SampleCollector">
            <summary>
            Gets samples for each source for a given update rate.
            </summary>
        </member>
        <member name="E:Cavern.Remapping.Upmixer.OnSamplesNeeded">
            <summary>
            This function is called when new samples are needed for the next frame, it should return a frame for each source.
            </summary>
        </member>
        <member name="P:Cavern.Remapping.Upmixer.IntermediateSources">
            <summary>
            Output sources created by the upmixing process.
            </summary>
        </member>
        <member name="F:Cavern.Remapping.Upmixer.output">
            <summary>
            Preallocated output source sample array reference cache.
            </summary>
        </member>
        <member name="M:Cavern.Remapping.Upmixer.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates new, intermediate sources of an existing channel-based render.
            </summary>
            <param name="sourceCount">Number of output sources</param>
            <param name="sampleRate">Content sample rate</param>
        </member>
        <member name="M:Cavern.Remapping.Upmixer.GetNewSamples(System.Int32)">
            <summary>
            Uses the sample collector to read new samples.
            </summary>
        </member>
        <member name="M:Cavern.Remapping.Upmixer.UpdateSources(System.Int32)">
            <summary>
            Get the input samples, place the upmixed targets in space, and return their samples.
            </summary>
        </member>
        <member name="M:Cavern.Remapping.Upmixer.UpdateSourcesFully(System.Int32)">
            <summary>
            Get the input samples, place the upmixed targets in space, and return their samples.
            Calls the overridden <see cref="M:Cavern.Remapping.Upmixer.UpdateSources(System.Int32)"/> and makes sure the cache arrays are the correct size.
            </summary>
        </member>
        <member name="T:Cavern.Source">
            <summary>
            An audio object in 3D space, in stereo, or both.
            </summary>
        </member>
        <member name="P:Cavern.Source.PitchedUpdateRate">
            <summary>
            Samples required to match the listener's update rate after pitch changes.
            This is the number of samples that has to be rendered.
            </summary>
        </member>
        <member name="F:Cavern.Source.listener">
            <summary>
            The <see cref="T:Cavern.Listener"/> this source is attached to.
            </summary>
        </member>
        <member name="F:Cavern.Source.listenerNode">
            <summary>
            Cached node from <see cref="F:Cavern.Listener.activeSources"/> for faster detach.
            </summary>
        </member>
        <member name="F:Cavern.Source.distancer">
            <summary>
            Distance simulator for virtualization.
            </summary>
        </member>
        <member name="F:Cavern.Source.baseUpdateRate">
            <summary>
            <see cref="P:Cavern.Source.PitchedUpdateRate"/> without resampling.
            </summary>
        </member>
        <member name="F:Cavern.Source.calculatedPitch">
            <summary>
            Actually used pitch multiplier including the Doppler effect.
            </summary>
        </member>
        <member name="F:Cavern.Source.distance">
            <summary>
            Distance from the listener.
            </summary>
        </member>
        <member name="F:Cavern.Source.lastDistance">
            <summary>
            <see cref="F:Cavern.Source.distance"/> in the previous frame, required for Doppler effect calculation.
            </summary>
        </member>
        <member name="F:Cavern.Source.lastDoppler">
            <summary>
            Contains smoothed pitch for the doppler effect. Used to mitigate frames where v = 0, because audio FPS > video FPS.
            </summary>
        </member>
        <member name="F:Cavern.Source.resampleMult">
            <summary>
            Sample rate multiplier to match the system sample rate.
            </summary>
        </member>
        <member name="F:Cavern.Source.leftSamples">
            <summary>
            Stereo mix cache to save allocation times.
            </summary>
        </member>
        <member name="F:Cavern.Source.rightSamples">
            <summary>
            Stereo mix cache to save allocation times.
            </summary>
        </member>
        <member name="F:Cavern.Source.rendered">
            <summary>
            Rendered output array kept to save allocation time.
            </summary>
        </member>
        <member name="F:Cavern.Source.samples">
            <summary>
            Mono mix cache to save allocation times.
            </summary>
        </member>
        <member name="F:Cavern.Source.delay">
            <summary>
            Remaining delay until starting playback.
            </summary>
        </member>
        <member name="M:Cavern.Source.WriteOutput(System.Single[],System.Single[],System.Single,System.Int32)">
            <summary>
            Output samples to all channels of a multichannel array.
            </summary>
            <param name="samples">Samples to write</param>
            <param name="target">Channel array to write to</param>
            <param name="gain">Source gain, total across all channels</param>
            <param name="channels">Total channels</param>
            <remarks>It is assumed that the size of <paramref name="target"/> equals the size of
            <paramref name="samples"/> * <paramref name="channels"/>.</remarks>
        </member>
        <member name="M:Cavern.Source.BottomlistHandler(System.Single[],System.Single)">
            <summary>
            Keeps a value in the given array, if it's smaller than any of its contents.
            </summary>
            <param name="target">Array reference</param>
            <param name="value">Value to insert</param>
        </member>
        <member name="M:Cavern.Source.GetSamples">
            <summary>
            Get the next samples in the audio stream.
            </summary>
        </member>
        <member name="M:Cavern.Source.Precollect">
            <summary>
            Cache the samples if the source should be rendered. This wouldn't be thread safe.
            </summary>
            <returns>The collection should be performed, as all requirements are met</returns>
        </member>
        <member name="M:Cavern.Source.Collect">
            <summary>
            Process the source and returns a mix to be added to the output.
            </summary>
        </member>
        <member name="M:Cavern.Source.ForcePrecollect">
            <summary>
            Makes sure if <see cref="M:Cavern.Source.Precollect"/> is called immediatly after this function, it will return true.
            </summary>
        </member>
        <member name="M:Cavern.Source.Precalculate">
            <summary>
            Calculate distance from the <see cref="T:Cavern.Listener"/> and choose the closest sources to play.
            </summary>
        </member>
        <member name="M:Cavern.Source.Stereo1DMix(System.Single)">
            <summary>
            Render the stereo side mix.
            </summary>
        </member>
        <member name="F:Cavern.Source.SpeedOfSound">
            <summary>
            Reference sound velocity in m/s (dry air, 25.4 degrees Celsius).
            </summary>
        </member>
        <member name="T:Cavern.Source.MatchModifierFunc">
            <summary>
            Angle match value modifier.
            </summary>
            <param name="Matching">Old angle match</param>
        </member>
        <member name="M:Cavern.Source.CalculateAngleMatches(System.Int32,System.Numerics.Vector3)">
            <summary>
            Angle match calculations.
            </summary>
        </member>
        <member name="M:Cavern.Source.LinearizeAngleMatches(System.Int32,System.Numerics.Vector3)">
            <summary>
            Linearized <see cref="M:Cavern.Source.CalculateAngleMatches(System.Int32,System.Numerics.Vector3)"/>:
            pi / 2 - pi / 2 * x, angle match: pi - (lin acos) = pi / 2 + pi / 2 * x.
            </summary>
        </member>
        <member name="F:Cavern.Source.Clip">
            <summary>
            The audio clip to play.
            </summary>
        </member>
        <member name="F:Cavern.Source.IsPlaying">
            <summary>
            Continue playback of the source.
            </summary>
        </member>
        <member name="F:Cavern.Source.Loop">
            <summary>
            Restart the source when finished.
            </summary>
        </member>
        <member name="F:Cavern.Source.Mute">
            <summary>
            Mute the source.
            </summary>
        </member>
        <member name="F:Cavern.Source.LFE">
            <summary>
            Only mix this channel to subwoofers.
            </summary>
        </member>
        <member name="F:Cavern.Source.screenLocked">
            <summary>
            The object position is relative to the screen and scales with screen size.
            </summary>
            <remarks>TODO: implement this</remarks>
        </member>
        <member name="F:Cavern.Source.Volume">
            <summary>
            Source playback volume (ratio to full volume).
            </summary>
        </member>
        <member name="F:Cavern.Source.Pitch">
            <summary>
            Playback speed with no pitch correction.
            </summary>
        </member>
        <member name="F:Cavern.Source.stereoPan">
            <summary>
            Balance between left and right channels.
            </summary>
        </member>
        <member name="F:Cavern.Source.SpatialBlend">
            <summary>
            Balance between 1D and 3D mixing. 0 is 1D and 1 is 3D.
            </summary>
        </member>
        <member name="F:Cavern.Source.Size">
            <summary>
            Audio source size relative to <see cref="P:Cavern.Listener.EnvironmentSize"/>. 0 is a point, 1 is the entire room.
            </summary>
        </member>
        <member name="F:Cavern.Source.DopplerLevel">
            <summary>
            Doppler effect scale, 1 is real.
            </summary>
        </member>
        <member name="F:Cavern.Source.VolumeRolloff">
            <summary>
            Volume decreasing function by distance.
            </summary>
        </member>
        <member name="F:Cavern.Source.SpatialFilter">
            <summary>
            Filter to be applied on the 3D mixed output.
            </summary>
        </member>
        <member name="F:Cavern.Source.DistanceSimulation">
            <summary>
            Simulates distance, not just direction when using virtualization.
            </summary>
        </member>
        <member name="F:Cavern.Source.Position">
            <summary>
            Object position in absolute space.
            </summary>
        </member>
        <member name="F:Cavern.Source.TimeSamples">
            <summary>
            Clip playback position in samples.
            </summary>
        </member>
        <member name="F:Cavern.Source.Rendered">
            <summary>
            Last collected samples from the clip or the last samples generated by overriding <see cref="M:Cavern.Source.GetSamples"/>.
            </summary>
        </member>
        <member name="P:Cavern.Source.Renderable">
            <summary>
            Indicates that the source meets rendering requirements, and <see cref="M:Cavern.Source.GetSamples"/> won't fail.
            </summary>
        </member>
        <member name="M:Cavern.Source.op_Implicit(Cavern.Source)~System.Boolean">
            <summary>
            Implicit null check.
            </summary>
        </member>
        <member name="M:Cavern.Source.Play">
            <summary>
            Start playback from the beginning of the <see cref="F:Cavern.Source.Clip"/> immediately.
            </summary>
        </member>
        <member name="M:Cavern.Source.Play(System.Int64)">
            <summary>
            Start playback from the beginning of the <see cref="F:Cavern.Source.Clip"/> after a delay has passed.
            </summary>
            <param name="delaySamples">Optional delay in samples</param>
        </member>
        <member name="M:Cavern.Source.PlayDelayed(System.Single)">
            <summary>
            Start playback from the beginning after the given time.
            </summary>
            <param name="seconds">Delay in seconds</param>
        </member>
        <member name="M:Cavern.Source.RandomPosition">
            <summary>
            Jump to a random position.
            </summary>
        </member>
        <member name="M:Cavern.Source.Pause">
            <summary>
            Pause playback if it's not paused.
            </summary>
        </member>
        <member name="M:Cavern.Source.UnPause">
            <summary>
            Continue playback if it's paused.
            </summary>
        </member>
        <member name="M:Cavern.Source.TogglePlay">
            <summary>
            Toggle between playback and pause.
            </summary>
        </member>
        <member name="M:Cavern.Source.Stop">
            <summary>
            Pause playback and reset position. The next <see cref="M:Cavern.Source.UnPause"/> will start playback from the beginning.
            </summary>
        </member>
        <member name="M:Cavern.Source.CopySettings(Cavern.Source)">
            <summary>
            Copy the settings of another <see cref="T:Cavern.Source"/>.
            </summary>
            <param name="from">Target source</param>
        </member>
        <member name="M:Cavern.Source.AddFilter(Cavern.Filters.Filter)">
            <summary>
            Add a new <see cref="F:Cavern.Source.SpatialFilter"/> to this source.
            </summary>
        </member>
        <member name="M:Cavern.Source.RemoveFilter(Cavern.Filters.Filter)">
            <summary>
            Remove a <see cref="F:Cavern.Source.SpatialFilter"/> from this source.
            </summary>
        </member>
        <member name="M:Cavern.Source.RolloffLogarithmic">
            <summary>
            Logarithmic rolloff by distance.
            </summary>
        </member>
        <member name="M:Cavern.Source.RolloffLinear">
            <summary>
            Linear rolloff in range.
            </summary>
        </member>
        <member name="M:Cavern.Source.RolloffReal">
            <summary>
            Physically correct rolloff by distance.
            </summary>
        </member>
        <member name="M:Cavern.Source.RolloffDisabled">
            <summary>
            No rolloff.
            </summary>
        </member>
        <member name="T:Cavern.Source.RolloffFunc">
            <summary>
            Rolloff calculator function.
            </summary>
        </member>
        <member name="F:Cavern.Source.UsedRolloffFunc">
            <summary>
            The rolloff function to be used.
            </summary>
        </member>
        <member name="F:Cavern.Source.LastRolloff">
            <summary>
            Last value of <see cref="F:Cavern.Source.VolumeRolloff"/>.
            </summary>
        </member>
        <member name="M:Cavern.Source.SetRolloff">
            <summary>
            Set the <see cref="F:Cavern.Source.UsedRolloffFunc"/> to match the user's <see cref="F:Cavern.Source.VolumeRolloff"/> setting.
            </summary>
        </member>
        <member name="M:Cavern.Source.GetRolloff">
            <summary>
            Get the gain by rolloff mode and distance.
            </summary>
        </member>
        <member name="M:Cavern.Source.Ratio(System.Single,System.Single,System.Single)">
            <summary>
            Inverse lerp, but returns 0 when the values are equal.
            </summary>
            <param name="a">Start position</param>
            <param name="b">End position</param>
            <param name="x">Intermediate position</param>
        </member>
        <member name="M:Cavern.Source.AssignLR(System.Int32,System.Int32@,System.Int32@,System.Single,System.Single)">
            <summary>
            Check and assign a channel if it's the closest left/right from a given position.
            </summary>
            <param name="channel">Checked channel ID</param>
            <param name="left">Closest left channel ID</param>
            <param name="right">Closest right channel ID</param>
            <param name="posX">Reference position on the X axis</param>
            <param name="channelX">Currently checked channel position on the X axis</param>
        </member>
        <member name="M:Cavern.Source.FixIncompleteLayer(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            For a given horizontal layer, if it's over a side of the room, fill blank speakers.
            </summary>
            <param name="frontLeft">Front left ID</param>
            <param name="frontRight">Front right ID</param>
            <param name="rearLeft">Rear left ID</param>
            <param name="rearRight">Rear right ID</param>
        </member>
        <member name="T:Cavern.SpecialSources.InfiniteSourceMismatchException">
            <summary>
            Important properties of concatenated clips don't match.
            </summary>
        </member>
        <member name="M:Cavern.SpecialSources.InfiniteSourceMismatchException.#ctor(System.String)">
            <summary>
            Important properties of concatenated clips don't match.
            </summary>
        </member>
        <member name="T:Cavern.SpecialSources.InfiniteSource">
            <summary>
            A <see cref="T:Cavern.Source"/> with an intro <see cref="T:Cavern.Clip"/> and a looping part after.
            </summary>
        </member>
        <member name="F:Cavern.SpecialSources.InfiniteSource.intro">
            <summary>
            Clip to start playback with.
            </summary>
        </member>
        <member name="F:Cavern.SpecialSources.InfiniteSource.loopClip">
            <summary>
            Clip to play continuously after.
            </summary>
        </member>
        <member name="F:Cavern.SpecialSources.InfiniteSource.introPassed">
            <summary>
            The intro playback has finished.
            </summary>
        </member>
        <member name="M:Cavern.SpecialSources.InfiniteSource.Precollect">
            <summary>
            Cache the samples if the source should be rendered. This wouldn't be thread safe.
            </summary>
            <returns>The collection should be performed, as all requirements are met</returns>
        </member>
        <member name="M:Cavern.SpecialSources.InfiniteSource.GetSamples">
            <summary>
            Get the next samples in the audio stream.
            </summary>
        </member>
        <member name="T:Cavern.SpecialSources.MuteSource">
            <summary>
            A source that plays silence.
            </summary>
        </member>
        <member name="F:Cavern.SpecialSources.MuteSource.samples">
            <summary>
            Empty cache to return.
            </summary>
        </member>
        <member name="M:Cavern.SpecialSources.MuteSource.#ctor(Cavern.Listener)">
            <summary>
            A source that plays silence.
            </summary>
            <param name="listener">Take the listener's sample rate to prevent redundant resampling calls</param>
        </member>
        <member name="M:Cavern.SpecialSources.MuteSource.GetSamples">
            <summary>
            Get the next samples in the audio stream.
            </summary>
        </member>
        <member name="T:Cavern.SpecialSources.StreamedSource">
            <summary>
            An always rendered source where only <see cref="M:Cavern.Source.GetSamples"/> or <see cref="M:Cavern.Source.Collect"/> should be overridden.
            </summary>
        </member>
        <member name="M:Cavern.SpecialSources.StreamedSource.Precollect">
            <summary>
            Force the source to be played.
            </summary>
        </member>
        <member name="P:Cavern.SpecialSources.StreamedSource.Renderable">
            <summary>
            Indicates that the source meets rendering requirements, and <see cref="M:Cavern.Source.GetSamples"/> won't fail.
            </summary>
        </member>
        <member name="T:Cavern.SpecialSources.StreamMaster">
            <summary>
            Supplies a group of sources with audio data.
            </summary>
        </member>
        <member name="T:Cavern.SpecialSources.StreamMaster.GetNextSampleBlock">
            <summary>
            Gets the next block of rendered samples.
            </summary>
        </member>
        <member name="F:Cavern.SpecialSources.StreamMaster.getter">
            <summary>
            Gets the next block of rendered samples.
            </summary>
        </member>
        <member name="F:Cavern.SpecialSources.StreamMaster.nextSamples">
            <summary>
            Next output samples.
            </summary>
        </member>
        <member name="F:Cavern.SpecialSources.StreamMaster.updates">
            <summary>
            Number of updates in the current frame. If reaches the number of supplied objects, new samples are retrieved.
            </summary>
        </member>
        <member name="M:Cavern.SpecialSources.StreamMaster.#ctor(Cavern.SpecialSources.StreamMaster.GetNextSampleBlock)">
            <summary>
            Supplies a group of sources with audio data.
            </summary>
            <param name="getter">Getter of the next block of rendered samples</param>
        </member>
        <member name="M:Cavern.SpecialSources.StreamMaster.SetupSources(System.Collections.Generic.IReadOnlyList{Cavern.Source},System.Int32)">
            <summary>
            Add a dummy clip to the sources to be able to be rendered.
            </summary>
        </member>
        <member name="M:Cavern.SpecialSources.StreamMaster.Update(System.Int32,System.Int32)">
            <summary>
            Get the samples for a given source, fetch new samples when needed.
            </summary>
        </member>
        <member name="T:Cavern.SpecialSources.StreamMasterSource">
            <summary>
            A streamed source that uses a <see cref="T:Cavern.SpecialSources.StreamMaster"/> to fetch new samples from.
            </summary>
        </member>
        <member name="F:Cavern.SpecialSources.StreamMasterSource.master">
            <summary>
            The supplier of samples.
            </summary>
        </member>
        <member name="F:Cavern.SpecialSources.StreamMasterSource.sourceIndex">
            <summary>
            Source index used by the <see cref="F:Cavern.SpecialSources.StreamMasterSource.master"/>.
            </summary>
        </member>
        <member name="M:Cavern.SpecialSources.StreamMasterSource.#ctor(Cavern.SpecialSources.StreamMaster,System.Int32)">
            <summary>
            A streamed source that uses a <see cref="T:Cavern.SpecialSources.StreamMaster"/> to fetch new samples from.
            </summary>
            <param name="master">The supplier of samples</param>
            <param name="sourceIndex">Source index used by the <see cref="F:Cavern.SpecialSources.StreamMasterSource.master"/></param>
        </member>
        <member name="M:Cavern.SpecialSources.StreamMasterSource.GetSamples">
            <summary>
            Get the next samples in the audio stream.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.AccurateSum">
            <summary>
            Sums multiple values while fixing floating point errors.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.AccurateSum.Sum">
            <summary>
            All values <see cref="M:Cavern.Utilities.AccurateSum.Add(System.Single)"/> was called with, added togerher accurately.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.AccurateSum.c">
            <summary>
            Addition error that will be corrected in the next call of <see cref="M:Cavern.Utilities.AccurateSum.Add(System.Single)"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.AccurateSum.Add(System.Single)">
            <summary>
            Add a new <paramref name="value"/> to the sum.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.AccurateSum.Add(System.Single[])">
            <summary>
            Add new <paramref name="values"/> to the sum.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.AccurateSum.Add(System.Single[],System.Int32,System.Int32)">
            <summary>
            Add new <paramref name="values"/> to the sum between <paramref name="from"/> (inclusive) and <paramref name="to"/> (exclusive).
            </summary>
        </member>
        <member name="T:Cavern.Utilities.ArrayExtensions">
            <summary>
            Extra array handling functions.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ArrayExtensions.Clear``1(``0[])">
            <summary>
            Shorthand for clearing the entire array.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ArrayExtensions.Contains(System.Single[],System.Single)">
            <summary>
            Quickly checks if a value is in an array.
            </summary>
            <param name="target">Array reference</param>
            <param name="value">Value to check</param>
            <returns>If an array contains the value</returns>
        </member>
        <member name="M:Cavern.Utilities.ArrayExtensions.Contains``1(``0[],``0)">
            <summary>
            Quickly checks if a value is in an array.
            </summary>
            <param name="target">Array reference</param>
            <param name="value">Value to check</param>
            <returns>If an array contains the value</returns>
        </member>
        <member name="M:Cavern.Utilities.ArrayExtensions.CopyTo``1(``0[],``0[])">
            <summary>
            Shorthand for copying the entire array.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ArrayExtensions.FastClone``1(``0[])">
            <summary>
            Clones an array about twice as fast as <see cref="M:System.Array.Clone"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ArrayExtensions.Has``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            Checks if an array has any values matching a <paramref name="predicate"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ArrayExtensions.IsSubsetOf``1(``0[],``0[])">
            <summary>
            Check if an array is the <paramref name="subset"/> of the <paramref name="source"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ArrayExtensions.Nearest(System.Single[],System.Single)">
            <summary>
            From a <paramref name="source"/>, get which element is closest to a given <paramref name="value"/>.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.InfiniteAverage">
            <summary>
            Averages any number of frames continuously.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.InfiniteAverage.frames">
            <summary>
            Number of captured and averaged frames.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.InfiniteAverage.#ctor">
            <summary>
            Averages any number of frames continuously.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.InfiniteAverage.AddFrame(System.Single[])">
            <summary>
            Compute the average by adding the next frame.
            </summary>
            <remarks>The length of <paramref name="frame"/> must be constant across the use of this object.</remarks>
        </member>
        <member name="M:Cavern.Utilities.InfiniteAverage.Reset">
            <summary>
            Reset the averaging.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.MovingAverage">
            <summary>
            Averages multiple frames of windowed audio or spectrum data, and when a new window is added, the last one is removed.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.MovingAverage.Average">
            <summary>
            The current moving average.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.MovingAverage.windows">
            <summary>
            The windows to average.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.MovingAverage.#ctor(System.Int32)">
            <summary>
            Averages multiple frames of windowed audio or spectrum data, and when a new window is added, the last one is removed.
            </summary>
            <param name="frames">Number of windows to average</param>
        </member>
        <member name="M:Cavern.Utilities.MovingAverage.AddFrame(System.Single[])">
            <summary>
            Compute the <see cref="P:Cavern.Utilities.MovingAverage.Average"/> by adding the next frame.
            </summary>
            <remarks>The length of <paramref name="frame"/> must be constant across the use of this object.</remarks>
        </member>
        <member name="M:Cavern.Utilities.MovingAverage.Reset">
            <summary>
            Reset the averaging.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.TimeWindowedAverage">
            <summary>
            Averages multiple frames of windowed audio or spectrum data over a fixed time span.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.TimeWindowedAverage.timeSpan">
            <summary>
            Evaluation window size.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.TimeWindowedAverage.cache">
            <summary>
            The average is accumulated in this array.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.TimeWindowedAverage.frames">
            <summary>
            Parsed windows to average.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.TimeWindowedAverage.#ctor(System.TimeSpan)">
            <summary>
            Averages multiple frames of windowed audio or spectrum data over a fixed time span.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.TimeWindowedAverage.AddFrame(System.Single[])">
            <summary>
            Compute the average by adding the next frame.
            </summary>
            <remarks>If the length of the <paramref name="frame"/> changes, the averaging will be reset.</remarks>
        </member>
        <member name="T:Cavern.Utilities.CavernAmp">
            <summary>
            Drastically faster versions of some functions written in C++.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.CavernAmp.Available">
            <summary>
            Is the CavernAmp DLL present and the platform is correct?
            </summary>
        </member>
        <member name="P:Cavern.Utilities.CavernAmp.Bypass">
            <summary>
            Force disable CavernAmp for performance benchmarks.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.CavernAmp.available">
            <summary>
            Is the CavernAmp DLL present and the platform is correct?
            </summary>
        </member>
        <member name="F:Cavern.Utilities.CavernAmp.bypass">
            <summary>
            Force disable CavernAmp for performance benchmarks.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.CavernAmp.tested">
            <summary>
            True if CavernAmp DLL was checked if <see cref="F:Cavern.Utilities.CavernAmp.available"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.IsMono">
            <summary>
            The running CLR is Mono, which limits optimization possibilities and for example,
            Vectors run much slower, they should not be used.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.GetEnabledXStateFeatures">
            <summary>
            Gets supported CPU instruction sets.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.IsAvailable">
            <summary>
            When the DLL is present near the executable and the platform matches, this returns true.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.FFTCache_Create(System.Int32)">
            <summary>
            FFT cache constructor.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.FFTCache_Size(System.IntPtr)">
            <summary>
            Get the creation size of the FFT cache.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.FFTCache_Dispose(System.IntPtr)">
            <summary>
            Dispose an FFT cache.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.ProcessFFT(Cavern.Utilities.Complex[],System.IntPtr,System.Int32)">
            <summary>
            Actual FFT processing, somewhat in-place.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.ProcessFFT(System.Single[],System.IntPtr)">
            <summary>
            Fourier-transform a signal in 1D. The result is the spectral power.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.InPlaceFFT(Cavern.Utilities.Complex[],Cavern.Utilities.FFTCache)">
            <summary>
            Fast Fourier transform a 2D signal while keeping the source array allocation.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.InPlaceFFT(System.Single[],Cavern.Utilities.FFTCache)">
            <summary>
            Spectrum of a signal's FFT while keeping the source array allocation.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.ProcessIFFT(Cavern.Utilities.Complex[],System.IntPtr,System.Int32)">
            <summary>
            Outputs IFFT(X) * N.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.InPlaceIFFT(Cavern.Utilities.Complex[],Cavern.Utilities.FFTCache)">
            <summary>
            Inverse Fast Fourier Transform of a transformed signal, while keeping the source array allocation.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.ProcessFFT(Cavern.Utilities.Complex*,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Actual FFT processing, somewhat in-place.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.ProcessFFT(System.Single*,System.Int32,System.IntPtr)">
            <summary>
            Fourier-transform a signal in 1D. The result is the spectral power.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.InPlaceFFT(Cavern.Utilities.Complex*,System.Int32,System.IntPtr)">
            <summary>
            Fast Fourier transform a 2D signal while keeping the source array allocation.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.InPlaceFFT(System.Single*,System.Int32,System.IntPtr)">
            <summary>
            Spectrum of a signal's FFT while keeping the source array allocation.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.ProcessIFFT(Cavern.Utilities.Complex*,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Outputs IFFT(X) * N.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.InPlaceIFFT(Cavern.Utilities.Complex*,System.Int32,System.IntPtr)">
            <summary>
            Inverse Fast Fourier Transform of a transformed signal, while keeping the source array allocation.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.MultiplyAndAdd(System.Single*,System.Single*,System.Int32)">
            <summary>
            Multiply the values of both arrays together and add these multiples together.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.MultiplyAndAdd(System.Single*,System.Single*,System.Single*,System.Int32)">
            <summary>
            Multiply the values of both arrays together to the corresponding element of the <paramref name="target"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.MultiplyAndAdd(System.Single*,System.Single,System.Single*,System.Int32)">
            <summary>
            Multiply the values of an array with a constant to the corresponding element of the <paramref name="target"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.MultiplyAndAdd(System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Int32)">
            <summary>
            Do <see cref="M:Cavern.Utilities.CavernAmp.MultiplyAndAdd(System.Single*,System.Single*,System.Single*,System.Int32)"/> simultaneously for two different pairs of arrays.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.MultiplyAndAdd(System.Single*,System.Single,System.Single*,System.Single,System.Single*,System.Int32)">
            <summary>
            Do <see cref="M:Cavern.Utilities.CavernAmp.MultiplyAndAdd(System.Single*,System.Single,System.Single*,System.Int32)"/> simultaneously for two different arrays.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.MultiplyAndSet(System.Single*,System.Single*,System.Single*,System.Int32)">
            <summary>
            Clear the <paramref name="target"/>, then do <see cref="M:Cavern.Utilities.CavernAmp.MultiplyAndAdd(System.Single*,System.Single*,System.Single*,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.MultiplyAndSet(System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Int32)">
            <summary>
            Clear the <paramref name="target"/>, then do <see cref="M:Cavern.Utilities.CavernAmp.MultiplyAndAdd(System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.CavernAmp.MultiplyAndSet(System.Single*,System.Single,System.Single*,System.Single,System.Single*,System.Int32)">
            <summary>
            Clear the <paramref name="target"/>, then do <see cref="M:Cavern.Utilities.CavernAmp.MultiplyAndAdd(System.Single*,System.Single,System.Single*,System.Single,System.Single*,System.Int32)"/>.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.ChannelExtensions">
            <summary>
            Extension functions for <see cref="T:Cavern.Channel"/>s.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ChannelExtensions.GetOverheadChannelCount(Cavern.Channel[])">
            <summary>
            Get the number of channels above the horizon for a given channel layout.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.Complex">
            <summary>
            A complex number.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.Complex.Real">
            <summary>
            Real part of the complex number.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.Complex.Imaginary">
            <summary>
            Imaginary part of the complex number.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.Complex.Magnitude">
            <summary>
            Magnitude of the complex number (spectrum for FFT).
            </summary>
        </member>
        <member name="P:Cavern.Utilities.Complex.Phase">
            <summary>
            Direction of the complex number (phase for FFT).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.#ctor(System.Single)">
            <summary>
            Complex number from a scalar.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.#ctor(System.Single,System.Single)">
            <summary>
            Complex number from coordinates.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.op_Addition(Cavern.Utilities.Complex,Cavern.Utilities.Complex)">
            <summary>
            Complex addition.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.op_Subtraction(Cavern.Utilities.Complex,Cavern.Utilities.Complex)">
            <summary>
            Complex subtraction.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.op_UnaryNegation(Cavern.Utilities.Complex)">
            <summary>
            Complex negation.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.op_Multiply(Cavern.Utilities.Complex,Cavern.Utilities.Complex)">
            <summary>
            Complex multiplication.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.op_Multiply(Cavern.Utilities.Complex,System.Single)">
            <summary>
            Scalar complex multiplication.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.op_Division(Cavern.Utilities.Complex,Cavern.Utilities.Complex)">
            <summary>
            Complex division.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.Parse(System.Single[])">
            <summary>
            Convert a float array to complex.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.IsZero">
            <summary>
            True if the number is 0 + 0i.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.Log(System.Single)">
            <summary>
            Get the complex logarithm of a real number.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.Clear">
            <summary>
            Zero this number the fastest.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.Multiply(Cavern.Utilities.Complex)">
            <summary>
            Multiply with another complex number.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.Divide(Cavern.Utilities.Complex)">
            <summary>
            Divide with another complex number.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.Invert">
            <summary>
            Calculate 1 / z.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.Rotate(System.Single)">
            <summary>
            Multiply by (cos(x), sin(x)).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.CompareTo(System.Single)">
            <summary>
            Compare thie number to an <paramref name="other"/> if it precedes, follows, or matches it in a sort.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.CompareTo(Cavern.Utilities.Complex)">
            <summary>
            Compare thie number to an <paramref name="other"/> if it precedes, follows, or matches it in a sort.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.Equals(System.Single)">
            <summary>
            Check if this number equals an <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.Equals(Cavern.Utilities.Complex)">
            <summary>
            Check if this number equals an <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Complex.ToString">
            <summary>
            Display the complex number.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.ComplexArray">
            <summary>
            Operations on complex arrays.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ComplexArray.Conjugate(Cavern.Utilities.Complex[])">
            <summary>
            Convert all elements in the <paramref name="source"/> to their conjugates.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ComplexArray.Convolve(Cavern.Utilities.Complex[],Cavern.Utilities.Complex[])">
            <summary>
            Replace the <paramref name="source"/> with its convolution with an <paramref name="other"/> array.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ComplexArray.Deconvolve(Cavern.Utilities.Complex[],Cavern.Utilities.Complex[])">
            <summary>
            Replace the <paramref name="source"/> with its deconvolution with an <paramref name="other"/> array.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ComplexArray.ParseForFFT(System.Single[])">
            <summary>
            Convert a float array to complex a size that's ready for FFT.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ComplexArray.ParseForFFT(System.Single[],Cavern.Utilities.Complex[])">
            <summary>
            Move the waveform to a complex array before it's Fourier-transformed.
            </summary>
            <remarks>This function clears the imaginary part, allowing the use of reusable arrays.</remarks>
        </member>
        <member name="T:Cavern.Utilities.DictionaryExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.DictionaryExtensions.GetKey``2(System.Collections.Generic.Dictionary{``0,``1},``1)">
            <summary>
            Get the key for a value that's found in the source <paramref name="dictionary"/>.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.Fading">
            <summary>
            Different track fading techniques.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Fading.Linear(System.Single[],System.Single[],System.Int32)">
            <summary>
            Performs a linear fade for a mono channel from the <paramref name="source"/> into the <paramref name="target"/>.
            </summary>
            <param name="source">Starts at max gain, fades to mute</param>
            <param name="target">Starts at mute, fades to max gain</param>
            <param name="samples">The duration of the fade in samples</param>
        </member>
        <member name="M:Cavern.Utilities.Fading.Linear(System.Single[],System.Single[],System.Int32,System.Int32)">
            <summary>
            Performs a linear fade from the <paramref name="source"/> into the <paramref name="target"/>.
            </summary>
            <param name="source">Starts at max gain, fades to mute</param>
            <param name="target">Starts at mute, fades to max gain</param>
            <param name="samples">The duration of the fade in samples, for a single channel</param>
            <param name="channels">Number of the channels in the interlaced waveform</param>
        </member>
        <member name="M:Cavern.Utilities.Fading.Linear(Cavern.MultichannelWaveform,Cavern.MultichannelWaveform,System.Int32)">
            <summary>
            Performs a linear fade from the <paramref name="source"/> into the <paramref name="target"/>.
            </summary>
            <param name="source">Starts at max gain, fades to mute</param>
            <param name="target">Starts at mute, fades to max gain</param>
            <param name="samples">The duration of the fade in samples, for a single channel</param>
        </member>
        <member name="T:Cavern.Utilities.FFTCache">
            <summary>
            Precalculated constants and preallocated recursion arrays for a given FFT size.
            </summary>
            <remarks>Avoid simultaneously calculating two FFTs (since the split arrays are shared),
            unless you use <see cref="T:Cavern.Utilities.ThreadSafeFFTCache"/>.
            </remarks>
        </member>
        <member name="P:Cavern.Utilities.FFTCache.Even">
            <summary>
            Preallocated even split arrays. Globally cached in single-threaded applications.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.FFTCache.Odd">
            <summary>
            Preallocated odd split arrays. Globally cached in single-threaded applications.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.FFTCache.globalEven">
            <summary>
            Preallocated recursion arrays. Shared between all caches, their sizes are 2^i.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.FFTCache.globalOdd">
            <summary>
            Preallocated recursion arrays. Shared between all caches, their sizes are 2^i.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.FFTCache.cos">
            <summary>
            Cached cosines for each FFT band.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.FFTCache.sin">
            <summary>
            Cached sines for each FFT band.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.FFTCache.Native">
            <summary>
            C++ FFT cache class memory address to be passed to <see cref="T:Cavern.Utilities.CavernAmp"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.FFTCache.#ctor(System.Int32)">
            <summary>
            FFT cache constructor.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.FFTCache.#ctor(System.Int32,System.Single[],System.Single[])">
            <summary>
            Construct an FFT cache with custom look-up tables.
            </summary>
            <remarks>Caches created this way can't be accelerated with CavernAmp.</remarks>
        </member>
        <member name="M:Cavern.Utilities.FFTCache.Dispose">
            <summary>
            Free all used resources if there is any.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.FFTCache.CreateCacheArrays(System.Int32)">
            <summary>
            Create the arrays where the even-odd splits will be placed.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.ThreadSafeFFTCache">
            <summary>
            Thread-safe version of <see cref="T:Cavern.Utilities.FFTCache"/>. Uses its own split cache arrays. Use one instance per thread.
            </summary>
            <remarks>With <see cref="T:Cavern.Utilities.CavernAmp"/>, all <see cref="T:Cavern.Utilities.FFTCache"/>s are thread-safe.</remarks>
        </member>
        <member name="P:Cavern.Utilities.ThreadSafeFFTCache.Even">
            <summary>
            Preallocated even split arrays.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.ThreadSafeFFTCache.Odd">
            <summary>
            Preallocated odd split arrays.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ThreadSafeFFTCache.#ctor(System.Int32)">
            <summary>
            Thread-safe <see cref="T:Cavern.Utilities.FFTCache"/> constructor. Does not reference shared split arrays.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ThreadSafeFFTCache.#ctor(System.Int32,System.Single[],System.Single[])">
            <summary>
            Construct a thread-safe <see cref="T:Cavern.Utilities.FFTCache"/> with custom look-up tables.
            </summary>
            <remarks>Caches created this way can't be accelerated with CavernAmp.</remarks>
        </member>
        <member name="T:Cavern.Utilities.Linked">
            <summary>
            Marks a relationship between two arrays that are not merged in a struct for better performance.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.Linked.targetField">
            <summary>
            The other field linked with this field.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Linked.#ctor(System.String)">
            <summary>
            Marks a relationship between two arrays that are not merged in a struct for better performance.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Linked.IsValid(System.Object)">
            <summary>
            Checks if a linking is valid in an object.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.ListExtensions">
            <summary>
            Extra list handling functions.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ListExtensions.AddSorted``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Add the item to the list while keeping order.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ListExtensions.AddSortedDistinct``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Add the item to the list while keeping order and not allowing duplicates.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.ListExtensions.RemoveSorted``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Remove an item from a sorted <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.Measurements">
            <summary>
            Tools for measuring frequency response.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.FFT(Cavern.Utilities.Complex[])">
            <summary>
            Fast Fourier transform a 2D signal. The <see cref="T:Cavern.Utilities.FFTCache"/> will be created temporarily and performance will suffer.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.FFT(Cavern.Utilities.Complex[],Cavern.Utilities.FFTCache)">
            <summary>
            Fast Fourier transform a 2D signal.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.FFT(System.Single[])">
            <summary>
            Fast Fourier transform a 1D signal. The <see cref="T:Cavern.Utilities.FFTCache"/> will be created temporarily and performance will suffer.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.FFT(System.Single[],Cavern.Utilities.FFTCache)">
            <summary>
            Fast Fourier transform a 1D signal.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.InPlaceFFT(Cavern.Utilities.Complex[])">
            <summary>
            Fast Fourier transform a 2D signal while keeping the source array allocation.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.InPlaceFFT(Cavern.Utilities.Complex[],Cavern.Utilities.FFTCache)">
            <summary>
            Fast Fourier transform a 2D signal while keeping the source array allocation.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.FFT1D(System.Single[])">
            <summary>
            Spectrum of a signal's FFT. The <see cref="T:Cavern.Utilities.FFTCache"/> will be created temporarily and performance will suffer.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.FFT1D(System.Single[],Cavern.Utilities.FFTCache)">
            <summary>
            Spectrum of a signal's FFT.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.InPlaceFFT(System.Single[])">
            <summary>
            Spectrum of a signal's FFT while keeping the source array allocation.
            The <see cref="T:Cavern.Utilities.FFTCache"/> will be created temporarily and performance will suffer.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.InPlaceFFT(System.Single[],Cavern.Utilities.FFTCache)">
            <summary>
            Spectrum of a signal's FFT while keeping the source array allocation.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.IFFT(Cavern.Utilities.Complex[])">
            <summary>
            Inverse Fast Fourier Transform of a transformed signal.
            The <see cref="T:Cavern.Utilities.FFTCache"/> will be created temporarily and performance will suffer.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.IFFT(Cavern.Utilities.Complex[],Cavern.Utilities.FFTCache)">
            <summary>
            Inverse Fast Fourier Transform of a transformed signal.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.InPlaceIFFT(Cavern.Utilities.Complex[])">
            <summary>
            Inverse Fast Fourier Transform of a transformed signal, while keeping the source array allocation.
            The <see cref="T:Cavern.Utilities.FFTCache"/> will be created temporarily and performance will suffer.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.InPlaceIFFT(Cavern.Utilities.Complex[],Cavern.Utilities.FFTCache)">
            <summary>
            Inverse Fast Fourier Transform of a transformed signal, while keeping the source array allocation.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.InPlaceIFFTUnscaled(Cavern.Utilities.Complex[],Cavern.Utilities.FFTCache)">
            <summary>
            Inverse Fast Fourier Transform of a transformed signal, while keeping the source array allocation, without a
            division with the number of elements. This is the definition of IFFT, but unsuitable for measurement use.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.MinimumPhaseSpectrum(Cavern.Utilities.Complex[])">
            <summary>
            Minimizes the phase of a spectrum. The <see cref="T:Cavern.Utilities.FFTCache"/> will be created temporarily and performance will suffer.
            </summary>
            <remarks>This function does not handle zeros in the spectrum.
            Make sure there is a threshold before using this function.</remarks>
        </member>
        <member name="M:Cavern.Utilities.Measurements.MinimumPhaseSpectrum(Cavern.Utilities.Complex[],Cavern.Utilities.FFTCache)">
            <summary>
            Minimizes the phase of a spectrum.
            </summary>
            <remarks>This function does not handle zeros in the spectrum.
            Make sure there is a threshold before using this function.</remarks>
        </member>
        <member name="M:Cavern.Utilities.Measurements.OffbandGain(Cavern.Utilities.Complex[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add gain to every frequency except a given band.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.GetRealPart(Cavern.Utilities.Complex[])">
            <summary>
            Get the real part of a signal's FFT.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.GetRealPartHalf(Cavern.Utilities.Complex[])">
            <summary>
            Get half of the real part of a signal's FFT.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.GetImaginaryPart(Cavern.Utilities.Complex[])">
            <summary>
            Get the imaginary part of a signal's FFT.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.GetSpectrum(Cavern.Utilities.Complex[])">
            <summary>
            Get the gains of frequencies in a signal after FFT.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.GetPhase(Cavern.Utilities.Complex[])">
            <summary>
            Get the gains of frequencies in a signal after FFT.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.GetFrequencyResponse(Cavern.Utilities.Complex[],Cavern.Utilities.Complex[])">
            <summary>
            Get the frequency response using the original sweep signal's FFT as reference.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.GetFrequencyResponse(Cavern.Utilities.Complex[],System.Single[])">
            <summary>
            Get the frequency response using the original sweep signal's FFT as reference.
            The <see cref="T:Cavern.Utilities.FFTCache"/> will be created temporarily and performance will suffer.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.GetFrequencyResponse(Cavern.Utilities.Complex[],System.Single[],Cavern.Utilities.FFTCache)">
            <summary>
            Get the frequency response using the original sweep signal's FFT as reference.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.GetFrequencyResponse(System.Single[],System.Single[])">
            <summary>
            Get the frequency response using the original sweep signal as reference.
            The <see cref="T:Cavern.Utilities.FFTCache"/> will be created temporarily and performance will suffer.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.GetFrequencyResponse(System.Single[],System.Single[],Cavern.Utilities.FFTCache)">
            <summary>
            Get the frequency response using the original sweep signal as reference.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.GetImpulseResponse(Cavern.Utilities.Complex[])">
            <summary>
            Get the complex impulse response using a precalculated frequency response.
            The <see cref="T:Cavern.Utilities.FFTCache"/> will be created temporarily and performance will suffer.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.GetImpulseResponse(Cavern.Utilities.Complex[],Cavern.Utilities.FFTCache)">
            <summary>
            Get the complex impulse response using a precalculated frequency response.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.GetImpulseResponse(System.Single[],System.Single[])">
             <summary>
             Get the complex impulse response using the original sweep signal as a reference.
            
             </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.GetImpulseResponse(System.Single[],System.Single[],Cavern.Utilities.FFTCache)">
            <summary>
            Get the complex impulse response using the original sweep signal as a reference.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.ProcessFFT(Cavern.Utilities.Complex[],Cavern.Utilities.FFTCache,System.Int32)">
            <summary>
            Actual FFT processing, somewhat in-place.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.ProcessFFT(System.Single[],Cavern.Utilities.FFTCache)">
            <summary>
            Fourier-transform a signal in 1D. The result is the spectral power.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Measurements.ProcessIFFT(Cavern.Utilities.Complex[],Cavern.Utilities.FFTCache,System.Int32)">
            <summary>
            Outputs IFFT(X) * N.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.QMath">
            <summary>
            Two plus two is four, minus one, that's three, quick maths.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.QMath.ConverterStruct">
            <summary>
            Converts the bytes of an int to a float or vice versa.
            In this class: hack for <see cref="M:Cavern.Utilities.QMath.Log2(System.Int32)"/> to use in-CPU float conversion as log2 by shifting the exponent.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.QMath.ConverterStruct.asInt">
            <summary>
            Get the contained 4 bytes as an integer.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.QMath.ConverterStruct.asUInt">
            <summary>
            Get the contained 4 bytes as an unsigned integer.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.QMath.ConverterStruct.asFloat">
            <summary>
            Get the contained 4 bytes as a float.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.QMath.ConverterStruct.byte0">
            <summary>
            Get the byte at index 0.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.QMath.ConverterStruct.byte1">
            <summary>
            Get the byte at index 1.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.QMath.ConverterStruct.byte2">
            <summary>
            Get the byte at index 2.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.QMath.ConverterStruct.byte3">
            <summary>
            Get the byte at index 3.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Average(System.Double[])">
            <summary>
            Calculate the average of an array.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Average(System.Double[],System.Int32)">
            <summary>
            Calculate the average of an array until the selected border element (exclusive).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Average(System.Double[],System.Int32,System.Int32)">
            <summary>
            Calculate the average of an array between <paramref name="from"/> (inclusive) and <paramref name="to"/> (exclusive).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Average(System.Single[])">
            <summary>
            Calculate the average of an array.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Average(System.Single[],System.Int32)">
            <summary>
            Calculate the average of an array until the selected border element (exclusive).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Average(System.Single[],System.Int32,System.Int32)">
            <summary>
            Calculate the average of an array between <paramref name="from"/> (inclusive) and <paramref name="to"/> (exclusive).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Base2Ceil(System.Int32)">
            <summary>
            Round up the number in base 2.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.BitsAfterMSB(System.Int32)">
            <summary>
            Count the number of bits after the most significant bit. 1 less than the MSB's position.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.BitsAfterMSB(System.Int64)">
            <summary>
            Count the number of bits after the most significant bit. 1 less than the MSB's position.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Clamp01(System.Single)">
            <summary>
            Clamps the value between 0 and 1.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.DbToGain(System.Single)">
            <summary>
            Convert decibels to voltage gain.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.GainToDb(System.Single)">
            <summary>
            Convert voltage gain to decibels.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.LeadingZerosInByte(System.Int32)">
            <summary>
            Counts the leading zeros in a byte. The byte is contained in an integer, but in byte limits.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.LeadingZeros(System.Int32)">
            <summary>
            Counts the leading zeros in an integer.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Unclamped linear interpolation.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Unclamped linear interpolation.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Unclamped linear interpolation.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
            <summary>
            Unclamped linear interpolation.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.LerpInverse(System.Single,System.Single,System.Single)">
            <summary>
            Gets t for linear interpolation for a given value.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.LerpInverse(System.Double,System.Double,System.Double)">
            <summary>
            Gets t for linear interpolation for a given value.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.LerpInverse(Cavern.Utilities.Complex,Cavern.Utilities.Complex,Cavern.Utilities.Complex)">
            <summary>
            Gets t for linear interpolation for a given value.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Log2(System.Int32)">
            <summary>
            Compute the base 2 logarithm of a number faster than a generic Log function.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Log2Ceil(System.Int32)">
            <summary>
            Compute the base 2 logarithm of a number faster than a generic Log function and round it up.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.ParseFloat(System.String)">
            <summary>
            Parse a float value regardless of the system's culture.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.PopulationCount(System.Int32)">
            <summary>
            Count the number of 1 bits in an int.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Revert(System.Byte)">
            <summary>
            Reverse the bit order in a byte.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.ReverseEndianness(System.UInt32)">
            <summary>
            Reverse the endianness of an unsigned integer.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.ReverseEndianness(System.UInt64)">
            <summary>
            Reverse the endianness of an unsigned long integer.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.SignCompare(System.Single,System.Single)">
            <summary>
            Checks if the two numbers have the same sign.
            </summary>
            <remarks>This function does not handle 0, 0 correctly for optimization purposes.</remarks>
        </member>
        <member name="M:Cavern.Utilities.QMath.Sum(System.Double[])">
            <summary>
            Sum all elements in an array.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Sum(System.Double[],System.Int32)">
            <summary>
            Sum the elements in an array until the selected border element (exclusive).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Sum(System.Double[],System.Int32,System.Int32)">
            <summary>
            Sum the elements in an array between <paramref name="from"/> (inclusive) and <paramref name="to"/> (exclusive).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Sum(System.Single[])">
            <summary>
            Sum all elements in an array.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Sum(System.Single[],System.Int32)">
            <summary>
            Sum the elements in an array until the selected border element (exclusive).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Sum(System.Single[],System.Int32,System.Int32)">
            <summary>
            Sum the elements in an array between <paramref name="from"/> (inclusive) and <paramref name="to"/> (exclusive).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Sum(System.Int32[])">
            <summary>
            Sum all elements in an array.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Sum(System.Int32[],System.Int32)">
            <summary>
            Sum the elements in an array until the selected border element (exclusive).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Sum(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Sum the elements in an array between <paramref name="from"/> (inclusive) and <paramref name="to"/> (exclusive).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.Sum(System.Collections.Generic.IReadOnlyList{System.Double})">
            <summary>
            Sum the elements in a list.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.SumAbs(System.Single[])">
            <summary>
            Sum absolute values of elements in an array.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.SumAbs(System.Single[],System.Int32)">
            <summary>
            Sum absolute values of elements in an array until the selected border element (exclusive).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.SumAbs(System.Single[],System.Int32,System.Int32)">
            <summary>
            Sum absolute values of elements in an array between <paramref name="from"/> (inclusive)
            and <paramref name="to"/> (exclusive).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.TrailingZeros(System.Int32)">
            <summary>
            Counts the trailing zeros in an integer.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.QMath.bitsAfterMSBHack">
            <summary>
            Conversion array for <see cref="M:Cavern.Utilities.QMath.BitsAfterMSB(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndAdd(System.Single*,System.Single*,System.Int32)">
            <summary>
            Multiply the values of both arrays together and add these multiples together.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndAdd(System.Single*,System.Single*,System.Single[],System.Int32)">
            <summary>
            Multiply the values of both arrays together to the corresponding element of the <paramref name="target"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndAdd(System.Single*,System.Single,System.Single[],System.Int32)">
            <summary>
            Multiply the values of an array with a constant to the corresponding element of the <paramref name="target"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndAdd(System.Single*,System.Single*,System.Single*,System.Single*,System.Single[],System.Int32)">
            <summary>
            Do <see cref="M:Cavern.Utilities.QMath.MultiplyAndAdd(System.Single*,System.Single*,System.Single[],System.Int32)"/> simultaneously for two different pairs of arrays.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndAdd(System.Single*,System.Single,System.Single*,System.Single,System.Single[],System.Int32)">
            <summary>
            Do <see cref="M:Cavern.Utilities.QMath.MultiplyAndAdd(System.Single*,System.Single,System.Single[],System.Int32)"/> simultaneously for two different arrays.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndSet(System.Single*,System.Single*,System.Single[],System.Int32)">
            <summary>
            Clear the <paramref name="target"/>, then do <see cref="M:Cavern.Utilities.QMath.MultiplyAndAdd(System.Single*,System.Single*,System.Single[],System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndSet(System.Single*,System.Single*,System.Single*,System.Single*,System.Single[],System.Int32)">
            <summary>
            Clear the <paramref name="target"/>, then do <see cref="M:Cavern.Utilities.QMath.MultiplyAndAdd(System.Single*,System.Single*,System.Single*,System.Single*,System.Single[],System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndSet(System.Single*,System.Single,System.Single*,System.Single,System.Single[],System.Int32)">
            <summary>
            Clear the <paramref name="target"/>, then do <see cref="M:Cavern.Utilities.QMath.MultiplyAndAdd(System.Single*,System.Single,System.Single*,System.Single,System.Single[],System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndAdd_Mono(System.Single*,System.Single*,System.Int32)">
            <summary>
            Multiply the values of both arrays together and add these multiples together.
            This version of the function is faster only in a Mono runtime (like Unity).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndAdd_Mono(System.Single*,System.Single*,System.Single*,System.Int32)">
            <summary>
            Multiply the values of both arrays together to the corresponding element of the <paramref name="target"/>.
            This version of the function is faster only in a Mono runtime (like Unity).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndAdd_Mono(System.Single*,System.Single,System.Single*,System.Int32)">
            <summary>
            Multiply the values of an array with a constant to the corresponding element of the <paramref name="target"/>.
            This version of the function is faster only in a Mono runtime (like Unity).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndAdd_Mono(System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Int32)">
            <summary>
            Do <see cref="M:Cavern.Utilities.QMath.MultiplyAndAdd_Mono(System.Single*,System.Single*,System.Single*,System.Int32)"/> simultaneously for two different pairs of arrays.
            This version of the function is faster only in a Mono runtime (like Unity).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndAdd_Mono(System.Single*,System.Single,System.Single*,System.Single,System.Single*,System.Int32)">
            <summary>
            Do <see cref="M:Cavern.Utilities.QMath.MultiplyAndAdd_Mono(System.Single*,System.Single,System.Single*,System.Int32)"/> simultaneously for two different arrays.
            This version of the function is faster only in a Mono runtime (like Unity).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndSet_Mono(System.Single*,System.Single*,System.Single*,System.Int32)">
            <summary>
            Clear the <paramref name="target"/>, then do <see cref="M:Cavern.Utilities.QMath.MultiplyAndAdd_Mono(System.Single*,System.Single*,System.Single*,System.Int32)"/>.
            This version of the function is faster only in a Mono runtime (like Unity).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndSet_Mono(System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Int32)">
            <summary>
            Clear the <paramref name="target"/>, then do <see cref="M:Cavern.Utilities.QMath.MultiplyAndAdd_Mono(System.Single*,System.Single*,System.Single*,System.Single*,System.Single*,System.Int32)"/>.
            This version of the function is faster only in a Mono runtime (like Unity).
            </summary>
        </member>
        <member name="M:Cavern.Utilities.QMath.MultiplyAndSet_Mono(System.Single*,System.Single,System.Single*,System.Single,System.Single*,System.Int32)">
            <summary>
            Clear the <paramref name="target"/>, then do <see cref="M:Cavern.Utilities.QMath.MultiplyAndAdd_Mono(System.Single*,System.Single,System.Single*,System.Single,System.Single*,System.Int32)"/>.
            This version of the function is faster only in a Mono runtime (like Unity).
            </summary>
        </member>
        <member name="T:Cavern.Utilities.RenderStats">
            <summary>
            Records rendering environment statistics for each <see cref="T:Cavern.Source"/>.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.RenderStats.StatHolder">
            <summary>
            Recorded stats about a <see cref="T:Cavern.Source"/>.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStats.StatHolder.SemiStatic">
            <summary>
            The source has moved some positions, but less times than the <see cref="P:Cavern.Utilities.RenderStats.SemiStaticLimit"/>.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStats.StatHolder.Static">
            <summary>
            False if the source was ever moved from its position.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStats.StatHolder.SuperStatic">
            <summary>
            False if the source was ever set to a position.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.RenderStats.StatHolder.Positions">
            <summary>
            Positions this source was placed on. The size of this set is limited to <see cref="P:Cavern.Utilities.RenderStats.SemiStaticLimit"/>.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStats.StatHolder.LastPosition">
            <summary>
            Last location of the source.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStats.SemiStaticLimit">
            <summary>
            Number of new positions required to consider a source dynamic.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.RenderStats.listener">
            <summary>
            Target rendering environment.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.RenderStats.stats">
            <summary>
            Recorded stats for each source.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.RenderStats.#ctor(Cavern.Listener)">
            <summary>
            Records rendering environment statistics for each <see cref="T:Cavern.Source"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.RenderStats.GetStaticOrSemiStaticPositions">
            <summary>
            Gets positions where any static or semi-static source was located.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.RenderStats.GetSemiStaticCount">
            <summary>
            Get how many sources weren't moved more than <see cref="P:Cavern.Utilities.RenderStats.SemiStaticLimit"/> times through all updates.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.RenderStats.GetSuperStaticCount">
            <summary>
            Get how many sources weren't even set to position through all updates.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.RenderStats.Update(System.Single[])">
            <summary>
            Update the stats according to the last <paramref name="frame"/> that's rendered by the <see cref="F:Cavern.Utilities.RenderStats.listener"/>.
            </summary>
            <remarks>The base class doesn't use the <paramref name="frame"/> data, but <see cref="T:Cavern.Utilities.RenderStatsEx"/> does.</remarks>
        </member>
        <member name="T:Cavern.Utilities.RenderStatsEx">
            <summary>
            Rendering environment statistics evaluator extended with audio quality metrics.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStatsEx.FrameLevelPeak">
            <summary>
            Peak signal level of a frame across all audio frames in relative signal level.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStatsEx.FrameLevelRMS">
            <summary>
            RMS level of the entire measured audio signal in relative signal level.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStatsEx.Macrodynamics">
            <summary>
            The dynamic range of the entire measured audio signal in relative signal level.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStatsEx.Microdynamics">
            <summary>
            The maximum dynamic range that happens in a second, in relative signal level.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStatsEx.LFELevelPeak">
            <summary>
            Peak signal level of a frame across all audio frames on the LFE channel in relative signal level.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStatsEx.LFELevelRMS">
            <summary>
            RMS level of the entire measured audio signal on the LFE channel in relative signal level.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStatsEx.LFEMacrodynamics">
            <summary>
            The dynamic range of the entire measured audio signal on the LFE channel in relative signal level.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStatsEx.LFEMicrodynamics">
            <summary>
            The maximum dynamic range that happens in a second on the LFE channel, in relative signal level.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStatsEx.SurroundLevelRMS">
            <summary>
            RMS level of the entire measured audio signal on the surround channels in relative signal level.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStatsEx.HeightLevelRMS">
            <summary>
            RMS level of the entire measured audio signal on the height channels in relative signal level.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStatsEx.RelativeSurroundLevel">
            <summary>
            Surrounds to all channels usage ratio.
            </summary>
        </member>
        <member name="P:Cavern.Utilities.RenderStatsEx.RelativeHeightLevel">
            <summary>
            Heights to all channels usage ratio.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.RenderStatsEx.rms">
            <summary>
            Used for calculating the global RMS by RMS(each frame's RMS). This holds the sum of squares and
            has to be evaluated with <see cref="P:Cavern.Utilities.RenderStatsEx.FrameLevelRMS"/>.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.RenderStatsEx.lfeRms">
            <summary>
            Used for the same purpose as <see cref="F:Cavern.Utilities.RenderStatsEx.rms"/>, but for the LFE channel.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.RenderStatsEx.surroundRms">
            <summary>
            Used for the same purpose as <see cref="F:Cavern.Utilities.RenderStatsEx.rms"/>, but for the surround channels.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.RenderStatsEx.heightRms">
            <summary>
            Used for the same purpose as <see cref="F:Cavern.Utilities.RenderStatsEx.rms"/>, but for the height channels.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.RenderStatsEx.frames">
            <summary>
            Number of measured audio frames.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.RenderStatsEx.averager">
            <summary>
            Averages the required values for calculating <see cref="P:Cavern.Utilities.RenderStatsEx.Microdynamics"/>.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.RenderStatsEx.skip">
            <summary>
            Process this many frames before the values of <see cref="F:Cavern.Utilities.RenderStatsEx.averager"/> become valid.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.RenderStatsEx.#ctor(Cavern.Listener)">
            <summary>
            Rendering environment statistics evaluator extended with audio quality metrics.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.RenderStatsEx.Update(System.Single[])">
            <summary>
            Update the stats according to the last <paramref name="frame"/>.
            </summary>
            <remarks>The <paramref name="frame"/> size must be constant across calls to get accurate results.</remarks>
        </member>
        <member name="T:Cavern.Utilities.Resample">
            <summary>
            Audio resampling functions.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.Resample.Adaptive(System.Single[],System.Int32,Cavern.QualityModes)">
            <summary>
            Resamples a single channel with the quality set by the user.
            </summary>
            <param name="samples">Samples of the source channel</param>
            <param name="to">New sample count</param>
            <param name="quality">Listener audio quality</param>
            <returns>Resampled version of the input channel</returns>
        </member>
        <member name="M:Cavern.Utilities.Resample.Adaptive(System.Single[],System.Int32,System.Int32,Cavern.QualityModes)">
            <summary>
            Resamples a multichannel array with the quality set by the user.
            </summary>
            <param name="samples">Samples of the source channel</param>
            <param name="to">New sample count per channel</param>
            <param name="channels">Channel count</param>
            <param name="quality">Listener audio quality</param>
            <returns>Resampled version of the input</returns>
        </member>
        <member name="M:Cavern.Utilities.Resample.NearestNeighbour(System.Single[],System.Int32)">
            <summary>
            Resamples a single channel with medium quality (nearest neighbour).
            </summary>
            <param name="samples">Samples of the source channel</param>
            <param name="to">New sample count</param>
            <returns>Returns a resampled version of the given array</returns>
        </member>
        <member name="M:Cavern.Utilities.Resample.Lerp(System.Single[],System.Int32)">
            <summary>
            Resamples a single channel with medium quality (linear interpolation).
            </summary>
            <param name="samples">Samples of the source channel</param>
            <param name="to">New sample count</param>
            <returns>Returns a resampled version of the given array</returns>
        </member>
        <member name="M:Cavern.Utilities.Resample.CatmullRom(System.Single[],System.Int32)">
            <summary>
            Resamples a single channel with high quality (Catmull-Rom spline).
            </summary>
            <param name="samples">Samples of the source channel</param>
            <param name="to">New sample count</param>
            <returns>Returns a resampled version of the given array</returns>
        </member>
        <member name="T:Cavern.Utilities.RunningChannelSeparator">
            <summary>
            Gets interlaced samples and converts them to multichannel, block by block.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.RunningChannelSeparator.GetSamples">
            <summary>
            Function that fills the <see cref="F:Cavern.Utilities.RunningChannelSeparator.input"/> sample array.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.RunningChannelSeparator.input">
            <summary>
            Input cache array.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.RunningChannelSeparator.output">
            <summary>
            Output cache array.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.RunningChannelSeparator.#ctor(System.Int32)">
            <summary>
            Gets interlaced samples and converts them to multichannel, block by block.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.RunningChannelSeparator.Update(System.Int32)">
            <summary>
            Get a new multichannel block of <paramref name="samples"/>.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.VectorExtensions">
            <summary>
            Extra vector calculations.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.VectorExtensions.Deg2Rad">
            <summary>
            Converts degrees to radians. = pi / 180.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.VectorExtensions.Rad2Deg">
            <summary>
            Converts radians to degrees. = 180 / pi.
            </summary>
        </member>
        <member name="F:Cavern.Utilities.VectorExtensions.Sqrt2p2">
            <summary>
            sqrt(2) / 2 = 1 / sqrt(2)
            </summary>
        </member>
        <member name="M:Cavern.Utilities.VectorExtensions.MapToCube(System.Numerics.Vector3)">
            <summary>
            Returns a vector that's the same direction as the source vector, but it's on the side of a 2x2x2 cube.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.VectorExtensions.Normalized(System.Numerics.Vector3)">
            <summary>
            Returns a vector that's the same direction as the source vector, but has a length of 1.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.VectorExtensions.PlaceInCube(System.Numerics.Vector3)">
            <summary>
            For given angles (in degrees) it returns a vector for that position on a cube with the side length of 2.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.VectorExtensions.PlaceInSphere(System.Numerics.Vector3)">
            <summary>
            For given angles (in degrees) it returns a vector for that position on a sphere with the radius of 1.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.VectorExtensions.PlaceOnRoom(System.Numerics.Vector3)">
            <summary>
            Depending on the room shape (spherical or cube), returns the position on the normalized shape.
            To get the actual wall position, scale with <see cref="P:Cavern.Listener.EnvironmentSize"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.VectorExtensions.PlaceNormalOnRoom(System.Numerics.Vector3)">
            <summary>
            Converts a normalized direction vector to the normalized shape of the room.
            To get the actual wall position, scale with <see cref="P:Cavern.Listener.EnvironmentSize"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.VectorExtensions.RotateInverse(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Rotate this vector by all axes in the opposite direction.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.VectorExtensions.WarpToCube(System.Numerics.Vector3)">
            <summary>
            Warps the points of a sphere to points a cube.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.VectorExtensions.WarpNormalToCube(System.Numerics.Vector3)">
            <summary>
            Warps the points of a normalized sphere to points a cube. Requires the length of the vector to be 1.
            </summary>
        </member>
        <member name="T:Cavern.Utilities.WaveformUtils">
            <summary>
            Sound processing functions.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.ClearChannel(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets all samples in a single channel of an interlaced signal to 0.
            </summary>
            <param name="signal">Interlaced signal to clear a channel of</param>
            <param name="channel">Channel index, but can be used as the first sample's index to clear</param>
            <param name="channels">Total number of channels in the <paramref name="signal"/></param>
            <param name="limit">Total number of samples to remove</param>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Delay(System.Single[],System.Int32)">
            <summary>
            Apply a delay of a given number of <paramref name="samples"/> on a <paramref name="waveform"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Delay(System.Single[],System.Single)">
            <summary>
            Apply a delay on the <paramref name="signal"/> even with fraction <paramref name="samples"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Delay(System.Single[],System.Single,Cavern.Utilities.FFTCache)">
            <summary>
            Apply a delay on the <paramref name="signal"/> even with fraction <paramref name="samples"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Delay(Cavern.Utilities.Complex[],System.Single)">
            <summary>
            Apply a delay on the <paramref name="signal"/> even with fraction <paramref name="samples"/>.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Downmix(System.Single[],System.Int32)">
            <summary>
            Downmix audio to mono.
            </summary>
            <param name="source">Audio to downmix</param>
            <param name="channels">Source channel count</param>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Downmix(System.Single[],System.Single[],System.Int32)">
            <summary>
            Downmix audio for a lesser channel count with limited knowledge of the target system's channel locations.
            </summary>
            <param name="from">The output of a <see cref="T:Cavern.Listener"/> or an audio signal
            that matches the renderer's channel count.</param>
            <param name="to">Output array</param>
            <param name="toChannels">Output channel count</param>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.ExtractChannel(System.Single[],System.Single[],System.Int32,System.Int32)">
            <summary>
            Extract a single channel from a multichannel audio stream.
            </summary>
            <param name="from">Source audio stream</param>
            <param name="to">Destination channel data</param>
            <param name="channel">Target channel</param>
            <param name="channels">Channel count</param>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Gain(System.Single[],System.Single)">
            <summary>
            Multiplies all values in an array.
            </summary>
            <param name="target">Array reference</param>
            <param name="value">Multiplier</param>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Gain(System.Single[],System.Single,System.Int32,System.Int32)">
            <summary>
            Set gain for a channel in a multichannel array.
            </summary>
            <param name="target">Sample reference</param>
            <param name="addedGain">The number to multiply each element with</param>
            <param name="channel">Target channel</param>
            <param name="channels">Channel count</param>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.GetPeak(System.Single[])">
            <summary>
            Get the peak amplitude of a single-channel array.
            </summary>
            <param name="target">Array reference</param>
            <returns>Peak amplitude in the array</returns>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.GetPeak(System.Single[],System.Int32,System.Int32)">
            <summary>
            Get the peak amplitude in a partial audio signal.
            </summary>
            <param name="target">Array reference</param>
            <param name="from">Range start sample (inclusive)</param>
            <param name="to">Range end sample (exclusive)</param>
            <returns>Peak amplitude in the given range</returns>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.GetPeak(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the peak amplitude of a given channel in a multichannel array.
            </summary>
            <param name="target">Array reference</param>
            <param name="samples">Samples per channel</param>
            <param name="channel">Target channel</param>
            <param name="channels">Channel count</param>
            <returns>Peak amplitude of the channel</returns>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.GetPeakSigned(System.Single[])">
            <summary>
            Get the peak amplitude with its sign in a partial audio signal.
            </summary>
            <param name="target">Array reference</param>
            <returns>Peak amplitude with its sign</returns>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.GetPeakSigned(System.Single[],System.Int32,System.Int32)">
            <summary>
            Get the peak amplitude with its sign in a partial audio signal.
            </summary>
            <param name="target">Array reference</param>
            <param name="from">Range start sample (inclusive)</param>
            <param name="to">Range end sample (exclusive)</param>
            <returns>Peak amplitude with its sign in the given range</returns>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.GetRMS(System.Single[])">
            <summary>
            Get the root mean square amplitude of a single-channel signal.
            </summary>
            <param name="target">Samples of the signal</param>
            <returns>RMS amplitude of the signal</returns>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.GetRMS(System.Single[],System.Int32,System.Int32)">
            <summary>
            Get the root mean square amplitude of a single channel in a multichannel signal.
            </summary>
            <param name="target">Samples of the signal</param>
            <param name="channel">The measured channel</param>
            <param name="channels">Total number of channels</param>
            <returns>RMS amplitude of the signal</returns>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Insert(System.Single[],System.Single[],System.Single)">
            <summary>
            Sets a track to a stream with a set gain.
            </summary>
            <param name="source">Source track</param>
            <param name="destination">Destination stream</param>
            <param name="gain">Multiplier of signal amplitude</param>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Insert(System.Single[],System.Single[],System.Int32,System.Int32)">
            <summary>
            Sets a channel to a signal in a multichannel waveform.
            </summary>
            <param name="source">Samples of the given <paramref name="destinationChannel"/></param>
            <param name="destination">Channel array to write to</param>
            <param name="destinationChannel">Channel index</param>
            <param name="destinationChannels">Total channels</param>
            <remarks>It is assumed that the size of <paramref name="destination"/> equals the size of
            <paramref name="source"/> * <paramref name="destinationChannels"/>.</remarks>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Insert(System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a channel to a signal in a multichannel waveform.
            </summary>
            <param name="source">Samples of the given <paramref name="destinationChannel"/></param>
            <param name="sourceChannel">Source channel index, but can be used as a sample offset (all channels count)</param>
            <param name="sourceChannels">Total channels in the <paramref name="source"/></param>
            <param name="destination">Channel array to write to</param>
            <param name="destinationChannel">Destination channel index, but can be used as a sample offset (all channels count)</param>
            <param name="destinationChannels">Total channels in the <paramref name="destination"/></param>
            <param name="count">Number of samples of the channel to copy</param>
            <remarks>It is assumed that the size of <paramref name="destination"/> equals the size of
            <paramref name="source"/> * <paramref name="destinationChannels"/>.</remarks>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.InterlacedToMultichannel(System.Single[],System.Single[][])">
            <summary>
            Convert an interlaced multichannel waveform to separate arrays.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Invert(System.Single[])">
            <summary>
            Invert an audio signal.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.IsMute(System.Single[])">
            <summary>
            Gets if a signal has no amplitude.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Mix(System.Single[],System.Single[])">
            <summary>
            Mix a track to a mono stream.
            </summary>
            <param name="source">Source track</param>
            <param name="destination">Mono destination stream</param>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Mix(System.Single[],System.Int32,System.Single[])">
            <summary>
            Mix a partial track to a mono stream. The mixing starts at a sample offset, and lasts until the stream.
            </summary>
            <param name="source">Source track</param>
            <param name="sourceOffset">Start the source from this sample</param>
            <param name="destination">Mono destination stream</param>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Mix(System.Single[],System.Single[],System.Single)">
            <summary>
            Mix a track to a mono stream with a given gain.
            </summary>
            <param name="source">Source track</param>
            <param name="destination">Mono destination stream</param>
            <param name="gain">Linear amplification of the <paramref name="source"/> track</param>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Mix(System.Single[],System.Single[],System.Int32,System.Int32,System.Single)">
            <summary>
            Mix a track to a stream' given channel with a given gain.
            </summary>
            <param name="source">Source track</param>
            <param name="destination">Interlaced destination stream</param>
            <param name="destinationChannel">Channel of the <paramref name="destination"/></param>
            <param name="destinationChannels">Number of channels in the <paramref name="destination"/></param>
            <param name="gain">Linear amplification of the <paramref name="source"/> track</param>
            <remarks>It is assumed that the size of <paramref name="destination"/> equals the size of
            <paramref name="source"/> * <paramref name="destinationChannels"/>.</remarks>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Mix(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Mix a channel of a stream to one of its other track.
            </summary>
            <param name="source">Source track</param>
            <param name="sourceChannel">Channel to copy to the <paramref name="destinationChannel"/></param>
            <param name="destinationChannel">Channel to mix the <paramref name="sourceChannel"/> to</param>
            <param name="channels">Number of channels in the <paramref name="source"/></param>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Mix(System.Single[],System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Mix a channel of a stream to one of its other track.
            </summary>
            <param name="source">Source track</param>
            <param name="sourceChannel">Channel to copy to the <paramref name="destinationChannel"/></param>
            <param name="destinationChannel">Channel to mix the <paramref name="sourceChannel"/> to</param>
            <param name="channels">Number of channels in the <paramref name="source"/></param>
            <param name="gain">Signal amplitude multiplier</param>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.MultichannelToInterlaced(System.Single[][],System.Int64,System.Int64)">
            <summary>
            Convert part of a multichannel waveform in different arrays to an interlaced waveform.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Normalize(System.Single[])">
            <summary>
            Set a signal's peak to 1 (0 dB FS).
            </summary>
            <param name="target">Samples to normalize</param>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.Subtract(System.Single[],System.Single[])">
            <summary>
            Subtract a track from a stream.
            </summary>
            <param name="source">Track to subtract</param>
            <param name="destination">Track to subtract from</param>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.SwapChannels(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Swap two channels in an interlaced block of samples.
            </summary>
            <param name="target">Interlaced block of samples</param>
            <param name="channelA">First channel index</param>
            <param name="channelB">Second channel index</param>
            <param name="channels">Total channel count</param>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.TrimStart(System.Single[]@)">
            <summary>
            Remove the 0s from the beginning of the signal.
            </summary>
        </member>
        <member name="M:Cavern.Utilities.WaveformUtils.TrimEnd(System.Single[]@)">
            <summary>
            Remove the 0s from the end of the signal.
            </summary>
        </member>
        <member name="T:Cavern.Jack">
            <summary>
            Relations of PC jack outputs and their channels.
            </summary>
        </member>
        <member name="F:Cavern.Jack.Front">
            <summary>
            Front Jack (channel 0-1).
            </summary>
        </member>
        <member name="F:Cavern.Jack.CenterLFE">
            <summary>
            Center/LFE Jack (channel 2-3).
            </summary>
        </member>
        <member name="F:Cavern.Jack.Rear">
            <summary>
            Rear (or Side in 5.1/Side configuration) Jack (channel 4-5).
            </summary>
        </member>
        <member name="F:Cavern.Jack.Side">
            <summary>
            Side Jack (channel 6-7).
            </summary>
        </member>
        <member name="T:Cavern.QualityModes">
            <summary>Cavern processing quality levels.</summary>
        </member>
        <member name="F:Cavern.QualityModes.Low">
             <summary>
             Lowest quality: forced maximum performance by disabling some features.
            
             Doppler effect and pitch shifting: No.
             Resampling quality: Low (nearest neighbour).
             Channels mixed to 3D space: First.
             Accurate angle calculation in asymmetric mode: No.
             Non-approximated 3D mix for Studio/Home in asymmetric mode: No.
             </summary>
        </member>
        <member name="F:Cavern.QualityModes.Medium">
             <summary>
             Medium quality: maximum performance with all features enabled.
            
             Doppler effect and pitch shifting: Low quality.
             Resampling quality: Low (nearest neighbour).
             Channels mixed to 3D space: First.
             Accurate angle calculation in asymmetric mode: No.
             Non-approximated 3D mix for Studio/Home in asymmetric mode: No.
             </summary>
        </member>
        <member name="F:Cavern.QualityModes.High">
             <summary>
             High quality: maximum quality except for heavy features.
            
             Doppler effect and pitch shifting: High quality.
             Resampling quality: Medium (linear interpolation).
             Channels mixed to 3D space: All.
             Accurate angle calculation in asymmetric mode: Yes.
             Non-approximated 3D mix for Studio/Home in asymmetric mode: No.
             </summary>
        </member>
        <member name="F:Cavern.QualityModes.Perfect">
             <summary>
             Perfect quality: maximum quality for all features.
            
             Doppler effect and pitch shifting: High quality.
             Resampling quality: High (Catmull-Rom).
             Channels mixed to 3D space: All.
             Accurate angle calculation in asymmetric mode: Yes.
             Non-approximated 3D mix for Studio/Home in asymmetric mode: Yes.
             </summary>
        </member>
        <member name="T:Cavern.Rolloffs">
            <summary>
            Audio rolloff modes.
            </summary>
        </member>
        <member name="F:Cavern.Rolloffs.Logarithmic">
            <summary>
            Logarithmic rolloff by distance.
            </summary>
        </member>
        <member name="F:Cavern.Rolloffs.Linear">
            <summary>
            Linear rolloff in range.
            </summary>
        </member>
        <member name="F:Cavern.Rolloffs.Real">
            <summary>
            Physically correct rolloff by distance.
            </summary>
        </member>
        <member name="F:Cavern.Rolloffs.Disabled">
            <summary>
            No rolloff.
            </summary>
        </member>
        <member name="T:Cavern.Environments">
            <summary>
            Environment type, which determines rendering method.
            </summary>
        </member>
        <member name="F:Cavern.Environments.Studio">
            <summary>
            For a single listener in the center with speakers placed around in a sphere.<br />
            <b>Symmetric engine</b>: balance-based.<br />
            <b>Asymmetric engine</b>: hybrid directional.
            </summary>
        </member>
        <member name="F:Cavern.Environments.Home">
            <summary>
            For a single listener or a few listeners close to each other on the center with
            speakers placed around in a cuboid.<br />
            <b>Symmetric engine</b>: balance-based.<br />
            <b>Asymmetric engine</b>: hybrid distance-based.
            </summary>
        </member>
        <member name="F:Cavern.Environments.Theatre">
            <summary>
            For many listeners. Viewers at the sides or the back of the room will also
            experience 3D audio, unlike in Studio or Home environments, but this will reduce
            the overall effect quality, even on the center.<br />
            <b>Symmetric engine</b>: balance-based.<br />
            <b>Asymmetric engine</b>: directional.
            </summary>
        </member>
        <member name="T:Cavern.Virtualizer.Distancer">
            <summary>
            Handles distancing calculations for a single source's two ears.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.Distancer.angles">
            <summary>
            All the angles that have their own impulse responses.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.Distancer.distances">
            <summary>
            All the distances that have their own impulse responses for each angle in meters.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.Distancer.impulses">
            <summary>
            Ear canal distortion impulse responses for given angles and distances. The first dimension is the angle,
            provided in <see cref="F:Cavern.Virtualizer.Distancer.angles"/>, and the second dimension is the distance, provided in <see cref="F:Cavern.Virtualizer.Distancer.distances"/>.
            The delays for each filter are found in <see cref="F:Cavern.Virtualizer.Distancer.impulseDelays"/> and are applied when running the constructor first.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.Distancer.impulseDelays">
            <summary>
            Trailing zeros to add before the <see cref="F:Cavern.Virtualizer.Distancer.impulses"/>.
            </summary>
        </member>
        <member name="P:Cavern.Virtualizer.Distancer.LeftGain">
            <summary>
            The left ear's gain that corresponds to the <see cref="F:Cavern.Virtualizer.Distancer.source"/>'s distance.
            </summary>
        </member>
        <member name="P:Cavern.Virtualizer.Distancer.RightGain">
            <summary>
            The left ear's gain that corresponds to the <see cref="F:Cavern.Virtualizer.Distancer.source"/>'s distance.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.Distancer.trueGain">
            <summary>
            Apply physically correct gain correction. Disable this feature to be able to use a custom gain by distance.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.Distancer.distanceFactor">
            <summary>
            Decreases real distances by this factor to shrink the environment's scale.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.Distancer.source">
            <summary>
            The filtered source.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.Distancer.filter">
            <summary>
            The filter processing the <see cref="F:Cavern.Virtualizer.Distancer.source"/>.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.Distancer.filterSize">
            <summary>
            The maximum length of any of the <see cref="F:Cavern.Virtualizer.Distancer.impulses"/>, because if the <see cref="T:Cavern.Filters.FastConvolver"/> is used,
            the arrays won't be reassigned and the filter won't cut out, and if the <see cref="T:Cavern.Filters.SpikeConvolver"/> is used,
            the overhead is basically zero.
            </summary>
        </member>
        <member name="M:Cavern.Virtualizer.Distancer.#ctor(Cavern.Source)">
            <summary>
            Create a distance simulation for a <see cref="T:Cavern.Source"/>.
            </summary>
        </member>
        <member name="M:Cavern.Virtualizer.Distancer.Generate(System.Boolean,System.Single[])">
            <summary>
            Generate the left/right ear filters.
            </summary>
            <param name="right">The object is to the right of the <see cref="T:Cavern.Listener"/>'s forward vector</param>
            <param name="samples">Single-channel downmixed samples to process</param>
        </member>
        <member name="T:Cavern.Virtualizer.VirtualizerFilter">
            <summary>
            Convolution filters for each ear and virtual channel to simulate a spatial environment.
            </summary>
        </member>
        <member name="P:Cavern.Virtualizer.VirtualizerFilter.FilterSampleRate">
            <summary>
            Sample rate of the recorded HRIR filters. Only this system sample rate is allowed for virtualization.
            </summary>
        </member>
        <member name="P:Cavern.Virtualizer.VirtualizerFilter.ReferenceDistance">
            <summary>
            The active filter set's impulses were measured at this distance, meters.
            </summary>
        </member>
        <member name="P:Cavern.Virtualizer.VirtualizerFilter.VirtualChannels">
            <summary>
            Number of virtual channels.
            </summary>
        </member>
        <member name="P:Cavern.Virtualizer.VirtualizerFilter.SpatialChannels">
            <summary>
            Active virtualized channels and their corresponding filters.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualizerFilter.originalSplit">
            <summary>
            Cache of each output channel.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualizerFilter.leftSplit">
            <summary>
            Cache of each output channel for one ear.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualizerFilter.rightSplit">
            <summary>
            Cache of each output channel for one ear.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualizerFilter.blockSize">
            <summary>
            Length of split arrays.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualizerFilter.left">
            <summary>
            Cached channel IDs for center hack.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualizerFilter.right">
            <summary>
            Cached channel IDs for center hack.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualizerFilter.center">
            <summary>
            Cached channel IDs for center hack.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualizerFilter.centerDelay">
            <summary>
            Center hack: add a 7.5 ms -20 dB delay of the center to fronts to simulate a wall echo for better immersion.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualizerFilter.delayedCenter">
            <summary>
            Delayed center channel signal for center hack.
            </summary>
        </member>
        <member name="M:Cavern.Virtualizer.VirtualizerFilter.Override(Cavern.Virtualizer.VirtualChannel[],System.Int32)">
            <summary>
            Apply a new set of HRIR filters. The reference distance of the sound sources from the subject will be 1 meter.
            </summary>
        </member>
        <member name="M:Cavern.Virtualizer.VirtualizerFilter.Override(Cavern.Virtualizer.VirtualChannel[],System.Int32,System.Single)">
            <summary>
            Apply a new set of HRIR filters, and specify what distance from the subject was the speaker when they were created.
            </summary>
        </member>
        <member name="M:Cavern.Virtualizer.VirtualizerFilter.Reset">
            <summary>
            Restore the default HRIR filter set.
            </summary>
        </member>
        <member name="M:Cavern.Virtualizer.VirtualizerFilter.SetLayout">
            <summary>
            Set up virtual channel set for the virtualization filters.
            </summary>
        </member>
        <member name="M:Cavern.Virtualizer.VirtualizerFilter.Process(System.Single[],System.Int32)">
            <summary>
            Apply the virtualizer on the <see cref="T:Cavern.Listener"/>'s output,
            if the configuration matches the virtualization layout and filter sample rate.
            </summary>
        </member>
        <member name="M:Cavern.Virtualizer.VirtualizerFilter.ProcessChannel(System.Int32)">
            <summary>
            Split and convolve a single channel by ID.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualizerFilter.unassigned">
            <summary>
            Marker instead of a channel ID when a channel was not set.
            </summary>
        </member>
        <member name="M:Cavern.Virtualizer.VirtualizerFilter.GetDefaultHRIRSet">
            <summary>
            Returns the default HRIR set (see the Cavern HRIR repo for more info).
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualizerFilter.defaultSampleRate">
            <summary>
            The default filter's <see cref="P:Cavern.Virtualizer.VirtualizerFilter.FilterSampleRate"/>.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualizerFilter.defaultDistance">
            <summary>
            The default filter's <see cref="P:Cavern.Virtualizer.VirtualizerFilter.ReferenceDistance"/>.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualizerFilter.crossoverFrequency">
            <summary>
            Low frequency crossover, sounds not to be spatialized.
            </summary>
        </member>
        <member name="T:Cavern.Virtualizer.VirtualChannel">
            <summary>
            Represents a virtualizable channel with impulse responses for both ears.
            </summary>
        </member>
        <member name="P:Cavern.Virtualizer.VirtualChannel.Crossover">
            <summary>
            Low frequency crossover filter for retaining bass outside the usable impulse response frequency range.
            </summary>
        </member>
        <member name="P:Cavern.Virtualizer.VirtualChannel.Filter">
            <summary>
            Combo convolution and delay filter for both ears.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualChannel.x">
            <summary>
            Virtual speaker angle difference from the subject's gaze on the vertical axis: elevation.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualChannel.y">
            <summary>
            Virtual speaker angle difference from the subject's gaze on the horizontal axis: azimuth.
            </summary>
        </member>
        <member name="M:Cavern.Virtualizer.VirtualChannel.#ctor(System.Single,System.Single,System.Single[],System.Single[],System.Int32,System.Single)">
            <summary>
            Constructs a virtualizable channel with impulse responses for both ears.
            </summary>
        </member>
        <member name="M:Cavern.Virtualizer.VirtualChannel.FromSubparMeasurement(System.Single,System.Single,System.Single[],System.Single[],System.Int32,System.Single)">
            <summary>
            Constructs a virtualizable channel with impulse responses for both ears, recalibrating gains by the position's angles
            if they were lost in recording/processing.
            </summary>
        </member>
        <member name="M:Cavern.Virtualizer.VirtualChannel.Parse(Cavern.MultichannelWaveform,System.Int32)">
            <summary>
            Parse the virtual channels from a multichannel HRIR set, and use it above 120 Hz.
            </summary>
        </member>
        <member name="M:Cavern.Virtualizer.VirtualChannel.Parse(Cavern.MultichannelWaveform,System.Int32,System.Single)">
            <summary>
            Parse the virtual channels from a multichannel HRIR set, and use it above a set frequency.
            </summary>
        </member>
        <member name="M:Cavern.Virtualizer.VirtualChannel.GetDelay(System.Single)">
            <summary>
            Get the secondary ear's delay by angle of attack.
            </summary>
            <remarks>This formula is based on measurements and the sine wave's usability was disproven.
            See Bence S. (2022). Extending HRTF with distance simulation based on ray-tracing.</remarks>
        </member>
        <member name="M:Cavern.Virtualizer.VirtualChannel.Equals(Cavern.Virtualizer.VirtualChannel)">
            <summary>
            Check if the two virtual channels handle the same source channel position.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualChannel.minus10dB">
            <summary>
            Precalculated -10 dB as voltage gain. Used by angle gain post-processing.
            </summary>
        </member>
        <member name="F:Cavern.Virtualizer.VirtualChannel.minus16dB">
            <summary>
            Precalculated -16 dB as voltage gain. Used by angle gain post-processing for middle channels to prevent double volume.
            </summary>
        </member>
        <member name="T:Cavern.MultichannelWaveform">
            <summary>
            Contains multiple waveforms of the same length.
            </summary>
        </member>
        <member name="P:Cavern.MultichannelWaveform.Item(System.Int32)">
            <summary>
            Get a <paramref name="channel"/>'s waveform.
            </summary>
        </member>
        <member name="P:Cavern.MultichannelWaveform.Channels">
            <summary>
            The number of channels contained in this waveform.
            </summary>
        </member>
        <member name="F:Cavern.MultichannelWaveform.signals">
            <summary>
            Each channel's waveform.
            </summary>
        </member>
        <member name="M:Cavern.MultichannelWaveform.#ctor(System.Single[][])">
            <summary>
            Construct a multichannel waveform from multiple mono waveforms.
            </summary>
        </member>
        <member name="M:Cavern.MultichannelWaveform.#ctor(System.Single[],System.Int32)">
            <summary>
            Construct a multichannel waveform from an interlaced signal.
            </summary>
        </member>
        <member name="M:Cavern.MultichannelWaveform.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct an empty multichannel waveform of a given size.
            </summary>
        </member>
        <member name="M:Cavern.MultichannelWaveform.IsMute">
            <summary>
            Gets if the contained signal has no amplitude.
            </summary>
        </member>
        <member name="M:Cavern.MultichannelWaveform.Split(System.Int32)">
            <summary>
            Split this signal to blocks of a given <paramref name="blockSize"/> on each channel.
            </summary>
        </member>
        <member name="M:Cavern.MultichannelWaveform.Gain(System.Single)">
            <summary>
            Multiplies all values in all channels' signals.
            </summary>
        </member>
        <member name="M:Cavern.MultichannelWaveform.GetPeak">
            <summary>
            Get the peak amplitude across all channels.
            </summary>
        </member>
        <member name="M:Cavern.MultichannelWaveform.Normalize">
            <summary>
            Set the peak signal across all channels to 1 (0 dB FS).
            </summary>
        </member>
        <member name="M:Cavern.MultichannelWaveform.TrimStart">
            <summary>
            Remove the 0s from the beginning of the multichannel signal.
            </summary>
        </member>
        <member name="M:Cavern.MultichannelWaveform.TrimEnd">
            <summary>
            Remove the 0s from the end of the signal, but keep the lengths of jagged arrays equal to the longest cut channel.
            </summary>
        </member>
        <member name="T:Cavern.Waveforms.DifferentSignalLengthsException">
            <summary>
            Tells if a multichannel waveform's channels wouldn't have a matching length.
            </summary>
        </member>
        <member name="M:Cavern.Waveforms.DifferentSignalLengthsException.#ctor">
            <summary>
            Tells if a multichannel waveform's channels wouldn't have a matching length.
            </summary>
        </member>
    </members>
</doc>
