<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cavern.Format</name>
    </assembly>
    <members>
        <member name="T:Cavern.Format.AudioFormat">
            <summary>
            Supported audio formats in this namespace.
            </summary>
        </member>
        <member name="F:Cavern.Format.AudioFormat.RIFFWave">
            <summary>
            Minimal RIFF Wave implementation.
            </summary>
        </member>
        <member name="F:Cavern.Format.AudioFormat.LimitlessAudioFormat">
            <summary>
            Limitless Audio Format, supports spatial mixes.
            </summary>
        </member>
        <member name="T:Cavern.Format.BitDepth">
            <summary>
            Audio bit depth choices.
            </summary>
        </member>
        <member name="F:Cavern.Format.BitDepth.Int8">
            <summary>
            8-bit integer.
            </summary>
        </member>
        <member name="F:Cavern.Format.BitDepth.Int16">
            <summary>
            16-bit integer.
            </summary>
        </member>
        <member name="F:Cavern.Format.BitDepth.Int24">
            <summary>
            24-bit integer.
            </summary>
        </member>
        <member name="F:Cavern.Format.BitDepth.Float32">
            <summary>
            32-bit floating point.
            </summary>
        </member>
        <member name="T:Cavern.Format.LAFMode">
            <summary>
            Limitless Audio Format quality modes.
            </summary>
        </member>
        <member name="F:Cavern.Format.LAFMode.Int8">
            <summary>
            8-bit integer.
            </summary>
        </member>
        <member name="F:Cavern.Format.LAFMode.Int16">
            <summary>
            16-bit integer.
            </summary>
        </member>
        <member name="F:Cavern.Format.LAFMode.Int24">
            <summary>
            24-bit integer.
            </summary>
        </member>
        <member name="F:Cavern.Format.LAFMode.Float32">
            <summary>
            32-bit floating point.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.Codec">
            <summary>
            Codecs detected (not neccessarily supported) by Cavern.Format.
            Video codecs come befpre audio, and higher quality (newer, immersive, better overall quality) codecs also come first.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.Unknown">
            <summary>
            Undetected codec.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.HEVC">
            <summary>
            High Efficiency Video Coding aka H.265, video.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.HEVC_DolbyVision">
            <summary>
            <see cref="F:Cavern.Format.Common.Codec.HEVC"/> containing Dolby Vision, video.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.AVC">
            <summary>
            Advanced Video Coding aka H.264, video.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.LimitlessAudio">
            <summary>
            Limitless Audio Format, audio.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.ADM_BWF">
            <summary>
            Audio Definition Model Broadcast Wave Format, audio.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.ADM_BWF_Atmos">
            <summary>
            Audio Definition Model Broadcast Wave Format - Dolby Atmos subset, audio.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.EnhancedAC3">
            <summary>
            Enhanced AC-3 (Dolby Digital Plus), audio.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.PCM_Float">
            <summary>
            Pulse Code Modulation, IEEE floating point, audio.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.PCM_LE">
            <summary>
            Pulse Code Modulation, little-endian integer, audio.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.TrueHD">
            <summary>
            Dolby TrueHD (Meridian Lossless Packaging), audio.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.DTS_HD">
            <summary>
            DTS-HD lossless, could be DTS:X, audio.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.FLAC">
            <summary>
            Xiph Free Lossless Audio Codec, audio.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.Opus">
            <summary>
            Xiph Opus, audio.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.DTS">
            <summary>
            DTS, could be any DTS format, audio.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Codec.AC3">
            <summary>
            AC-3 (Dolby Digital), audio.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.CodecExtensions">
            <summary>
            Extra functions for codecs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.CodecExtensions.audioCodecs">
            <summary>
            List of known (not neccessarily supported) audio codecs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.CodecExtensions.videoCodecs">
            <summary>
            List of known video codecs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.CodecExtensions.supportedAudioCodecs">
            <summary>
            List of supported audio codecs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.CodecExtensions.environmentalAudioCodecs">
            <summary>
            List of audio codecs that can export rendered audio environments.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.CodecExtensions.IsAudio(Cavern.Format.Common.Codec)">
            <summary>
            Checks if a codec transports audio.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.CodecExtensions.IsVideo(Cavern.Format.Common.Codec)">
            <summary>
            Checks if a codec transports video.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.CodecExtensions.IsSupportedAudio(Cavern.Format.Common.Codec)">
            <summary>
            Checks if a codec is a supported audio codec.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.CodecExtensions.IsEnvironmental(Cavern.Format.Common.Codec)">
            <summary>
            Checks if a codec is able to export a rendered audio environment.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.Container">
            <summary>
            Container formats supported by Cavern.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Container.NotContainer">
            <summary>
            The format is not a container, but a simple audio file.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Container.Matroska">
            <summary>
            Matroska and WebM.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Container.MP4">
            <summary>
            MP4 and QuickTime.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.IMetadataSupplier">
            <summary>
            A codec that can supply its metadata in human-readable format.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.IMetadataSupplier.GetMetadata">
            <summary>
            Gets the metadata for this codec in a human-readable format.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.KeyLengthValue">
            <summary>
            A tag and its data encoded in the format of a key, a length, and a value, most notably used in the EBML format.
            </summary>
            <remarks><see cref="T:System.IO.BinaryReader"/> is not cached. This is an intentional memory optimization and has to be
            treated carefully.</remarks>
        </member>
        <member name="P:Cavern.Format.Common.KeyLengthValue.Tag">
            <summary>
            Key of the entry.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.KeyLengthValue.Length">
            <summary>
            Length of the entry.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.KeyLengthValue.position">
            <summary>
            Position in the file where the raw data of this entry starts.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.KeyLengthValue.#ctor(System.IO.Stream)">
            <summary>
            Read the metadata of a KLV.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.KeyLengthValue.GetBytes(System.IO.Stream)">
            <summary>
            Read the raw bytes of the value.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.KeyLengthValue.GetFloatBE(System.IO.Stream)">
            <summary>
            Read the value as a big-endian float.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.KeyLengthValue.GetUTF8(System.IO.Stream)">
            <summary>
            Read the value as an UTF-8 string.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.KeyLengthValue.GetValue(System.IO.Stream)">
            <summary>
            Read the value as <see cref="T:Cavern.Format.Common.VarInt"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.KeyLengthValue.Position(System.IO.Stream)">
            <summary>
            Move a <see cref="T:System.IO.BinaryReader"/>'s position to the start of the value.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.ReadableMetadataField">
            <summary>
            A single field of a codec's metadata with its description.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.ReadableMetadataField.Name">
            <summary>
            The name of the field by the codec specification.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.ReadableMetadataField.Description">
            <summary>
            What the field actually contains in common terms.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.ReadableMetadataField.Value">
            <summary>
            Value of the field in the field's type.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.ReadableMetadataField.#ctor(System.String,System.String,System.Object)">
            <summary>
            A single field of a codec's metadata with its description.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.ReadableMetadataField.ToString">
            <summary>
            Displays the metadata field in human-readable format.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.ReadableMetadataHeader">
            <summary>
            The intermediate hierarchy element of <see cref="T:Cavern.Format.Common.ReadableMetadata"/>. Metadata is stored in headers, and headers contain fields.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.ReadableMetadataHeader.Name">
            <summary>
            Name of the header.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.ReadableMetadataHeader.Fields">
            <summary>
            The data values and their descriptions contained in this header.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.ReadableMetadataHeader.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Cavern.Format.Common.ReadableMetadataField})">
            <summary>
            Construct a holder of <paramref name="fields"/>.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.ReadableMetadata">
            <summary>
            Metadata of a codec in human-readable format, containing the names, descriptions, and values of fields in the codec header.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.ReadableMetadata.Headers">
            <summary>
            All the different headers used by the format, with their descriptive field infos.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.ReadableMetadata.#ctor(System.Collections.Generic.IReadOnlyList{Cavern.Format.Common.ReadableMetadataHeader})">
            <summary>
            Box the human-readable <see cref="P:Cavern.Format.Common.ReadableMetadata.Headers"/> for transfer.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.RenderTrack">
            <summary>
            Encodes audio content as a <see cref="T:Cavern.Format.Common.Track"/> to be used in a <see cref="T:Cavern.Format.Container.ContainerWriter"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.RenderTrack.timeStep">
            <summary>
            Seconds that pass with each block.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.RenderTrack.encoder">
            <summary>
            Encodes the audio into <see cref="F:Cavern.Format.Common.RenderTrack.output"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.RenderTrack.output">
            <summary>
            Encoded bytes are stored in this stream.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.RenderTrack.blockCache">
            <summary>
            The reused result of <see cref="M:Cavern.Format.Common.RenderTrack.ReadNextBlock"/> if the block length doesn't change.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.RenderTrack.blocksWritten">
            <summary>
            Number of blocks requested by <see cref="M:Cavern.Format.Common.RenderTrack.ReadNextBlock"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.RenderTrack.#ctor(Cavern.Format.Common.Codec,System.Int32,System.Int32,System.Int64,System.Int32,Cavern.Format.BitDepth)">
            <summary>
            Encodes audio content as a <see cref="T:Cavern.Format.Common.Track"/> to be used in a <see cref="T:Cavern.Format.Container.ContainerWriter"/>.
            </summary>
            <param name="format">Codec used for encoding</param>
            <param name="blockSize">The fixed number of samples that will be encoded (for all channels)</param>
            <param name="channelCount">Number of output channels</param>
            <param name="length">Content length in samples (for a single channel)</param>
            <param name="sampleRate">Rendering environment sample rate</param>
            <param name="bits">Bit depth of the <paramref name="format"/> if applicable</param>
        </member>
        <member name="M:Cavern.Format.Common.RenderTrack.EncodeNextBlock(System.Single[])">
            <summary>
            Process a block of samples and put the encoded block in <see cref="F:Cavern.Format.Common.RenderTrack.output"/> so <see cref="M:Cavern.Format.Common.RenderTrack.ReadNextBlock"/> could read it.
            To use this class, do the following steps:<br />
            - create the fixed-size block of samples<br />
            - <see cref="M:Cavern.Format.Common.RenderTrack.EncodeNextBlock(System.Single[])"/><br />
            - <see cref="M:Cavern.Format.Container.ContainerWriter.WriteBlock(System.Double)"/>, it will call <see cref="M:Cavern.Format.Common.RenderTrack.ReadNextBlock"/>
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.RenderTrack.IsNextBlockAvailable">
            <summary>
            The following block of the track is rendered and available.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.RenderTrack.ReadNextBlock">
            <summary>
            Continue reading the track.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.RenderTrack.IsNextBlockKeyframe">
            <summary>
            Returns if the next block can be completely decoded by itself.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.RenderTrack.GetNextBlockOffset">
            <summary>
            Get the block's offset in seconds.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.RenderTrack.Dispose">
            <summary>
            Free up the resources used by this object.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.Track">
            <summary>
            Metadata and continuous reading handler of a track.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.Track.ID">
            <summary>
            Identifier of the track.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.Track.Name">
            <summary>
            Name of the track.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.Track.Language">
            <summary>
            Language code of the track.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.Track.Format">
            <summary>
            Codec of the track.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.Track.Extra">
            <summary>
            Additional metadata depending on the content type.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.Track.Source">
            <summary>
            The container containing this track.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.Track.trackNumber">
            <summary>
            The position of the track in the container's list of tracks.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.Track.#ctor">
            <summary>
            Create a track to be placed in the list of a container's tracks after it's set up with
            <see cref="M:Cavern.Format.Common.Track.Override(Cavern.Format.Container.ContainerReader,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.Track.#ctor(Cavern.Format.Container.ContainerReader,System.Int32)">
            <summary>
            Create a track to be placed in the list of a container's tracks.
            </summary>
            <param name="source">The container containing this track.</param>
            <param name="trackNumber">The position of the track in the container's list of tracks.</param>
            <remarks>The <paramref name="trackNumber"/> required for reading from the container.</remarks>
        </member>
        <member name="M:Cavern.Format.Common.Track.IsNextBlockAvailable">
            <summary>
            The following block of the track is rendered and available.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.Track.ReadNextBlock">
            <summary>
            Continue reading the track.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.Track.IsNextBlockKeyframe">
            <summary>
            Returns if the next block can be completely decoded by itself.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.Track.GetNextBlockOffset">
            <summary>
            Get the block's offset in seconds.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.Track.Override(Cavern.Format.Container.ContainerReader,System.Int32)">
            <summary>
            Late-init the <see cref="P:Cavern.Format.Common.Track.Source"/> and <see cref="F:Cavern.Format.Common.Track.trackNumber"/>.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.TrackExtensions">
            <summary>
            Extension methods for <see cref="T:Cavern.Format.Common.Track"/>s.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.TrackExtensions.GetIndexByID(Cavern.Format.Common.Track[],System.Int64)">
            <summary>
            Find the first track with the given ID in the tracklist. If found, the index is returned, -1 otherwise.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.TrackExtra">
            <summary>
            Extra metadata of a track.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.TrackExtraAudio">
            <summary>
            Audio track metadata.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.TrackExtraAudio.SampleRate">
            <summary>
            Sampling frequency of the track in Hertz.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.TrackExtraAudio.ChannelCount">
            <summary>
            Number of discrete channels for channel-based (down)mixes.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.TrackExtraAudio.Bits">
            <summary>
            Audio sample size in bits.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.TrackExtraAudio.#ctor">
            <summary>
            An empty audio track metadata.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.TrackExtraAudio.#ctor(System.IO.Stream,Cavern.Format.Container.Matroska.MatroskaTree)">
            <summary>
            Parse audio metadata from a Matroska track's audio metadata node.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.TrackExtraVideo">
            <summary>
            Video track metadata.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.TrackExtraVideo.Width">
            <summary>
            Uncropped width of a video frame.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.TrackExtraVideo.Height">
            <summary>
            Uncropped height of a video frame.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.TrackExtraVideo.FrameRate">
            <summary>
            Frame update frequency.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.TrackExtraVideo.ColorRange">
            <summary>
             Used range of the available color values.
            </summary>
        </member>
        <member name="P:Cavern.Format.Common.TrackExtraVideo.PrivateData">
            <summary>
            An optional codec header.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.TrackExtraVideo.#ctor">
            <summary>
            An empty video track metadata.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.TrackExtraVideo.#ctor(System.IO.Stream,Cavern.Format.Container.Matroska.MatroskaTree)">
            <summary>
            Parse video metadata from a track's video metadata node.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.ColorRange">
            <summary>
            Used range of the available color values.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.ColorRange.Unspecified">
            <summary>
            Use the default color range of the format.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.ColorRange.BroadcastRange">
            <summary>
            8 bits, 16-235.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.ColorRange.FullRange">
            <summary>
            Fully using all bits without clipping.
            </summary>
        </member>
        <member name="F:Cavern.Format.Common.ColorRange.Other">
            <summary>
            Specified elsewhere.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.VarInt">
            <summary>
            Variable-size integer ("vint"). Vints work by having as many leading zeros as extra bytes are used.
            In 4 bytes, a maximum of 28 bits can be written, as the first 3 bits are 0, marking the 3 extra bytes,
            and another 1 has to close the sequence of 0s.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.VarInt.ReadTag(System.IO.Stream)">
            <summary>
            Reads the next VINT from a stream, does not cut the leading 1.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.VarInt.ReadValue(System.IO.Stream)">
            <summary>
            Reads the next VINT from a stream, cuts the leading 1, reads the correct value.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.VarInt.ReadSignedValue(System.IO.Stream)">
            <summary>
            Reads the next signed VINT from a stream, cuts the leading 1, reads the correct value.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.VarInt.ReadValue(System.IO.Stream,System.Int32)">
            <summary>
            Reads a fixed length VINT (the actual value field from a <see cref="T:Cavern.Format.Common.KeyLengthValue"/>).
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.VarInt.Prepare(System.IO.Stream,System.Byte)">
            <summary>
            Create a placeholder that will later be filled with a calculated value.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.VarInt.Fill(System.IO.Stream,System.Byte,System.Int64)">
            <summary>
            When the <paramref name="writer"/> is moved back to the position of a prepared tag, overwrite it with the correct value.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.VarInt.Write(System.IO.Stream,System.Int32)">
            <summary>
            Write an integer to exactly as many bytes as it requires.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.VarInt.WriteTag(System.IO.Stream,System.Int32)">
            <summary>
            Write a tag that already contains the leading 1, but in its last byte, since they are stored as little-endian internally.
            </summary>
            <remarks>These values can directly be written to the stream after the 0 bytes are cut.</remarks>
        </member>
        <member name="T:Cavern.Format.Common.CodecNotFoundException">
            <summary>
            Tells if no stream was present in the container with the selected codec.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.CodecNotFoundException.#ctor(Cavern.Format.Common.Codec)">
            <summary>
            Tells if no stream was present in the container with the selected codec.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.CorruptionException">
            <summary>
            Tells if the decoded stream is corrupted.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.CorruptionException.#ctor(System.String)">
            <summary>
            Tells if the decoded stream is corrupted.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.DecoderException">
            <summary>
            Tells if the decoder ran into a predefined error code that is found in the decoder's documentation.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.DecoderException.#ctor(System.Int32)">
            <summary>
            Tells if the decoder ran into a predefined error code that is found in the decoder's documentation.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.DuplicateChannelException">
            <summary>
            Tells if a single channel is present multiple times in a stream that doesn't support it.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.DuplicateChannelException.#ctor">
            <summary>
            Tells if a single channel is present multiple times in a stream that doesn't support it.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.InvalidChannelException">
            <summary>
            Tells if some channels are not supported by the export format.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.InvalidChannelException.#ctor(Cavern.Channels.ReferenceChannel[])">
            <summary>
            Tells if some channels are not supported by the export format.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.InvalidChannelOrderException">
            <summary>
            Tells if the channel order cannot be applied as it's invalid in an export format.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.InvalidChannelOrderException.#ctor">
            <summary>
            Tells if the channel order cannot be applied as it's invalid in an export format.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.MissingElementException">
            <summary>
            Tells that a required element is missing from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.MissingElementException.#ctor(System.String)">
            <summary>
            Tells that a required element is missing from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.MissingElementException.#ctor(System.String,System.Int64)">
            <summary>
            Tells that a required element is missing from the stream, and suggests a position for it.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.NoProgramException">
            <summary>
            Tells that no program was detected in the container/track.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.NoProgramException.#ctor">
            <summary>
            Tells that no program was detected in the container/track.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.RealtimeLengthException">
            <summary>
            Tells that a decoder which can process an infinite stream is not able to return content length.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.RealtimeLengthException.#ctor">
            <summary>
            Tells that a decoder which can process an infinite stream is not able to return content length.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.ReservedValueException">
            <summary>
            Tells if a decoded value is reserved. This could mark a transport error.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.ReservedValueException.#ctor(System.String)">
            <summary>
            Tells if a decoded value is reserved. This could mark a transport error.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.StreamingException">
            <summary>
            Tells is a feature is only available when reading from a raw file.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.StreamingException.#ctor">
            <summary>
            Tells is a feature is only available when reading from a raw file.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.SyncException">
            <summary>
            Tells if a sync word check has failed.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.SyncException.#ctor">
            <summary>
            Tells if a sync word check has failed.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.UnsupportedCodecException">
            <summary>
            Tells if a codec is unsupported.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.UnsupportedCodecException.#ctor(System.Boolean,Cavern.Format.Common.Codec)">
            <summary>
            Tells if a codec is unsupported.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.UnsupportedFeatureException">
            <summary>
            Tells if a required feature in the codec is unsupported.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.UnsupportedFeatureException.#ctor(System.String)">
            <summary>
            Tells if a required feature in the codec is unsupported.
            </summary>
        </member>
        <member name="T:Cavern.Format.Common.UnsupportedFormatException">
            <summary>
            Tells if no supported file format was detected.
            </summary>
        </member>
        <member name="M:Cavern.Format.Common.UnsupportedFormatException.#ctor">
            <summary>
            Tells if no supported file format was detected.
            </summary>
        </member>
        <member name="T:Cavern.Format.Consts.FormatConsts">
            <summary>
            Constants needed across the entire library.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.FormatConsts.blockSize">
            <summary>
            Only read 10 MB blocks at max to optimize I/O performance.
            </summary>
        </member>
        <member name="T:Cavern.Format.Consts.LimitlessAudioFormat">
            <summary>
            Used for both <see cref="T:Cavern.Format.LimitlessAudioFormatReader"/> and <see cref="T:Cavern.Format.LimitlessAudioFormatWriter"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.LimitlessAudioFormat.syncWord">
            <summary>
            First half of the LIMITLESS word as a single int for quick format detection.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.LimitlessAudioFormat.limitless">
            <summary>
            Limitless Audio Format indicator starting bytes.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.LimitlessAudioFormat.head">
            <summary>
            Header marker bytes.
            </summary>
        </member>
        <member name="T:Cavern.Format.Consts.MP4Consts">
            <summary>
            Constants used for the MP4 file format.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.fileTypeBox">
            <summary>
            FourCC marker of the file type box (ftyp).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.freeBox">
            <summary>
            FourCC marker of the boxes to skip (free).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.metadataBox">
            <summary>
            FourCC marker of the metadata box (moov).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.metadataHeaderBox">
            <summary>
            FourCC marker of the <see cref="F:Cavern.Format.Consts.MP4Consts.metadataBox"/>'s header box (mvhd).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.rawBox">
            <summary>
            FourCC marker of the box where raw bytes of the tracks can be found (mdat).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.trackBox">
            <summary>
            FourCC marker of the track metadata box (trak).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.trackHeaderBox">
            <summary>
            FourCC marker of the <see cref="F:Cavern.Format.Consts.MP4Consts.trackBox"/>'s header child box (tkhd).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.mediaBox">
            <summary>
            FourCC marker of the <see cref="F:Cavern.Format.Consts.MP4Consts.trackBox"/>'s media child box (mdia).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.mediaHeaderBox">
            <summary>
            FourCC marker of the <see cref="F:Cavern.Format.Consts.MP4Consts.mediaBox"/>'s media header box (mdhd).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.mediaInfoBox">
            <summary>
            FourCC marker of the <see cref="F:Cavern.Format.Consts.MP4Consts.mediaBox"/>'s media information box (minf).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.sampleTableBox">
            <summary>
            FourCC marker of the <see cref="F:Cavern.Format.Consts.MP4Consts.mediaInfoBox"/>'s sample table box (stbl).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.sampleDescriptionBox">
            <summary>
            FourCC marker of the <see cref="F:Cavern.Format.Consts.MP4Consts.sampleTableBox"/>'s sample description box (stsd).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.timeToSampleBox">
            <summary>
            FourCC marker of the <see cref="F:Cavern.Format.Consts.MP4Consts.sampleTableBox"/>'s sample durations for media samples (stts).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.sampleToChunkBox">
            <summary>
            FourCC marker of the <see cref="F:Cavern.Format.Consts.MP4Consts.sampleTableBox"/>'s chunk assignment (stsc).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.sampleSizeBox">
            <summary>
            FourCC marker of the <see cref="F:Cavern.Format.Consts.MP4Consts.sampleTableBox"/>'s sample size list (stsz).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.chunkOffset32">
            <summary>
            FourCC marker of the <see cref="F:Cavern.Format.Consts.MP4Consts.sampleTableBox"/>'s 32-bit chunk size list (stco).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.chunkOffset64">
            <summary>
            FourCC marker of the <see cref="F:Cavern.Format.Consts.MP4Consts.sampleTableBox"/>'s 64-bit chunk size list (co64).
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.MP4Consts.trackCodecs">
            <summary>
            The FourCC markers of <see cref="T:Cavern.Format.Common.Codec"/>s for <see cref="F:Cavern.Format.Consts.MP4Consts.sampleDescriptionBox"/>es.
            </summary>
        </member>
        <member name="T:Cavern.Format.Consts.RIFFWave">
            <summary>
            Used for both <see cref="T:Cavern.Format.RIFFWaveReader"/> and <see cref="T:Cavern.Format.RIFFWaveWriter"/>.
            </summary>
        </member>
        <member name="T:Cavern.Format.Consts.RIFFWave.WaveExtensibleChannel">
            <summary>
            Bit masks for channels present in a WAV file.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.RIFFWave.WaveExtensibleChannel.None">
            <summary>
            Marks a channel that can't be part of a channel mask.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.RIFFWave.WaveExtensibleChannel.Unknown">
            <summary>
            A channel that's not even valid as a <see cref="T:Cavern.Channels.ReferenceChannel"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Consts.RIFFWave.CreateChannelMask(Cavern.Channels.ReferenceChannel[])">
            <summary>
            Assigns an array of <see cref="T:Cavern.Channels.ReferenceChannel"/>s to a channel mask while checking for consistency.
            </summary>
            <remarks>Using an unknown channel results in skipping the channel mapping on export.</remarks>
        </member>
        <member name="M:Cavern.Format.Consts.RIFFWave.ParseChannelMask(System.Int32)">
            <summary>
            Gets which channels and in what order are part of a WAVE file by channel mask.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.RIFFWave.syncWord1">
            <summary>
            RIFF sync word, stream marker.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.RIFFWave.syncWord1_64">
            <summary>
            RF64 sync word, 64-bit stream marker.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.RIFFWave.syncWord2">
            <summary>
            WAVE sync word, specific header section marker.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.RIFFWave.formatSync">
            <summary>
            fmt sync word, standard header marker.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.RIFFWave.junkSync">
            <summary>
            JUNK sync word, ADM BWF header marker.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.RIFFWave.ds64Sync">
            <summary>
            ds64 sync word, contains 64-bit lengths.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.RIFFWave.axmlSync">
            <summary>
            axml sync word, ADM XML metadata marker.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.RIFFWave.chnaSync">
            <summary>
            chna sync word, channel assignment to the AXML.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.RIFFWave.dataSync">
            <summary>
            Data header marker.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.RIFFWave.dbmdSync">
            <summary>
            Dolby audio Metadata chunk marker.
            </summary>
        </member>
        <member name="F:Cavern.Format.Consts.RIFFWave.extensibleChannelMapping">
            <summary>
            Converts the <see cref="T:Cavern.Channels.ReferenceChannel"/> values to a <see cref="T:Cavern.Format.Consts.RIFFWave.WaveExtensibleChannel"/>.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.Matroska.Block">
            <summary>
            One or multiple frames of a Matroska file's single track.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.Matroska.Block.IsKeyframe">
            <summary>
            The frame itself doesn't reference any other frames and no frame after this can reference any frame before this.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.Matroska.Block.IsInvisible">
            <summary>
            The duration of this block is 0.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.Matroska.Block.LacingType">
            <summary>
            Used method of storing multiple frames in this block.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.Matroska.Block.IsDiscardable">
            <summary>
            This frame can be dropped on poor decoder performance.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.Matroska.Block.Track">
            <summary>
            Used <see cref="P:Cavern.Format.Container.Matroska.Block.Track"/> from a <see cref="T:Cavern.Format.Container.MatroskaReader"/>.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.Matroska.Block.TimeStamp">
            <summary>
            Timing relative to <see cref="P:Cavern.Format.Container.Matroska.Cluster.TimeStamp"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.Block.flags">
            <summary>
            Bit mask of property flags.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.Block.frameCount">
            <summary>
            Number of frames contained in this block.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.Block.frameSizes">
            <summary>
            Length of each frame's raw data.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.Block.firstFrame">
            <summary>
            Position of the first byte of the first frame in the file.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.Block.reader">
            <summary>
            Source stream of the block, which might be a <see cref="T:System.IO.MemoryStream"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.Block.#ctor(System.IO.Stream,Cavern.Format.Container.Matroska.MatroskaTree)">
            <summary>
            Parse the metadata of a data block.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.Block.Write(Cavern.Format.Container.Matroska.MatroskaTreeWriter,System.IO.Stream,System.Boolean,System.Int32,System.Int16,System.Byte[])">
            <summary>
            Write a block of data to a Matroska file that's under creation.
            </summary>
            <param name="tree">EBML writer object</param>
            <param name="writer">The stream used by the <paramref name="tree"/> writer for writing raw bytes</param>
            <param name="keyframe">This block can be decoded on its own</param>
            <param name="track">Unique identifier of the track</param>
            <param name="timeStamp">Timing relative to <see cref="P:Cavern.Format.Container.Matroska.Cluster.TimeStamp"/></param>
            <param name="data">Raw data of the block</param>
            <remarks>Only a single frame can be written using this function.</remarks>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.Block.GetData">
            <summary>
            Read all stream data from this block, without separating frames.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.Block.GetFrames">
            <summary>
            Get the raw stream bytes for each frame contained in this block.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.Block.ToString">
            <summary>
            Provides basic information about the block.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.Block.keyframeFlag">
            <summary>
            Flag mask for <see cref="P:Cavern.Format.Container.Matroska.Block.IsKeyframe"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.Block.invisibleFlag">
            <summary>
            Flag mask for <see cref="P:Cavern.Format.Container.Matroska.Block.IsInvisible"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.Block.lacingFlags">
            <summary>
            Flag mask for <see cref="P:Cavern.Format.Container.Matroska.Block.LacingType"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.Block.discardableFlag">
            <summary>
            Flag mask for <see cref="P:Cavern.Format.Container.Matroska.Block.IsDiscardable"/>.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.Matroska.Cluster">
            <summary>
            Stream data block in a Matroska file.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.Matroska.Cluster.TimeStamp">
            <summary>
            Absolute timestamp of the cluster, expressed in Segment Ticks which is based on TimestampScale.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.Cluster.source">
            <summary>
            Element to read the cluster from.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.Cluster.blocks">
            <summary>
            All blocks of the cluster, in order.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.Cluster.#ctor(System.IO.Stream,Cavern.Format.Container.Matroska.MatroskaTree)">
            <summary>
            Parse metadata from a cluster.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.Cluster.GetBlocks(System.IO.Stream)">
            <summary>
            All blocks of the cluster, in order.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.Matroska.Cue">
            <summary>
            Contains seeking info in a Matroska file.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.Matroska.Cue.Time">
            <summary>
            Scaled timestamp of the seek position.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.Matroska.Cue.Track">
            <summary>
            ID (not index) of the <see cref="P:Cavern.Format.Container.Matroska.Cue.Track"/> in <see cref="P:Cavern.Format.Container.ContainerReader.Tracks"/>.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.Matroska.Cue.Position">
            <summary>
            First byte of the cluster to read from.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.Cue.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Contains seeking info in a Matroska file.
            </summary>
            <param name="time">Scaled timestamp of the seek position</param>
            <param name="track">ID (not index) of the <see cref="P:Cavern.Format.Container.Matroska.Cue.Track"/> in <see cref="P:Cavern.Format.Container.ContainerReader.Tracks"/></param>
            <param name="position">First byte of the cluster to read from</param>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.Cue.GetCues(Cavern.Format.Container.Matroska.MatroskaSegment,System.IO.Stream)">
            <summary>
            Read the cues from the root cue node.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.Cue.Find(Cavern.Format.Container.Matroska.Cue[],System.Int64)">
            <summary>
            Get the cue that holds info for the timestamp to seek to.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.Cue.Write(Cavern.Format.Container.Matroska.MatroskaTreeWriter)">
            <summary>
            Export this <see cref="T:Cavern.Format.Container.Matroska.Cue"/> to a Matroska file that's currently creating the <see cref="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Cues"/> element.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.Cue.ToString">
            <summary>
            Provides basic information about the cue.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.Matroska.MatroskaSegment">
            <summary>
            A <see cref="T:Cavern.Format.Container.Matroska.MatroskaTree"/> element with a seek header.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaSegment.seeks">
            <summary>
            The relative position of each tag in this segment.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaSegment.#ctor(System.IO.Stream)">
            <summary>
            Reads the segment with its seek header.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaSegment.GetChildFromSeek(System.IO.Stream,System.Int32)">
            <summary>
            Tries to use the seek header to find the requested child. Searches through the segment if the child was not indexed.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.Matroska.MatroskaTrack">
            <summary>
            Track data for a <see cref="T:Cavern.Format.Container.MatroskaReader"/>, containing read positions.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTrack.lastCluster">
            <summary>
            Currently read cluster.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTrack.lastBlock">
            <summary>
            Last read block in the current cluster.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTrack.#ctor(Cavern.Format.Container.ContainerReader,System.Int32)">
            <summary>
            Create a track to be placed in the list of a container's tracks.
            </summary>
            <param name="source">The container containing this track.</param>
            <param name="trackNumber">The position of the track in the container's list of tracks.</param>
            <remarks>The <paramref name="trackNumber"/> required for reading from the container.</remarks>
        </member>
        <member name="T:Cavern.Format.Container.Matroska.MatroskaTrackExtraVideo">
            <summary>
            Video track metadata with fields that are only contained in Matroska files.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.Matroska.MatroskaTrackExtraVideo.BlockAdditionMapping">
            <summary>
            Elements that extend the track format, other than <see cref="P:Cavern.Format.Common.TrackExtraVideo.PrivateData"/>.
            This is not decoded, just transfered.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTrackExtraVideo.#ctor(System.IO.Stream,Cavern.Format.Container.Matroska.MatroskaTree)">
            <summary>
            Parse video metadata from a Matroska track's video metadata node.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.Matroska.MatroskaTree">
            <summary>
            Builds a tree of a Matroska file's neccessary tags.
            </summary>
            <see href="https://github.com/ietf-wg-cellar/matroska-specification/blob/master/ebml_matroska.xml"/>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.end">
            <summary>
            Last byte (exclusive) of the file that is a tag in this element.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.children">
            <summary>
            The contained subtree.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.nextTag">
            <summary>
            Location in the file where the next child should be read from.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.childIndices">
            <summary>
            Cache for <see cref="M:Cavern.Format.Container.Matroska.MatroskaTree.GetChild(System.IO.Stream,System.Int32,System.Int32)"/>, contains which the indices of
            already read <see cref="F:Cavern.Format.Container.Matroska.MatroskaTree.children"/> are for a given tag (key).
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTree.#ctor(System.IO.Stream)">
            <summary>
            Build the next KLV subtree.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTree.#ctor(System.IO.Stream,System.Int64,System.Boolean@)">
            <summary>
            Build the next KLV subtree while checking if it's in range of the file (<paramref name="valid"/>) or not.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTree.TryCreate(System.IO.Stream,System.Int64)">
            <summary>
            Parses a tree item if possible, returns null if not.
            </summary>
            <param name="reader">Matroska stream to read from</param>
            <param name="endPosition">Location of the final byte in the stream (exclusive).</param>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTree.GetChild(System.IO.Stream,System.Int32)">
            <summary>
            Fetch the first child of a tag if it exists.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTree.GetChild(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Get a specific child by its order of the same kind of children.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTree.GetChildren(System.IO.Stream,System.Int32)">
            <summary>
            Fetch all child instances of a tag.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTree.GetChildFloatBE(System.IO.Stream,System.Int32)">
            <summary>
            Get the first found child's big-endian floating point value by tag if it exists.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTree.GetChildUTF8(System.IO.Stream,System.Int32)">
            <summary>
            Get the first found child's UTF-8 value by tag if it exists.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTree.GetChildValue(System.IO.Stream,System.Int32)">
            <summary>
            Get the first found child's <see cref="T:Cavern.Format.Common.VarInt"/> value by tag if it exists.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTree.GetIndexByPosition(System.IO.Stream,System.Int32,System.Int64)">
            <summary>
            Get the index of a child for <see cref="M:Cavern.Format.Container.Matroska.MatroskaTree.GetChild(System.IO.Stream,System.Int32,System.Int32)"/> by its position in the file stream.
            </summary>
            <remarks>This <paramref name="position"/> is not the same as <see cref="F:Cavern.Format.Common.KeyLengthValue.position"/>, that
            has to be matched first by reading the metadata for the element.</remarks>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTree.GetRawData(System.IO.Stream)">
            <summary>
            Read the remainder of the value of this element to a byte array.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTree.ToString">
            <summary>
            Display the tag in HEX when converting to string.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_TrackType">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_CodecID">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_FlagLacing">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_Audio_Channels">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Cluster_BlockGroup">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Cluster_BlockGroup_Block">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Cluster_SimpleBlock">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_Video_PixelWidth">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Cues_CuePoint_CueTime">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_Audio_SamplingFrequency">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Cues_CuePoint_CueTrackPositions">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_Video_PixelHeight">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Cues_CuePoint">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_TrackNumber">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_Video">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_Audio">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Cluster_Timestamp">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Cues_CuePoint_CueTrackPositions_CueClusterPosition">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Cues_CuePoint_CueTrackPositions_CueTrack">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_BlockAdditionMapping">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Info_Duration">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Info_MuxingApp">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_SeekHead_Seek">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_Name">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_SeekHead_Seek_SeekID">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_SeekHead_Seek_SeekPosition">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_Video_Colour">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_Video_Colour_Range">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Info_WritingApp">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_Audio_BitDepth">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Info_ChapterTranslate">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_CodecPrivate">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_TrackUID">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_Language">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks_TrackEntry_DefaultDuration">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Info_TimestampScale">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_SeekHead">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Info">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Tracks">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.EBML">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.EBML_Void">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.EBML_LE">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.EBML_Version">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.EBML_ReadVersion">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.EBML_MaxIDLength">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.EBML_MaxSizeLength">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.EBML_DocType">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.EBML_DocTypeVersion">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.EBML_DocTypeReadVersion">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Cues">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Cluster">
            <summary>
            EBML tag IDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTree.codecNames">
            <summary>
            Matroska codec ID mapping to the <see cref="T:Cavern.Format.Common.Codec"/> enum.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.Matroska.MatroskaTreeWriter">
            <summary>
            Creates a Matroska tree, handles layers, and writes values.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTreeWriter.writer">
            <summary>
            Output random access stream to write to. The length of each element is written after they're closed.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTreeWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a Matroska tree, handles layers, and writes values.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.Matroska.MatroskaTreeWriter.sequenceStarts">
            <summary>
            Positions where sequence data starts, and their corresponding sequence length field sizes.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTreeWriter.OpenSequence(System.Int32,System.Byte)">
            <summary>
            Open a new sequence in the current sequence.
            </summary>
            <param name="tag">KLV identifier of the sequence</param>
            <param name="sizeBytes">Number of bytes that can hold the maximum possible size of the sequence</param>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTreeWriter.Write(System.Int32,System.Byte)">
            <summary>
            Write a tag that contains a single byte value.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTreeWriter.Write(System.Int32,System.Byte[])">
            <summary>
            Write a tag that contains raw bytes.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTreeWriter.Write(System.Int32,System.Int16)">
            <summary>
            Write a tag that contains a single short value.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTreeWriter.Write(System.Int32,System.UInt32)">
            <summary>
            Write a tag that contains a single unsigned int value.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTreeWriter.Write(System.Int32,System.UInt64)">
            <summary>
            Write a tag that contains a single unsigned long value.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTreeWriter.Write(System.Int32,System.Single)">
            <summary>
            Write a tag that contains a single floating point value.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTreeWriter.Write(System.Int32,System.String)">
            <summary>
            Write a tag that contains a single string value.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.Matroska.MatroskaTreeWriter.CloseSequence">
            <summary>
            Close the last opened sequence.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.MP4.Box">
            <summary>
            Architectural data block of the ISO-BMFF format, including the MP4 container.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.MP4.Box.Length">
            <summary>
            Bytes of data contained in this box.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.MP4.Box.Header">
            <summary>
            4 character descriptor of the box's contents.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MP4.Box.position">
            <summary>
            Data starts from this offset in the input stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.Box.#ctor(System.UInt32,System.UInt32,System.IO.Stream)">
            <summary>
            Stores the metadata of an ISO-BMFF box that can be read from the current position of the <paramref name="reader"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.Box.#ctor(System.UInt32,System.UInt32,System.Int64)">
            <summary>
            Stores the metadata of an ISO-BMFF box.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.Box.Parse(System.IO.Stream)">
            <summary>
            Return a box in an object for its type.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.Box.GetRawData(System.IO.Stream)">
            <summary>
            Get the bytes contained in the box.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.Box.ToString">
            <summary>
            Box metadata to string.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.MP4.ChunkOffsetBox">
            <summary>
            Box of offsets for all chunks.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MP4.ChunkOffsetBox.offsets">
            <summary>
            Start offset in the file for each chunk.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.ChunkOffsetBox.#ctor(System.UInt32,System.UInt32,System.IO.Stream)">
            <summary>
            Box of offsets for all chunks.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.MP4.FileTypeBox">
            <summary>
            General file information box.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.MP4.FileTypeBox.MajorBrand">
            <summary>
            FourCC ID of the container.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.MP4.FileTypeBox.MinorVersion">
            <summary>
            Minimum required decoder/specification version.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.MP4.FileTypeBox.CompatibleBrands">
            <summary>
            FourCC IDs of the contained contents' formats.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.FileTypeBox.#ctor(System.UInt32,System.IO.Stream)">
            <summary>
            Parse a file type box.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.FileTypeBox.ToString">
            <summary>
            Human-readable display of the general file type info.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.MP4.LanguageCode">
            <summary>
            The supported languages of an MP4 container.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.MP4.MP4Track">
            <summary>
            An MP4 file's <see cref="T:Cavern.Format.Common.Track"/> with stream positioning information.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MP4.MP4Track.map">
            <summary>
            Contains which sample of the input starts from which file offset and how many bytes should be read.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MP4.MP4Track.nextSample">
            <summary>
            The next entry to decode from the <see cref="F:Cavern.Format.Container.MP4.MP4Track.map"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MP4.MP4Track.timeScale">
            <summary>
            How many units make up a second.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MP4.MP4Track.seekerBox">
            <summary>
            Box used for getting seek positions.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.MP4Track.#ctor(Cavern.Format.Container.MP4.NestedBox,System.UInt32)">
            <summary>
            An MP4 file's <see cref="T:Cavern.Format.Common.Track"/> with stream positioning information. The format and its extra information is parsed here.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.MP4Track.GetSample(System.Double)">
            <summary>
            Get which is the current sample at a given time in seconds, and its corrected position.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.MP4.NestedBox">
            <summary>
            A box that contains other boxes.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.MP4.NestedBox.Contents">
            <summary>
            All child boxes contained in this box.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.MP4.NestedBox.Item(System.UInt32)">
            <summary>
            Get the first child of the selected header.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.NestedBox.#ctor(System.UInt32,System.UInt32,System.IO.Stream)">
            <summary>
            Parse the nested boxes.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.NestedBox.ToString">
            <summary>
            List the nested boxes in a string.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.MP4.RawBox">
            <summary>
            Raw data of the tracks in an MP4 container.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.RawBox.#ctor(System.UInt32,System.IO.Stream)">
            <summary>
            Raw data of the tracks in an MP4 container.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.MP4.SampleDescriptionBox">
            <summary>
            Metadata box containing codec information.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MP4.SampleDescriptionBox.formats">
            <summary>
            Used codecs for referenced raw data with their extra values. References are contained in reference boxes.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.SampleDescriptionBox.#ctor(System.UInt32,System.IO.Stream)">
            <summary>
            Metadata box containing codec information.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.SampleDescriptionBox.ParseCodec(System.UInt32)">
            <summary>
            Parse the format-specific values into the <see cref="T:Cavern.Format.Common.Codec"/> enumeration.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.MP4.SampleSizeBox">
            <summary>
            Box of sizes for all samples.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MP4.SampleSizeBox.size">
            <summary>
            Each sample has this size. If this value is 0, use the <see cref="F:Cavern.Format.Container.MP4.SampleSizeBox.sizes"/> array, because all samples have a different size.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MP4.SampleSizeBox.sizes">
            <summary>
            Size of each sample if there's no common <see cref="F:Cavern.Format.Container.MP4.SampleSizeBox.size"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.SampleSizeBox.#ctor(System.UInt32,System.IO.Stream)">
            <summary>
            Box of sizes for all samples.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.MP4.SampleToChunkBox">
            <summary>
            Contains which samples are located in which chunk.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MP4.SampleToChunkBox.locations">
            <summary>
            From which chunk, how many samples are contained in a chunk, and in which format of the <see cref="T:Cavern.Format.Container.MP4.SampleDescriptionBox"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.SampleToChunkBox.#ctor(System.UInt32,System.IO.Stream)">
            <summary>
            Contains which samples are located in which chunk.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.SampleToChunkBox.GetSampleCount(System.Int64)">
            <summary>
            When each sample is the same size and there's no sample count in the <see cref="T:Cavern.Format.Container.MP4.SampleSizeBox"/>, the number of samples
            have to be calculated from this box.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.MP4.TimeToSampleBox">
            <summary>
            Contains how many consecutive samples have a given duration. This is used for seeking.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MP4.TimeToSampleBox.durations">
            <summary>
            Contains how many consecutive samples have a given duration. This is used for seeking.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.MP4.TrackBox">
            <summary>
            Track metadata block of an MP4 container.
            </summary>
            <see href="https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html"/>
        </member>
        <member name="P:Cavern.Format.Container.MP4.TrackBox.Track">
            <summary>
            Partially parsed track metadata. Has to be filled by the root parser.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4.TrackBox.#ctor(System.UInt32,System.IO.Stream)">
            <summary>
            Track metadata block of an MP4 container.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.ContainerReader">
            <summary>
            Multimedia container reader base class.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.ContainerReader.Duration">
            <summary>
            Content length in seconds.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.ContainerReader.Tracks">
            <summary>
            Metadata of media streams in this file.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.ContainerReader.Type">
            <summary>
            Returns the format of the loaded container.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.ContainerReader.reader">
            <summary>
            File reader object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.ContainerReader.#ctor(System.IO.Stream)">
            <summary>
            Abstract audio file reader.
            </summary>
            <param name="reader">File reader object</param>
        </member>
        <member name="M:Cavern.Format.Container.ContainerReader.#ctor(System.String)">
            <summary>
            Abstract audio file reader.
            </summary>
            <param name="path">Input file name</param>
        </member>
        <member name="M:Cavern.Format.Container.ContainerReader.IsNextBlockAvailable(System.Int32)">
            <summary>
            The following block of the track is rendered and available.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.ContainerReader.ReadNextBlock(System.Int32)">
            <summary>
            Continue reading a given track.
            </summary>
            <param name="track">Not the unique <see cref="P:Cavern.Format.Common.Track.ID"/>, but its position in the <see cref="P:Cavern.Format.Container.ContainerReader.Tracks"/> array.</param>
        </member>
        <member name="M:Cavern.Format.Container.ContainerReader.IsNextBlockKeyframe(System.Int32)">
            <summary>
            Returns if the next block of a track can be completely decoded by itself.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.ContainerReader.GetNextBlockOffset(System.Int32)">
            <summary>
            Get what is the time offset of the next block in seconds.
            </summary>
            <returns>Time offset in seconds, or -1 if the last block was passed.</returns>
        </member>
        <member name="M:Cavern.Format.Container.ContainerReader.Seek(System.Double)">
            <summary>
            Start the following reads from the selected timestamp.
            </summary>
            <returns>Position that was actually possible to seek to or -1 if the position didn't change.</returns>
        </member>
        <member name="M:Cavern.Format.Container.ContainerReader.GetMainAudioTrack">
            <summary>
            Get the first of the highest available quality audio tracks from the container.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.ContainerReader.Dispose">
            <summary>
            Close the reader.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.MatroskaReader">
            <summary>
            Reads EBML, a kind of binary XML format that is used by Matroska.
            </summary>
            <see href="https://www.matroska.org/files/matroska_file_format_alexander_noe.pdf"/>
        </member>
        <member name="P:Cavern.Format.Container.MatroskaReader.Type">
            <summary>
            Returns the format of the loaded container.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaReader.cachedClusters">
            <summary>
            Clusters are large and should be cached, but only to a certain limit to prevent leaking.
            The limit is the size of this array. Use <see cref="M:Cavern.Format.Container.MatroskaReader.GetCluster(System.Int32)"/> to read a cluster,
            it checks the cache before trying to read it.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaReader.segments">
            <summary>
            All segments of the file.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaReader.cues">
            <summary>
            Seek-aiding metadata.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaReader.timestampScale">
            <summary>
            Multiplier for all timestamps in clusters.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaReader.#ctor(System.IO.Stream)">
            <summary>
            Minimal EBML reader.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaReader.#ctor(System.String)">
            <summary>
            Minimal EBML reader.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaReader.IsNextBlockAvailable(System.Int32)">
            <summary>
            The following block of the track is rendered and available.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaReader.ReadNextBlock(System.Int32)">
            <summary>
            Continue reading a given track.
            </summary>
            <param name="track">Not the unique <see cref="P:Cavern.Format.Common.Track.ID"/>, but its position in the
            <see cref="P:Cavern.Format.Container.ContainerReader.Tracks"/> array.</param>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaReader.IsNextBlockKeyframe(System.Int32)">
            <summary>
            Returns if the next block of a track can be completely decoded by itself.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaReader.GetNextBlockOffset(System.Int32)">
            <summary>
            Get what is the time offset of the next block in seconds.
            </summary>
            <returns>Time offset in seconds, or -1 if the last block was passed.</returns>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaReader.Seek(System.Double)">
            <summary>
            Start the following reads from the selected timestamp.
            Seeks all tracks to the block before the position given in seconds.
            </summary>
            <returns>Position that was actually possible to seek to or -1 if the position didn't change.</returns>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaReader.GetBlock(System.Int32)">
            <summary>
            Get the block in line for a <see cref="T:Cavern.Format.Common.Track"/>. Does not increment the block counter, just gets the <see cref="T:Cavern.Format.Container.Matroska.Block"/>.
            To read the next block, increment <see cref="F:Cavern.Format.Container.Matroska.MatroskaTrack.lastBlock"/>, then call this function.
            </summary>
            <param name="track"></param>
            <returns></returns>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaReader.GetCluster(System.Int32)">
            <summary>
            Read a <see cref="T:Cavern.Format.Container.Matroska.Cluster"/> from the cache, or if it's not cached, from the file.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaReader.ReadSkeleton">
            <summary>
            Read the metadata and basic block structure of the file.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaReader.ReadTracks(Cavern.Format.Container.Matroska.MatroskaTree)">
            <summary>
            Read track information metadata.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaReader.nsToS">
            <summary>
            Nanoseconds to seconds.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaReader.sToNs">
            <summary>
            Seconds to nanoseconds.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaReader.defaultLanguage">
            <summary>
            A Matroska track's default language.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.MP4Reader">
            <summary>
            Reads ISO-BMFF, the MP4 container's data structure.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.MP4Reader.Type">
            <summary>
            Returns the format of the loaded container.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4Reader.#ctor(System.IO.Stream)">
            <summary>
            Minimal ISO-BMFF reader.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4Reader.#ctor(System.String)">
            <summary>
            Minimal ISO-BMFF reader.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4Reader.IsNextBlockAvailable(System.Int32)">
            <summary>
            The following block of the track is rendered and available.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MP4Reader.ReadNextBlock(System.Int32)">
            <summary>
            Continue reading a given track.
            </summary>
            <param name="track">Not the unique <see cref="P:Cavern.Format.Common.Track.ID"/>, but its position in the Tracks array.</param>
        </member>
        <member name="M:Cavern.Format.Container.MP4Reader.Seek(System.Double)">
            <summary>
            Start the following reads from the selected timestamp.
            </summary>
            <returns>Position that was actually possible to seek to or -1 if the position didn't change.</returns>
        </member>
        <member name="M:Cavern.Format.Container.MP4Reader.ReadSkeleton">
            <summary>
            Read the metadata and basic block structure of the file.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.AudioWriterIntoContainer">
            <summary>
            Writes the audio data as a new <see cref="F:Cavern.Format.Container.AudioWriterIntoContainer.track"/> into a <see cref="F:Cavern.Format.Container.AudioWriterIntoContainer.container"/>, amongst other tracks.
            </summary>
        </member>
        <member name="P:Cavern.Format.Container.AudioWriterIntoContainer.NewTrackName">
            <summary>
            The name of the new <see cref="F:Cavern.Format.Container.AudioWriterIntoContainer.track"/> in the output <see cref="F:Cavern.Format.Container.AudioWriterIntoContainer.container"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.AudioWriterIntoContainer.container">
            <summary>
            Handles the container itself.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.AudioWriterIntoContainer.track">
            <summary>
            The new track to encode.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.AudioWriterIntoContainer.#ctor(System.String,Cavern.Format.Common.Track[],Cavern.Format.Common.Codec,System.Int32,System.Int32,System.Int64,System.Int32,Cavern.Format.BitDepth)">
            <summary>
            Writes the audio data as a new <see cref="F:Cavern.Format.Container.AudioWriterIntoContainer.track"/> into a <see cref="F:Cavern.Format.Container.AudioWriterIntoContainer.container"/>, amongst other tracks.
            </summary>
            <param name="path">Output file name</param>
            <param name="tracks">Tracks to bring from other containers, can be empty</param>
            <param name="newTrack">The codec of the new audio track</param>
            <param name="blockSize">Total number of samples for all channels that will be encoded in each frame</param>
            <param name="channelCount">Number of output channels</param>
            <param name="length">Content length in samples for a single channel</param>
            <param name="sampleRate">Sample rate of the new audio track</param>
            <param name="bits">Bit rate of the new audio track if applicable</param>
            <exception cref="T:Cavern.Format.Common.UnsupportedFormatException">The container format is either unknown by file extension or
            there was no file extension</exception>
        </member>
        <member name="M:Cavern.Format.Container.AudioWriterIntoContainer.WriteHeader">
            <summary>
            Create the file header.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.AudioWriterIntoContainer.WriteBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Write a block of mono or interlaced samples.
            </summary>
            <param name="samples">Samples to write</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
        </member>
        <member name="M:Cavern.Format.Container.AudioWriterIntoContainer.Dispose">
            <summary>
            Dispose the stream writer through the <see cref="F:Cavern.Format.Container.AudioWriterIntoContainer.container"/> as it might want to write a footer.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.ContainerWriter">
            <summary>
            Multimedia container writer base class.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.ContainerWriter.writer">
            <summary>
            File writer object.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.ContainerWriter.tracks">
            <summary>
            The source tracks to pack in the container.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.ContainerWriter.duration">
            <summary>
            Length of the played content.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.ContainerWriter.#ctor(System.IO.Stream,Cavern.Format.Common.Track[],System.Double)">
            <summary>
            Multimedia container writer base class.
            </summary>
            <param name="writer">Output stream to write to</param>
            <param name="tracks">The source tracks to pack in the container</param>
            <param name="duration">Length of the played content</param>
        </member>
        <member name="M:Cavern.Format.Container.ContainerWriter.#ctor(System.String,Cavern.Format.Common.Track[],System.Double)">
            <summary>
            Multimedia container writer base class.
            </summary>
            <param name="path">Output file name</param>
            <param name="tracks">The source tracks to pack in the container</param>
            <param name="duration">Length of the played content</param>
        </member>
        <member name="M:Cavern.Format.Container.ContainerWriter.WriteHeader">
            <summary>
            Write the metadata that is present before the coded content.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.ContainerWriter.WriteBlock(System.Double)">
            <summary>
            Write the frames that are part of the next block with of a given <see cref="F:Cavern.Format.Container.ContainerWriter.duration"/>.
            </summary>
            <returns>The writing has finished.</returns>
        </member>
        <member name="M:Cavern.Format.Container.ContainerWriter.Dispose">
            <summary>
            Close the writer.
            </summary>
        </member>
        <member name="T:Cavern.Format.Container.MatroskaWriter">
            <summary>
            Writes source <see cref="T:Cavern.Format.Common.Track"/>s to a Matroska file.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaWriter.tree">
            <summary>
            Writes the structure of the EBML file.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaWriter.inCluster">
            <summary>
            Writing a <see cref="T:Cavern.Format.Container.Matroska.Cluster"/> is in progress and it's not closed.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaWriter.position">
            <summary>
            Seconds of content already written to the file.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaWriter.lastClusterStarted">
            <summary>
            The <see cref="F:Cavern.Format.Container.MatroskaWriter.position"/> where the last cluster was opened. Used for relative <see cref="T:Cavern.Format.Container.Matroska.Block"/> timestamps.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaWriter.mainTrack">
            <summary>
            The index of the track that contains the main video. Used to create the <see cref="F:Cavern.Format.Container.MatroskaWriter.cues"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaWriter.segmentOffset">
            <summary>
            The start position of the main segment in the output stream. Cues are written relative to this.
            This is also the position where the <see cref="F:Cavern.Format.Container.MatroskaWriter.seekHead"/> will be written.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaWriter.clusterOffset">
            <summary>
            The start position of the currently written cluster in the output stream, used for positioning <see cref="F:Cavern.Format.Container.MatroskaWriter.cues"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaWriter.cues">
            <summary>
            List of all keyframes that will be written to the <see cref="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment_Cues"/> element.
            This only includes video frames (main track), as audio can be found in the same cluster, always being keyframes.
            One cue will be created for each cluster, the first keyframe in them.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaWriter.seekHead">
            <summary>
            Positions of major elements inside the main <see cref="F:Cavern.Format.Container.Matroska.MatroskaTree.Segment"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaWriter.#ctor(System.IO.Stream,Cavern.Format.Common.Track[],System.Double)">
            <summary>
            Writes source <paramref name="tracks"/> to a Matroska file.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaWriter.#ctor(System.String,Cavern.Format.Common.Track[],System.Double)">
            <summary>
            Writes source <paramref name="tracks"/> to a Matroska file.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaWriter.WriteHeader">
            <summary>
            Write the metadata that is present before the coded content.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaWriter.WriteBlock(System.Double)">
            <summary>
            Write the frames that are part of the next block with of a given <see cref="!:duration"/>.
            </summary>
            <returns>The writing has finished.</returns>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaWriter.Dispose">
            <summary>
            Close the last block and write the <see cref="F:Cavern.Format.Container.MatroskaWriter.cues"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaWriter.SetMainTrack">
            <summary>
            Find the main video track and allocate it for generating <see cref="F:Cavern.Format.Container.MatroskaWriter.cues"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaWriter.CreateEBMLHeader">
            <summary>
            Write the format header.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaWriter.CreateSegmentSeekHead">
            <summary>
            Overwrite the <see cref="F:Cavern.Format.Container.Matroska.MatroskaTree.EBML_Void"/> written as a placeholder for the seek header.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaWriter.CreateSegmentInfo">
            <summary>
            Write the informational part of the segment.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaWriter.CreateSegmentTracks">
            <summary>
            Write the tracks of the segment.
            </summary>
        </member>
        <member name="M:Cavern.Format.Container.MatroskaWriter.CreateSegmentCues">
            <summary>
            Write the seeking offsets of the segment.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaWriter.creatorVersion">
            <summary>
            All mandatory values up to this version of Matroska will be included.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaWriter.requiredVersion">
            <summary>
            Matroska v2 (for its SimpleBlock support) is required for playback.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaWriter.timestampScale">
            <summary>
            Matroska ticks per second.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaWriter.maxSeekHeadSize">
            <summary>
            Number of bytes to reserve for the seek header.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaWriter.voidOverhead">
            <summary>
            Bytes of <see cref="F:Cavern.Format.Container.MatroskaWriter.maxSeekHeadSize"/> that are used by the key and length of the <see cref="F:Cavern.Format.Container.Matroska.MatroskaTree.EBML_Void"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Container.MatroskaWriter.maxTimeInCluster">
            <summary>
            The maximum seconds of content to write in a single cluster.
            </summary>
        </member>
        <member name="T:Cavern.Format.Decoders.Decoder">
            <summary>
            Converts a bitstream to raw samples.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.Decoder.ChannelCount">
            <summary>
            Content channel count.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.Decoder.Position">
            <summary>
            Location in the stream in samples. Formats that don't support this feature return -1.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.Decoder.Length">
            <summary>
            Content length in samples for a single channel. For real-time streams, this value is -1.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.Decoder.SampleRate">
            <summary>
            Bitstream sample rate.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.Decoder.reader">
            <summary>
            Stream reader and block regrouping object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.Decoder.#ctor(Cavern.Format.Utilities.BlockBuffer{System.Byte})">
            <summary>
            Converts a bitstream to raw samples.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.Decoder.#ctor">
            <summary>
            Gives the possibility of setting <see cref="F:Cavern.Format.Decoders.Decoder.reader"/> after a derived constructor has read a header.
            </summary>
            <remarks>Not setting <see cref="F:Cavern.Format.Decoders.Decoder.reader"/> in all constructors can break a decoder.</remarks>
        </member>
        <member name="M:Cavern.Format.Decoders.Decoder.DecodeBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Read and decode a given number of samples.
            </summary>
            <param name="target">Array to decode data into</param>
            <param name="from">Start position in the target array (inclusive)</param>
            <param name="to">End position in the target array (exclusive)</param>
            <remarks>The next to - from samples will be read from the file.
            All samples are counted, not just a single channel.</remarks>
        </member>
        <member name="M:Cavern.Format.Decoders.Decoder.Seek(System.Int64)">
            <summary>
            Start the following reads from the selected sample.
            </summary>
            <param name="sample">The selected sample, for a single channel</param>
        </member>
        <member name="M:Cavern.Format.Decoders.Decoder.DecodeLittleEndianBlock(Cavern.Format.Utilities.BlockBuffer{System.Byte},System.Single[],System.Int64,System.Int64,Cavern.Format.BitDepth)">
            <summary>
            Decode a block of RIFF WAVE data.
            </summary>
        </member>
        <member name="T:Cavern.Format.Decoders.DummyDecoder">
            <summary>
            Decoder for a format that can't be decoded.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.DummyDecoder.format">
            <summary>
            Unsupported codec type.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.DummyDecoder.#ctor(Cavern.Format.Common.Codec,System.Int32,System.Int64,System.Int32)">
            <summary>
            Decoder for a format that can't be decoded.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.DummyDecoder.DecodeBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Mark the unsupported codec on decoding.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.DummyDecoder.Seek(System.Int64)">
            <summary>
            Start the following reads from the selected sample.
            </summary>
            <param name="sample">The selected sample, for a single channel</param>
        </member>
        <member name="T:Cavern.Format.Decoders.EnhancedAC3Decoder">
            <summary>
            Converts an Enhanced AC-3 bitstream to raw samples.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.EnhancedAC3Decoder.Enhanced">
            <summary>
            The stream is coded in the Enhanced version of AC-3.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.EnhancedAC3Decoder.Finished">
            <summary>
            True if the stream has reached its end.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.EnhancedAC3Decoder.FrameSize">
            <summary>
            Samples in each decoded frame.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3Decoder.header">
            <summary>
            Header data container and reader.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3Decoder.bodies">
            <summary>
            Independently decoded substreams.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3Decoder.outputs">
            <summary>
            Rendered samples for each channel.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3Decoder.frameSize">
            <summary>
            Bytes per audio frame.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.EnhancedAC3Decoder.Extensions">
            <summary>
            Auxillary metadata parsed for the last decoded frame.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3Decoder.outCache">
            <summary>
            Reusable output sample array.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3Decoder.#ctor(Cavern.Format.Utilities.BlockBuffer{System.Byte})">
            <summary>
            Converts an Enhanced AC-3 bitstream to raw samples.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3Decoder.#ctor(Cavern.Format.Utilities.BlockBuffer{System.Byte},System.Int64)">
            <summary>
            Converts an Enhanced AC-3 bitstream to raw samples. When the file size is known, the length can be calculated
            from the bitrate assuming AC-3 is constant bitrate.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3Decoder.GetChannels">
            <summary>
            Get the bed channels.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3Decoder.DecodeFrame">
            <summary>
            Decode a new frame if the cached samples are already fetched.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3Decoder.ReadHeader">
            <summary>
            Reads all metadata for the next frame and prepares audio decoding.
            </summary>
            <remarks>This decoder has to read the beginning of the next frame to know if it's a beginning.</remarks>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3Decoder.Seek(System.Int64)">
            <summary>
            Start the following reads from the selected sample.
            </summary>
            <param name="sample">The selected sample, for a single channel</param>
            <remarks>Assuming a constant bitrate, swapping to a frame is possible. Inter-frame seeking is not possible in this
            implementation, this function shouldn't be used for alignment. For tracks, use the container's seek.</remarks>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3Decoder.GetMetadata">
            <summary>
            Gets the metadata for this codec in a human-readable format.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3Decoder.samplesPerBlock">
            <summary>
            Each (E-)AC-3 block is 256 samples.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3Decoder.trackSeekError">
            <summary>
            Exception message when trying to seek a track.
            </summary>
        </member>
        <member name="T:Cavern.Format.Decoders.EnhancedAC3.ExtensibleMetadataDecoder">
            <summary>
            Decodes Extensible Metadata Delivery Format (EMDF) from the reserved fields of an E-AC-3 bitstream.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.EnhancedAC3.ExtensibleMetadataDecoder.HasObjects">
            <summary>
            The last EBML frame contained object data.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.EnhancedAC3.ExtensibleMetadataDecoder.JOC">
            <summary>
            The Joint Object Coding data in this frame.
            </summary>
            <remarks>There can be only one JOC payload in every E-AC-3 frame.</remarks>
        </member>
        <member name="P:Cavern.Format.Decoders.EnhancedAC3.ExtensibleMetadataDecoder.OAMD">
            <summary>
            The Object Audio Metadata in this frame.
            </summary>
            <remarks>There can be only one OAMD payload in every E-AC-3 frame.</remarks>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.ExtensibleMetadataDecoder.Decode(Cavern.Format.Utilities.BitExtractor)">
            <summary>
            Decode the next EMDF frame from a bitstream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.ExtensibleMetadataDecoder.DecodeBlock(Cavern.Format.Utilities.BitExtractor)">
            <summary>
            Tries to decode an EMDF block, returns if succeeded.
            </summary>
            <remarks>Assumes the sync word was already read.</remarks>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ExtensibleMetadataDecoder.syncWord">
            <summary>
            EMDF marker.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ExtensibleMetadataDecoder.oamdPayloadID">
            <summary>
            Payload ID for Object Audio Metadata.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ExtensibleMetadataDecoder.jocPayloadID">
            <summary>
            Payload ID for Joint Object Coding.
            </summary>
        </member>
        <member name="T:Cavern.Format.Decoders.EnhancedAC3.ExtensibleMetadataExtensions">
            <summary>
            Extension methods used for EMDF decoding.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.ExtensibleMetadataExtensions.VariableBits(Cavern.Format.Utilities.BitExtractor,System.Byte)">
            <summary>
            Read variable-length values from an EMDF stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.ExtensibleMetadataExtensions.VariableBits(Cavern.Format.Utilities.BitExtractor,System.Byte,System.Int32)">
            <summary>
            Read variable-length values from an EMDF stream with a limit on length.
            The <paramref name="limit"/> parameter takes 1 less than the actual length because reasons.
            </summary>
        </member>
        <member name="T:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding">
            <summary>
            Joint object coding decoder and renderer.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.ObjectActive">
            <summary>
            The object is active and will have rendered audio data.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.ChannelCount">
            <summary>
            Number of full bandwidth input channels.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.ObjectCount">
            <summary>
            Number of rendered dynamic objects.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.Gain">
            <summary>
            Multiplier for the output signal's amplitude.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.taskWaiter">
            <summary>
            Used for waiting while started tasks work.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.Decode(Cavern.Format.Utilities.BitExtractor)">
            <summary>
            Decodes a JOC frame from an EMDF payload.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.Dispose">
            <summary>
            Free up resources used by this object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.DecodeInfo(Cavern.Format.Utilities.BitExtractor)">
            <summary>
            Read JOC metadata.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.DecodeData(Cavern.Format.Utilities.BitExtractor)">
            <summary>
            Read JOC channels/vectors/matrices.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.HuffmanDecode(System.Int32[][],Cavern.Format.Utilities.BitExtractor)">
            <summary>
            Read a Huffman-coded value from the bitstream.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.prevMatrix">
            <summary>
            Previous JOC mixing matrix values.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.steepSlope">
            <summary>
            If true, the temporal extension transition will not be linearly interpolated, only stepped.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.bandsIndex">
            <summary>
            Indexing value for given <see cref="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.bands"/> values in cache tables.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.bands">
            <summary>
            Number of processed bands of each object.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.quantizationTable">
            <summary>
            Index of the used quantization table for each object.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.dataPoints">
            <summary>
            Number of data points for each object.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.sparseCoded">
            <summary>
            The given object is using sparse coding (<see cref="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.jocChannel"/> and <see cref="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.jocVector"/>) instead
            of a fully encoded matrix (<see cref="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.jocMatrix"/>).
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.jocChannel">
            <summary>
            Source channel indexes in sparse mode (one object is only sourced from one channel).
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.jocVector">
            <summary>
            Quantized data for each source marked by <see cref="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.jocChannel"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.jocMatrix">
            <summary>
            Quantized and differentially coded JOC mixing matrix.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.mixMatrix">
            <summary>
            Decoded JOC matrix.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.interpolatedMatrix">
            <summary>
            Decoded JOC matrix with fading.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.timeslotOffsets">
            <summary>
            Timeslot indexes where the source matrix changes for specific encodings
            (like when steep slopes switch between previous and current matrices).
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.#ctor">
            <summary>
            Create a JOC decoder. Always reuse a previous one as history data is required for decoding.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.UpdateCache">
            <summary>
            Checks if the cache is ready for the given number of objects and channels, and fixes if it's not.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.SetupStaticCache">
            <summary>
            Create fast LUTs from compressed data.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.maxObjects">
            <summary>
            Maximum number of objects to render.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.HadSparse">
            <summary>
            The JOC contained vector-based and not matrix-based encoded data at some point.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.DecodeSparse(System.Int32,System.Single[][][],System.Int32)">
            <summary>
            Decode a JOC matrix around a <paramref name="center"/> value in a coding where each object only takes one
            channel's data. In this step, the values are positive integers.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.DecodeCoarse(System.Int32,System.Single[][][],System.Int32,System.Single)">
            <summary>
            Decode and dequantize a complete JOC matrix around a <paramref name="quantizedCenter"/> value.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.Dequantize(System.Int32,System.Single[][][],System.Int32,System.Single)">
            <summary>
            Convert the values of the decoded JOC matrix to the mixing range.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.DequantizeObject(System.Single*,System.Int32,System.Single,System.Int32)">
            <summary>
            Convert the values of the decoded object to the mixing range.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.SteepSingleDataPointTimeslot(System.Int32,System.Single[][][],System.Single[][])">
            <summary>
            Handle mixing of a timeslot with steep slope when the number of data points is 1
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.GetMixingMatrices(System.Int32)">
            <summary>
            Get the object mixing matrices.
            </summary>
            <param name="frameSize">Length of the entire time window of all time slots</param>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding.GetMetadata">
            <summary>
            Gets the metadata for this codec in a human-readable format.
            </summary>
        </member>
        <member name="T:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier">
            <summary>
            Converts a channel-based audio stream and JOC to object output samples.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier.mono">
            <summary>
            Cavern is run by a Mono runtime, use functions optimized for that.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier.frameSize">
            <summary>
            Length of an AC-3 frame.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier.timeslotCache">
            <summary>
            Recycled timeslot object output arrays.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier.results">
            <summary>
            Recycled forward transformation result holder.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier.qmfbCache">
            <summary>
            Recycled QMFB operation arrays.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier.taskWaiter">
            <summary>
            Used for waiting while started tasks work.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier.converters">
            <summary>
            Recycled QMFB transform objects.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier.mixMatrix">
            <summary>
            Channels to objects matrix.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier.timeslot">
            <summary>
            Next timeslot to read in the current JOC.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier.#ctor(Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding,System.Int32)">
            <summary>
            Creates a converter from a channel-based audio stream and JOC to object output samples.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier.Apply(System.Single[][],Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding)">
            <summary>
            Gets the audio samples of each object for the next timeslot.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier.Dispose">
            <summary>
            Free up resources used by this object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier.ProcessObject(Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding,System.Int32,System.Single[][],System.Single)">
            <summary>
            Mixes channel-based samples by a matrix to the objects.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier.ProcessObject_Amp(Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding,System.Int32,System.Single[][],System.Single)">
            <summary>
            Mixes channel-based samples by a matrix to the objects.
            This version of the function is faster when <see cref="T:Cavern.Utilities.CavernAmp"/> is available.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingApplier.ProcessObject_Mono(Cavern.Format.Decoders.EnhancedAC3.JointObjectCoding,System.Int32,System.Single[][],System.Single)">
            <summary>
            Mixes channel-based samples by a matrix to the objects.
            This version of the function is faster only in a Mono runtime (like Unity).
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.HuffmanType.MTX">
            <summary>
            Matrix.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.HuffmanType.VEC">
            <summary>
            Vector.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.HuffmanType.IDX">
            <summary>
            Index.
            </summary>
        </member>
        <member name="T:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingTables">
            <summary>
            Hardcoded values for JOC decoding.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingTables.GetHuffCodeTable(System.Int32,Cavern.Format.Decoders.EnhancedAC3.HuffmanType)">
            <summary>
            Implementation of joc_get_huff_code, gets the corresponding Huffman table.
            </summary>
            <remarks>Does not handle invalid modes correctly.</remarks>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.JointObjectCodingTables.inputMatrix">
            <summary>
            The order of input channels for JOC matrix mixing.
            </summary>
        </member>
        <member name="T:Cavern.Format.Decoders.EnhancedAC3.OAElementMD">
            <summary>
            Decodes an object audio element metadata block.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.EnhancedAC3.OAElementMD.MinOffset">
            <summary>
            Gets the timecode of the first update in this block.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.OAElementMD.blockUsed">
            <summary>
            The movement data of the next block was already set to motion.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.OAElementMD.updateLast">
            <summary>
            The object at index had a valid position in the last frame.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.OAElementMD.updateNow">
            <summary>
            The object at index has a valid position in the current frame.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.OAElementMD.sampleOffset">
            <summary>
            Global sample offset, applied to all info blocks.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.OAElementMD.blockOffsetFactor">
            <summary>
            The beginning of each info block in samples.
            </summary>
            <remarks>Negative numbers mean that this element doesn't contain object location data.</remarks>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.OAElementMD.rampDuration">
            <summary>
            Time to fade to a new position in samples for each info block.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.OAElementMD.infoBlocks">
            <summary>
            Rendering info for each object's updates. The first dimension is the object, the second is the info block.
            </summary>
            <remarks>Can be null if the element is not an object element.</remarks>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.OAElementMD.future">
            <summary>
            The position of each object to move to.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.OAElementMD.futureDistance">
            <summary>
            Samples until reaching the <see cref="F:Cavern.Format.Decoders.EnhancedAC3.OAElementMD.future"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.OAElementMD.Read(Cavern.Format.Utilities.BitExtractor,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Decodes an object audio element metadata block.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.OAElementMD.UpdateSources(System.Int32,System.Collections.Generic.IReadOnlyList{Cavern.Source})">
            <summary>
            Set the object properties from metadata.
            </summary>
            <param name="timecode">Samples since the beginning of the audio frame</param>
            <param name="sources">The sources used for rendering this track</param>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.OAElementMD.objectElementIndex">
            <summary>
            Marks an object positioning frame.
            </summary>
        </member>
        <member name="T:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata">
            <summary>
            A decoded OAMD frame from an EMDF payload.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.Beds">
            <summary>
            Count of bed channels.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.ObjectCount">
            <summary>
            Number of audio objects in the stream. This includes both dynamic objects and <see cref="P:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.Beds"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.elements">
            <summary>
            Decoded object audio element metadata.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.bedAssignment">
            <summary>
            Bed channels used. The first dimension is the element ID, the second is one bit for each channel,
            in the order of <see cref="F:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.bedChannels"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.isfInUse">
            <summary>
            Use intermediate spatial format (ISF), which has a few fixed layouts.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.isfIndex">
            <summary>
            ISF layout ID.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.offset">
            <summary>
            This payload applies this many samples later.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.Decode(Cavern.Format.Utilities.BitExtractor,System.Int32)">
            <summary>
            Decodes a OAMD frame from an EMDF payload.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.GetStaticChannels">
            <summary>
            Get the &quot;objects&quot; that are just static channels.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.GetLFEPosition">
            <summary>
            Gets which object is the LFE channel or -1 if it's not present.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.UpdateSources(System.Int32,System.Collections.Generic.IReadOnlyList{Cavern.Source})">
            <summary>
            Set the object properties from metadata.
            </summary>
            <param name="timecode">Samples since the beginning of the audio frame</param>
            <param name="sources">The sources used for rendering this track</param>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.bedChannels">
            <summary>
            What each bit of <see cref="F:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.bedAssignment"/> means.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.standardBedChannels">
            <summary>
            Which <see cref="F:Cavern.Format.Decoders.EnhancedAC3.ObjectAudioMetadata.bedChannels"/> are set with each bit of a standard layout.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.EnhancedAC3.ObjectInfoBlock.ValidPosition">
            <summary>
            This block contained a position information update.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectInfoBlock.differentialPosition">
            <summary>
            This frame contains the difference from the last object position instead of an exact position.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectInfoBlock.gain">
            <summary>
            Object volume multiplier. Any negative value means reusing the last gain.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectInfoBlock.distance">
            <summary>
            Object distance from the center of the room. Distant objects are mapped closer to the listening position.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectInfoBlock.size">
            <summary>
            Object size. Any negative value means reusing the last size.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectInfoBlock.depthFactor">
            <summary>
            A multiplier in screen-anchored rendering.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectInfoBlock.screenFactor">
            <summary>
            A multiplier in screen-anchored rendering.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectInfoBlock.anchor">
            <summary>
            The object's anchor position.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectInfoBlock.position">
            <summary>
            The coded position information, either exact or differential.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.ObjectInfoBlock.lastPrecise">
            <summary>
            Last fully transmitted position to add delta positions to.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.ObjectInfoBlock.Update(Cavern.Format.Utilities.BitExtractor,System.Int32,System.Boolean)">
            <summary>
            Read new information for this block.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.ObjectInfoBlock.UpdateSource(Cavern.Source)">
            <summary>
            Sets the properties of the block, returns the final target position.
            The position shouldn't be updated immediately, it might have a ramp.
            </summary>
        </member>
        <member name="T:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank">
            <summary>
            Converts a PCM stream to a quadrature mirror filter bank and back.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.ProcessInverse_Amp(System.Single*,System.Single*,System.Single[])">
            <summary>
            Convert a timeslot of QMFB <see cref="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.subbands"/> to PCM samples.
            This version of the function is faster when <see cref="T:Cavern.Utilities.CavernAmp"/> is available under Mono.
            The performance under native .NET is better in the vectorized C# version.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.subbands">
            <summary>
            QMFB subband count.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.doubleLength">
            <summary>
            Value needed for transforming subbands.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.coeffs">
            <summary>
            Filter coefficients.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.subbandDiv">
            <summary>
            1 / <see cref="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.subbands"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.groupingMask">
            <summary>
            Mask to mix samples to the <see cref="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.grouping"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.forwardCache">
            <summary>
            Forward transformation cache of rotation cosines and sines.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.inverseCache">
            <summary>
            Inverse transformation cache of rotation cosines and sines.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.inputStreamForward">
            <summary>
            Input sample cache for forward transformations.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.inputStreamInverse">
            <summary>
            Input sample cache for inverse transformations.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.window">
            <summary>
            Processor window cache.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.grouping">
            <summary>
            Summation of <see cref="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.window"/> groups.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.outCache">
            <summary>
            Output cache.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.#ctor">
            <summary>
            Converts a PCM stream to a quadrature mirror filter bank and back.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.ProcessForward(System.Single*)">
            <summary>
            Transform a timeslot of real <see cref="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.subbands"/> to QMFB.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.ProcessInverse(System.ValueTuple{System.Single[],System.Single[]},System.Single[])">
            <summary>
            Convert a timeslot of QMFB <see cref="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.subbands"/> to PCM samples.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.ProcessForward_Mono(System.Single*)">
            <summary>
            Transform a timeslot of real <see cref="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.subbands"/> to QMFB.
            This version of the function is faster only in a Mono runtime (like Unity).
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.ProcessInverse_Mono(System.ValueTuple{System.Single[],System.Single[]},System.Single*)">
            <summary>
            Convert a timeslot of QMFB <see cref="F:Cavern.Format.Decoders.EnhancedAC3.QuadratureMirrorFilterBank.subbands"/> to PCM samples.
            This version of the function is faster only in a Mono runtime (like Unity).
            </summary>
        </member>
        <member name="T:Cavern.Format.Decoders.FrameBasedDecoder">
            <summary>
            Converts a frame-based bitstream to raw samples.
            Only a single function is required which processes a single frame, with access to the <see cref="F:Cavern.Format.Decoders.Decoder.reader"/>.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.FrameBasedDecoder.LastFetchStart">
            <summary>
            The position of the first sample of the last exported block in the buffer.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.FrameBasedDecoder.decoder">
            <summary>
            Frame cache object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.FrameBasedDecoder.#ctor(Cavern.Format.Utilities.BlockBuffer{System.Byte})">
            <summary>
            Converts a frame-based bitstream to raw samples.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.FrameBasedDecoder.DecodeBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Read and decode a given number of samples.
            </summary>
            <param name="target">Array to decode data into</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
            <remarks>The next to - from samples will be read from the file.
            All samples are counted, not just a single channel.</remarks>
        </member>
        <member name="M:Cavern.Format.Decoders.FrameBasedDecoder.DecodeFrame">
            <summary>
            Decode a new frame if the cached samples are already fetched.
            </summary>
        </member>
        <member name="T:Cavern.Format.Decoders.LimitlessAudioFormatDecoder">
            <summary>
            Limitless Audio Format file reader and metadata parser.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.LimitlessAudioFormatDecoder.Bits">
            <summary>
            Bit depth of the WAVE file.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.LimitlessAudioFormatDecoder.ObjectPositions">
            <summary>
            Last decoded positions of objects or position of channels if the LAF file is channel-based.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.LimitlessAudioFormatDecoder.channels">
            <summary>
            Description of each imported channel/object.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.LimitlessAudioFormatDecoder.layoutByteCount">
            <summary>
            Bytes used before each second of samples to determine which channels are actually exported.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.LimitlessAudioFormatDecoder.writtenChannels">
            <summary>
            Contains which channels contained any data in the last decoded second.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.LimitlessAudioFormatDecoder.lastReadSecond">
            <summary>
            The last loaded second, as LAF stores channel availability data every second. This is an interlaced array
            of the read channels, and has to be realigned when reading a block from it.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.LimitlessAudioFormatDecoder.trackCount">
            <summary>
            Total count of audio tracks, both PCM channels and object position tracks. The first track that contains object
            positions is what <see cref="P:Cavern.Format.Decoders.Decoder.ChannelCount"/> equals to. That shouldn't be audible.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.LimitlessAudioFormatDecoder.writtenTracks">
            <summary>
            Number of actually written tracks in the last second.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.LimitlessAudioFormatDecoder.copiedSamples">
            <summary>
            Read position in <see cref="F:Cavern.Format.Decoders.LimitlessAudioFormatDecoder.lastReadSecond"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.LimitlessAudioFormatDecoder.#ctor(System.IO.Stream)">
            <summary>
            Limitless Audio Format file reader and metadata parser.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.LimitlessAudioFormatDecoder.DecodeBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Read and decode a given number of samples.
            </summary>
            <param name="target">Array to decode data into</param>
            <param name="from">Start position in the target array (inclusive)</param>
            <param name="to">End position in the target array (exclusive)</param>
            <remarks>The next to - from samples will be read from the file.
            All samples are counted, not just a single channel.</remarks>
        </member>
        <member name="M:Cavern.Format.Decoders.LimitlessAudioFormatDecoder.Seek(System.Int64)">
            <summary>
            Start the following reads from the selected sample.
            </summary>
            <param name="sample">The selected sample, for a single channel</param>
        </member>
        <member name="M:Cavern.Format.Decoders.LimitlessAudioFormatDecoder.ReadSecond">
            <summary>
            Read the next second of audio data.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.LimitlessAudioFormatDecoder.skip">
            <summary>
            Maximum size of each read block. This can balance optimization between memory and IO.
            </summary>
        </member>
        <member name="T:Cavern.Format.Decoders.RIFFWaveDecoder">
            <summary>
            Converts a RIFF WAVE bitstream to raw samples.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.RIFFWaveDecoder.ADM">
            <summary>
            Object metadata for Broadcast Wave Files.
            </summary>
        </member>
        <member name="P:Cavern.Format.Decoders.RIFFWaveDecoder.Bits">
            <summary>
            Bit depth of the WAVE file.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.RIFFWaveDecoder.channelMask">
            <summary>
            WAVEFORMATEXTENSIBLE channel mask if available.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.RIFFWaveDecoder.dataStart">
            <summary>
            The location of the first sample in the file stream. Knowing this allows seeking.
            </summary>
        </member>
        <member name="F:Cavern.Format.Decoders.RIFFWaveDecoder.stream">
            <summary>
            Input stream when reading from a WAV file. If the stream is null, then only a block buffer is available,
            whose parent has to be seeked.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.RIFFWaveDecoder.#ctor(Cavern.Format.Utilities.BlockBuffer{System.Byte},System.Int32,System.Int64,System.Int32,Cavern.Format.BitDepth)">
            <summary>
            Converts a RIFF WAVE bitstream to raw samples.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.RIFFWaveDecoder.#ctor(System.IO.Stream)">
            <summary>
            Converts a RIFF WAVE bitstream with header to raw samples.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.RIFFWaveDecoder.GetChannels">
            <summary>
            Get the custom channel layout or the standard layout corresponding to this file's channel count.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.RIFFWaveDecoder.DecodeBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Read and decode a given number of samples.
            </summary>
            <param name="target">Array to decode data into</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
            <remarks>The next to - from samples will be read from the file.
            All samples are counted, not just a single channel.</remarks>
        </member>
        <member name="M:Cavern.Format.Decoders.RIFFWaveDecoder.Seek(System.Int64)">
            <summary>
            Start the following reads from the selected sample.
            </summary>
            <param name="sample">The selected sample, for a single channel</param>
        </member>
        <member name="M:Cavern.Format.Decoders.RIFFWaveDecoder.Finalize(System.IO.Stream)">
            <summary>
            Finish header reading, start data reading.
            </summary>
        </member>
        <member name="M:Cavern.Format.Decoders.RIFFWaveDecoder.ParseFormatHeader(System.IO.Stream)">
            <summary>
            Read the main RIFF WAVE header.
            </summary>
        </member>
        <member name="T:Cavern.Format.AudioReader">
            <summary>
            Abstract audio file reader.
            </summary>
        </member>
        <member name="F:Cavern.Format.AudioReader.filter">
            <summary>
            Filter to all supported file types for open file dialogs. These are the containers supported by <see cref="M:Cavern.Format.AudioReader.Open(System.String)"/>.
            </summary>
        </member>
        <member name="P:Cavern.Format.AudioReader.ChannelCount">
            <summary>
            Content channel count.
            </summary>
        </member>
        <member name="P:Cavern.Format.AudioReader.Length">
            <summary>
            Content length in samples for a single channel.
            </summary>
        </member>
        <member name="P:Cavern.Format.AudioReader.SampleRate">
            <summary>
            Content sample rate.
            </summary>
        </member>
        <member name="P:Cavern.Format.AudioReader.Bits">
            <summary>
            Content bit depth.
            </summary>
        </member>
        <member name="P:Cavern.Format.AudioReader.Path">
            <summary>
            Path to the opened file or null if the audio is not read from a file.
            </summary>
        </member>
        <member name="F:Cavern.Format.AudioReader.reader">
            <summary>
            File reader object.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.#ctor(System.IO.Stream)">
            <summary>
            Abstract audio file reader.
            </summary>
            <param name="reader">File reader object</param>
        </member>
        <member name="M:Cavern.Format.AudioReader.#ctor(System.String)">
            <summary>
            Abstract audio file reader.
            </summary>
            <param name="path">Input file name</param>
        </member>
        <member name="M:Cavern.Format.AudioReader.Open(System.IO.Stream)">
            <summary>
            Open an audio stream for reading. The format will be detected automatically.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.Open(System.String)">
            <summary>
            Open an audio file for reading by file name. The format will be detected automatically.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.ReadClip(System.IO.Stream)">
            <summary>
            Open an audio clip from a stream. The format will be detected automatically.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.ReadClip(System.String)">
            <summary>
            Open an audio clip by file name. The format will be detected automatically.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.OpenSequentialStream(System.String)">
            <summary>
            Open a file stream optimized for sequential reading.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.OpenContainer(Cavern.Format.Container.ContainerReader)">
            <summary>
            Open a container as a single audio track by selecting the best fit of its tracks for Cavern.Format.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.GetRenderer">
            <summary>
            Get an object-based renderer for this audio file.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.ReadHeader">
            <summary>
            Read the file header.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.Seek(System.Int64)">
            <summary>
            Start the following reads from the selected sample.
            </summary>
            <param name="sample">The selected sample, for a single channel</param>
            <remarks>Seeking is not thread-safe.</remarks>
        </member>
        <member name="M:Cavern.Format.AudioReader.ReadBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Read a block of samples.
            </summary>
            <param name="samples">Input array</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
            <remarks>The next to - from samples will be read from the file. Samples are counted for all channels.</remarks>
        </member>
        <member name="M:Cavern.Format.AudioReader.ReadBlock(System.Single[][],System.Int64,System.Int64)">
            <summary>
            Read a block of samples to a multichannel array.
            </summary>
            <param name="samples">Input array ([channel][sample])</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
            <remarks>The next to - from samples will be read from the file. Samples counted for a single channel.</remarks>
        </member>
        <member name="M:Cavern.Format.AudioReader.Read">
            <summary>
            Read the entire file, including the header, and get the data.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.ReadAfterHeader">
            <summary>
            Read the entire file, and get the data. The header should have been read before.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.ReadClip">
            <summary>
            Read the entire file, including the header, and pack it in a <see cref="T:Cavern.Clip"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.ReadClipAfterHeader">
            <summary>
            Read the entire file and pack it in a <see cref="T:Cavern.Clip"/>. The header should have been read before.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.ReadMultichannel">
            <summary>
            Read the entire file, including the header.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.ReadMultichannelAfterHeader">
            <summary>
            Read the entire file. The header should have been read before.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.Reset">
            <summary>
            Goes back to a state where the first sample can be read.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioReader.Dispose">
            <summary>
            Close the reader.
            </summary>
        </member>
        <member name="T:Cavern.Format.AudioTrackReader">
            <summary>
            Reads an audio track from a container.
            </summary>
        </member>
        <member name="P:Cavern.Format.AudioTrackReader.Source">
            <summary>
            Get the container that contains this track.
            </summary>
        </member>
        <member name="F:Cavern.Format.AudioTrackReader.decoder">
            <summary>
            Decoder based on the <see cref="T:Cavern.Format.Common.Codec"/> of the selected stream.
            </summary>
        </member>
        <member name="F:Cavern.Format.AudioTrackReader.disposeSource">
            <summary>
            If this track reader was created without keeping the reference to the container,
            the container is disposed with this track.
            </summary>
        </member>
        <member name="F:Cavern.Format.AudioTrackReader.track">
            <summary>
            The referenced track from a container.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioTrackReader.#ctor(Cavern.Format.Common.Track)">
            <summary>
            Reads an audio track from a container.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioTrackReader.#ctor(Cavern.Format.Common.Track,System.Boolean)">
            <summary>
            Reads an audio track from a container and disposes the container after the reading was done.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioTrackReader.ReadHeader">
            <summary>
            Fill the file metadata from the selected track.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioTrackReader.GetRenderer">
            <summary>
            If the stream can be rendered in 3D by Cavern, return a renderer.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioTrackReader.ReadBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Read a block of samples.
            </summary>
            <param name="samples">Input array</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
            <remarks>The next to - from samples will be read from the file.
            All samples are counted, not just a single channel.</remarks>
        </member>
        <member name="M:Cavern.Format.AudioTrackReader.Reset">
            <summary>
            Goes back to a state where the first sample can be read.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioTrackReader.GetMetadata">
            <summary>
            Gets the metadata for the underlying codec in a human-readable format.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioTrackReader.Dispose">
            <summary>
            Close the reader if it surely can't be used anywhere else.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioTrackReader.Seek(System.Int64)">
            <summary>
            Start the following reads from the selected sample.
            </summary>
            <param name="sample">The selected sample, for a single channel</param>
            <remarks>Seeking is not thread-safe.</remarks>
        </member>
        <member name="T:Cavern.Format.EnhancedAC3Reader">
            <summary>
            Enhanced AC-3 file reader.
            </summary>
        </member>
        <member name="F:Cavern.Format.EnhancedAC3Reader.fileSize">
            <summary>
            File size to calculate the content length from, assuming AC-3 is constant bitrate.
            </summary>
        </member>
        <member name="F:Cavern.Format.EnhancedAC3Reader.decoder">
            <summary>
            Bitsteam interpreter.
            </summary>
        </member>
        <member name="M:Cavern.Format.EnhancedAC3Reader.#ctor(System.IO.Stream)">
            <summary>
            Enhanced AC-3 file reader.
            </summary>
            <param name="reader">File reader object</param>
        </member>
        <member name="M:Cavern.Format.EnhancedAC3Reader.#ctor(System.String)">
            <summary>
            Enhanced AC-3 file reader.
            </summary>
            <param name="path">Input file name</param>
        </member>
        <member name="M:Cavern.Format.EnhancedAC3Reader.ReadHeader">
            <summary>
            Read the file header.
            </summary>
        </member>
        <member name="M:Cavern.Format.EnhancedAC3Reader.ReadBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Read a block of samples.
            </summary>
            <param name="samples">Input array</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
            <remarks>The next to - from samples will be read from the file.
            All samples are counted, not just a single channel.</remarks>
        </member>
        <member name="M:Cavern.Format.EnhancedAC3Reader.GetRenderer">
            <summary>
            Get an object-based renderer for this audio file.
            </summary>
        </member>
        <member name="M:Cavern.Format.EnhancedAC3Reader.Seek(System.Int64)">
            <summary>
            Start the following reads from the selected sample.
            </summary>
            <param name="sample">The selected sample, for a single channel</param>
            <remarks>Seeking is not thread-safe.</remarks>
        </member>
        <member name="M:Cavern.Format.EnhancedAC3Reader.GetMetadata">
            <summary>
            Gets the metadata for this codec in a human-readable format.
            </summary>
        </member>
        <member name="T:Cavern.Format.LimitlessAudioFormatReader">
            <summary>
            Minimal Limitless Audio Format file reader.
            </summary>
        </member>
        <member name="F:Cavern.Format.LimitlessAudioFormatReader.decoder">
            <summary>
            Bitsteam interpreter.
            </summary>
        </member>
        <member name="M:Cavern.Format.LimitlessAudioFormatReader.#ctor(System.IO.Stream)">
            <summary>
            Minimal Limitless Audio Format file reader.
            </summary>
            <param name="reader">File reader object</param>
        </member>
        <member name="M:Cavern.Format.LimitlessAudioFormatReader.#ctor(System.String)">
            <summary>
            Minimal Limitless Audio Format file reader.
            </summary>
            <param name="path">Input file name</param>
        </member>
        <member name="M:Cavern.Format.LimitlessAudioFormatReader.ReadHeader">
            <summary>
            Read the file header.
            </summary>
        </member>
        <member name="M:Cavern.Format.LimitlessAudioFormatReader.ReadBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Read a block of samples.
            </summary>
            <param name="samples">Input array</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
            <remarks>The next to - from samples will be read from the file. Samples are counted for all channels.</remarks>
        </member>
        <member name="M:Cavern.Format.LimitlessAudioFormatReader.GetRenderer">
            <summary>
            Get an object-based renderer for this audio file.
            </summary>
        </member>
        <member name="M:Cavern.Format.LimitlessAudioFormatReader.Seek(System.Int64)">
            <summary>
            Start the following reads from the selected sample.
            </summary>
            <param name="sample">The selected sample, for a single channel</param>
            <remarks>Seeking is not thread-safe.</remarks>
        </member>
        <member name="T:Cavern.Format.RIFFWaveReader">
            <summary>
            Minimal RIFF wave file reader.
            </summary>
        </member>
        <member name="F:Cavern.Format.RIFFWaveReader.decoder">
            <summary>
            Bitsteam interpreter.
            </summary>
        </member>
        <member name="M:Cavern.Format.RIFFWaveReader.#ctor(System.IO.Stream)">
            <summary>
            Minimal RIFF wave file reader.
            </summary>
            <param name="reader">File reader object</param>
        </member>
        <member name="M:Cavern.Format.RIFFWaveReader.#ctor(System.String)">
            <summary>
            Minimal RIFF wave file reader.
            </summary>
            <param name="path">Input file name</param>
        </member>
        <member name="M:Cavern.Format.RIFFWaveReader.ReadHeader">
            <summary>
            Read the file header.
            </summary>
        </member>
        <member name="M:Cavern.Format.RIFFWaveReader.ReadBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Read a block of samples.
            </summary>
            <param name="samples">Input array</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
            <remarks>The next to - from samples will be read from the file.
            All samples are counted, not just a single channel.</remarks>
        </member>
        <member name="M:Cavern.Format.RIFFWaveReader.Seek(System.Int64)">
            <summary>
            Start the following reads from the selected sample.
            </summary>
            <param name="sample">The selected sample, for a single channel</param>
            <remarks>Seeking is not thread-safe.</remarks>
        </member>
        <member name="M:Cavern.Format.RIFFWaveReader.Reset">
            <summary>
            Goes back to a state where the first sample can be read.
            </summary>
        </member>
        <member name="M:Cavern.Format.RIFFWaveReader.GetRenderer">
            <summary>
            Get an object-based renderer for this audio file.
            </summary>
        </member>
        <member name="T:Cavern.Format.SegmentedAudioReader">
            <summary>
            Reads audio files from multiple segments.
            </summary>
        </member>
        <member name="F:Cavern.Format.SegmentedAudioReader.path">
            <summary>
            A C# format string compliant path, where {0} will be the index.
            </summary>
        </member>
        <member name="F:Cavern.Format.SegmentedAudioReader.segments">
            <summary>
            References to all segments.
            </summary>
        </member>
        <member name="F:Cavern.Format.SegmentedAudioReader.segment">
            <summary>
            The currently read segment.
            </summary>
        </member>
        <member name="F:Cavern.Format.SegmentedAudioReader.segmentPosition">
            <summary>
            The next sample to read from the current <see cref="F:Cavern.Format.SegmentedAudioReader.segment"/>, for a single channel.
            </summary>
        </member>
        <member name="M:Cavern.Format.SegmentedAudioReader.#ctor(System.String)">
            <summary>
            Reads audio files from multiple segments.
            </summary>
            <param name="path">A C# format string compliant path, where {0} will be the index</param>
        </member>
        <member name="M:Cavern.Format.SegmentedAudioReader.GetSegmentFiles">
            <summary>
            Get all file names which are loaded by this reader.
            </summary>
        </member>
        <member name="M:Cavern.Format.SegmentedAudioReader.ReadHeader">
            <summary>
            Read the file header.
            </summary>
        </member>
        <member name="M:Cavern.Format.SegmentedAudioReader.ReadBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Read a block of samples.
            </summary>
            <param name="samples">Input array</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
            <remarks>The next to - from samples will be read from the file.
            All samples are counted, not just a single channel.</remarks>
        </member>
        <member name="M:Cavern.Format.SegmentedAudioReader.Reset">
            <summary>
            Goes back to a state where the first sample can be read.
            </summary>
        </member>
        <member name="M:Cavern.Format.SegmentedAudioReader.Seek(System.Int64)">
            <summary>
            Start the following reads from the selected sample.
            </summary>
            <param name="sample">The selected sample, for a single channel</param>
            <remarks>Seeking is not thread-safe.</remarks>
        </member>
        <member name="M:Cavern.Format.SegmentedAudioReader.GetRenderer">
            <summary>
            Get an object-based renderer for this audio file.
            </summary>
        </member>
        <member name="M:Cavern.Format.SegmentedAudioReader.Dispose">
            <summary>
            Close the files of the segments.
            </summary>
        </member>
        <member name="T:Cavern.Format.AudioWriter">
            <summary>
            Abstract audio file writer.
            </summary>
        </member>
        <member name="P:Cavern.Format.AudioWriter.ChannelCount">
            <summary>
            Output channel count.
            </summary>
        </member>
        <member name="P:Cavern.Format.AudioWriter.Length">
            <summary>
            Output length in samples per channel.
            </summary>
        </member>
        <member name="P:Cavern.Format.AudioWriter.SampleRate">
            <summary>
            Output sample rate.
            </summary>
        </member>
        <member name="P:Cavern.Format.AudioWriter.Bits">
            <summary>
            Output bit depth.
            </summary>
        </member>
        <member name="F:Cavern.Format.AudioWriter.writer">
            <summary>
            Stream to write to.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioWriter.#ctor(System.IO.Stream,System.Int32,System.Int64,System.Int32,Cavern.Format.BitDepth)">
            <summary>
            Abstract audio stream writer.
            </summary>
            <param name="writer">Stream to write to</param>
            <param name="channelCount">Output channel count</param>
            <param name="length">Output length in samples per channel</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
        </member>
        <member name="M:Cavern.Format.AudioWriter.#ctor(System.String,System.Int32,System.Int64,System.Int32,Cavern.Format.BitDepth)">
            <summary>
            Abstract audio file writer.
            </summary>
            <param name="path">Output file name</param>
            <param name="channelCount">Output channel count</param>
            <param name="length">Output length in samples per channel</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
        </member>
        <member name="M:Cavern.Format.AudioWriter.Create(System.String,System.Int32,System.Int64,System.Int32,Cavern.Format.BitDepth)">
            <summary>
            Create an <see cref="T:Cavern.Format.AudioWriter"/> that matches the output file name.
            </summary>
            <remarks>When creating a .LAF file, the active environment's channels will be used.</remarks>
            <param name="path">Output file name</param>
            <param name="channelCount">Output channel count</param>
            <param name="length">Output length in samples per channel</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
        </member>
        <member name="M:Cavern.Format.AudioWriter.Open(System.String)">
            <summary>
            Open a file stream optimized for sequential writing.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioWriter.WriteHeader">
            <summary>
            Create the file header.
            </summary>
        </member>
        <member name="M:Cavern.Format.AudioWriter.WriteBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Write a block of mono or interlaced samples.
            </summary>
            <param name="samples">Samples to write</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
        </member>
        <member name="M:Cavern.Format.AudioWriter.WriteBlock(System.Single[][],System.Int64,System.Int64)">
            <summary>
            Write a block of multichannel samples.
            </summary>
            <param name="samples">Samples to write</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
        </member>
        <member name="M:Cavern.Format.AudioWriter.WriteChannelLimitedBlock(System.Single[],System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Write the first selected channels of a block of mono or interlaced samples.
            </summary>
            <param name="samples">Samples to write</param>
            <param name="channelLimit">Allow only this many channels to be written</param>
            <param name="channels">Channel count of the input array</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
            <remarks>This function is destructive, <paramref name="samples"/> will be unusable after the operation.</remarks>
        </member>
        <member name="M:Cavern.Format.AudioWriter.Write(System.Single[])">
            <summary>
            Write the entire mono file, including the header.
            </summary>
            <param name="samples">All input samples</param>
        </member>
        <member name="M:Cavern.Format.AudioWriter.Write(System.Single[][])">
            <summary>
            Write the entire multichannel file.
            </summary>
            <param name="samples">All input samples</param>
        </member>
        <member name="M:Cavern.Format.AudioWriter.WriteOffset(System.Single[][])">
            <summary>
            Writes the <paramref name="samples"/> to be played back channel after channel.
            </summary>
            <param name="samples">All input samples</param>
        </member>
        <member name="M:Cavern.Format.AudioWriter.WriteOffset(System.Single[][],System.Int32)">
            <summary>
            Writes the <paramref name="samples"/> to be played back channel after channel, but some channels play simultaneously.
            </summary>
            <param name="samples">All input samples</param>
            <param name="period">Channels separated by this many channels are played simultaneously</param>
        </member>
        <member name="M:Cavern.Format.AudioWriter.WriteForEachChannel(System.Single[],System.Int32)">
            <summary>
            Writes the <paramref name="samples"/> to be played back channel after channel.
            </summary>
            <param name="samples">All input samples</param>
            <param name="channelCount">Output channel count</param>
        </member>
        <member name="M:Cavern.Format.AudioWriter.Dispose">
            <summary>
            Close the writer.
            </summary>
        </member>
        <member name="T:Cavern.Format.Environment.BroadcastWaveFormatWriter">
            <summary>
            Object-based exporter of a listening environment to Audio Definition Model Broadcast Wave Format.
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.BroadcastWaveFormatWriter.FinalFeedback">
            <summary>
            Reports the progress of the final AXML export [0;1].
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.BroadcastWaveFormatWriter.FinalFeedbackStart">
            <summary>
            <see cref="F:Cavern.Format.Environment.BroadcastWaveFormatWriter.FinalFeedback"/> will report numbers from this to 1.
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.BroadcastWaveFormatWriter.output">
            <summary>
            The main PCM exporter.
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.BroadcastWaveFormatWriter.movements">
            <summary>
            Recorded movement path of all sources.
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.BroadcastWaveFormatWriter.admWriter">
            <summary>
            When not null, writes the AXML to this separate file.
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.BroadcastWaveFormatWriter.samplesWritten">
            <summary>
            Total samples written to the export file.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.BroadcastWaveFormatWriter.#ctor(System.IO.Stream,Cavern.Listener,System.Int64,Cavern.Format.BitDepth)">
            <summary>
            Object-based exporter of a listening environment to Audio Definition Model Broadcast Wave Format.
            When an XML path is received, the waveform and the ADM will be written to separate files.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.BroadcastWaveFormatWriter.#ctor(System.String,Cavern.Listener,System.Int64,Cavern.Format.BitDepth)">
            <summary>
            Object-based exporter of a listening environment to Audio Definition Model Broadcast Wave Format.
            When an XML path is received, the waveform and the ADM will be written to separate files.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.BroadcastWaveFormatWriter.WriteNextFrame">
            <summary>
            Export the next frame of the <see cref="T:Cavern.Source"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.BroadcastWaveFormatWriter.Dispose">
            <summary>
            Close the writer and export movement metadata.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.BroadcastWaveFormatWriter.GetContentLength">
            <summary>
            Get the length of the environment recording.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.BroadcastWaveFormatWriter.CreateModel">
            <summary>
            Generates the ADM structure from the recorded movement.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.BroadcastWaveFormatWriter.WriteAdditionalChunks">
            <summary>
            Additional chunks to write to the BWF file.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.BroadcastWaveFormatWriter.FixEndTimings(System.Collections.Generic.List{Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMBlockFormat},Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan)">
            <summary>
            Makes sure the last block ends with the content.
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.BroadcastWaveFormatWriter.minusOne">
            <summary>
            Inverse of <see cref="P:System.Numerics.Vector3.One"/> for clamping.
            </summary>
        </member>
        <member name="T:Cavern.Format.Environment.DolbyAtmosBWFWriter">
            <summary>
            Dolby Atmos has a master format that is a subset of ADM BWF with certain restrictions.
            10 bed channels always have to be present, even if they are empty.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.DolbyAtmosBWFWriter.#ctor(System.IO.Stream,Cavern.Listener,System.Int64,Cavern.Format.BitDepth,System.ValueTuple{Cavern.Channels.ReferenceChannel,Cavern.Source}[])">
            <summary>
            ADM BWF exporter with Dolby Atmos compatibility options.
            </summary>
            <param name="writer">File output stream</param>
            <param name="source">Rendering environment that should be exported</param>
            <param name="length">Total samples to write</param>
            <param name="bits">Bit depth of the output</param>
            <param name="staticObjects">Objects that should be exported as a bed channel if possible</param>
        </member>
        <member name="M:Cavern.Format.Environment.DolbyAtmosBWFWriter.ExtendWithMuteTarget(Cavern.Listener,System.ValueTuple{Cavern.Channels.ReferenceChannel,Cavern.Source}[])">
            <summary>
            Calling this for the base constructor is a shortcut to adding extra tracks which are wired as the required bed.
            Additionally, <paramref name="staticObjects"/> could be mapped to the bad if a corresponding bed channel exists.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.DolbyAtmosBWFWriter.#ctor(System.String,Cavern.Listener,System.Int64,Cavern.Format.BitDepth,System.ValueTuple{Cavern.Channels.ReferenceChannel,Cavern.Source}[])">
            <summary>
            ADM BWF exporter with Dolby Atmos compatibility options.
            </summary>
            <param name="path">File output path</param>
            <param name="source">Rendering environment that should be exported</param>
            <param name="length">Total samples to write</param>
            <param name="bits">Bit depth of the output</param>
            <param name="staticObjects">Objects that should be exported as a bed channel if possible</param>
        </member>
        <member name="M:Cavern.Format.Environment.DolbyAtmosBWFWriter.CreateModel">
            <summary>
            Generates the ADM structure from the recorded movement and wires the mute channel to beds.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.DolbyAtmosBWFWriter.WriteAdditionalChunks">
            <summary>
            Add Dolby audio Metadata to Atmos BWF files.
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.DolbyAtmosBWFWriter.bedChannels">
            <summary>
            Indexes of Dolby Atmos beds (7.1.2) in the <see cref="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMConsts.channelNames"/> array.
            </summary>
        </member>
        <member name="T:Cavern.Format.Environment.EnvironmentWriter">
            <summary>
            Exports a listener environment with all its sources, including movement data.
            </summary>
        </member>
        <member name="P:Cavern.Format.Environment.EnvironmentWriter.Source">
            <summary>
            The rendering environment to export.
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.EnvironmentWriter.writer">
            <summary>
            File writer object.
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.EnvironmentWriter.renderCache">
            <summary>
            One update of samples to be reused.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.EnvironmentWriter.#ctor(System.IO.Stream,Cavern.Listener)">
            <summary>
            Exports a listener environment with all its objects, including movement data.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.EnvironmentWriter.#ctor(System.String,Cavern.Listener)">
            <summary>
            Exports a listener environment with all its objects, including movement data.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.EnvironmentWriter.WriteNextFrame">
            <summary>
            Export the next frame of the <see cref="P:Cavern.Format.Environment.EnvironmentWriter.Source"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.EnvironmentWriter.Dispose">
            <summary>
            Close the writer.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.EnvironmentWriter.GetInterlacedPCMOutput">
            <summary>
            Gets each source's samples in an interlaced array.
            </summary>
            <remarks>Only keeps the first streamed channel to each object.</remarks>
        </member>
        <member name="T:Cavern.Format.Environment.LimitlessAudioFormatEnvironmentWriter">
            <summary>
            Exports the rendered environment in an object-based Limitless Audio Format file.
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.LimitlessAudioFormatEnvironmentWriter.output">
            <summary>
            The file to write the environment to.
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.LimitlessAudioFormatEnvironmentWriter.objects">
            <summary>
            Number of objects to write to the file.
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.LimitlessAudioFormatEnvironmentWriter.positionalBlock">
            <summary>
            The last position update that is already under exporting. It's only refreshed when the
            previous state is flushed to the file. One position collection for the next frame of each track.
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.LimitlessAudioFormatEnvironmentWriter.samplesWritten">
            <summary>
            Total samples written to the export file.
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.LimitlessAudioFormatEnvironmentWriter.objectStreamPosition">
            <summary>
            How many bytes of the <see cref="F:Cavern.Format.Environment.LimitlessAudioFormatEnvironmentWriter.objectStreamRate"/> are currently written.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.LimitlessAudioFormatEnvironmentWriter.#ctor(System.IO.Stream,Cavern.Listener,System.Int64,Cavern.Format.BitDepth)">
            <summary>
            Exports the rendered environment in an object-based Limitless Audio Format file.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.LimitlessAudioFormatEnvironmentWriter.#ctor(System.String,Cavern.Listener,System.Int64,Cavern.Format.BitDepth)">
            <summary>
            Exports the rendered environment in an object-based Limitless Audio Format file.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.LimitlessAudioFormatEnvironmentWriter.ExtendWithMuteTarget(Cavern.Listener,System.Int32)">
            <summary>
            Calling this for the base constructor is a shortcut to adding extra tracks which are wired as the object position tracks.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.LimitlessAudioFormatEnvironmentWriter.WriteNextFrame">
            <summary>
            Export the next frame of the <see cref="T:Cavern.Source"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Environment.LimitlessAudioFormatEnvironmentWriter.Dispose">
            <summary>
            Free the written file.
            </summary>
        </member>
        <member name="F:Cavern.Format.Environment.LimitlessAudioFormatEnvironmentWriter.objectStreamRate">
            <summary>
            The number of values required for position updates per position track. Position tracks always contain data for 16
            channels, even if those values are unused. Their precision depends on the bit depth, but the range is always [0;1].
            </summary>
        </member>
        <member name="T:Cavern.Format.LimitlessAudioFormatWriter">
            <summary>
            Minimal Limitless Audio Format file writer.
            </summary>
        </member>
        <member name="F:Cavern.Format.LimitlessAudioFormatWriter.channels">
            <summary>
            Output channel information.
            </summary>
        </member>
        <member name="F:Cavern.Format.LimitlessAudioFormatWriter.cache">
            <summary>
            The past second for each channel.
            </summary>
        </member>
        <member name="F:Cavern.Format.LimitlessAudioFormatWriter.cachePosition">
            <summary>
            Write position in the <see cref="F:Cavern.Format.LimitlessAudioFormatWriter.cache"/>. Used to check if the cache is full for block dumping.
            </summary>
        </member>
        <member name="F:Cavern.Format.LimitlessAudioFormatWriter.totalWritten">
            <summary>
            Total samples written in the file so far. Used to check the end of file and dump the unfilled last block.
            </summary>
        </member>
        <member name="M:Cavern.Format.LimitlessAudioFormatWriter.#ctor(System.IO.Stream,System.Int64,System.Int32,Cavern.Format.BitDepth,Cavern.Channel[])">
            <summary>
            Minimal Limitless Audio Format file writer.
            </summary>
            <param name="writer">File writer object</param>
            <param name="length">Output length in samples per channel</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
            <param name="channels">Output channel information</param>
        </member>
        <member name="M:Cavern.Format.LimitlessAudioFormatWriter.#ctor(System.String,System.Int64,System.Int32,Cavern.Format.BitDepth,Cavern.Channel[])">
            <summary>
            Minimal Limitless Audio Format file writer.
            </summary>
            <param name="path">Output file name</param>
            <param name="length">Output length in samples per channel</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
            <param name="channels">Output channel information</param>
        </member>
        <member name="M:Cavern.Format.LimitlessAudioFormatWriter.Write(System.String,System.Single[],System.Int32,Cavern.Format.BitDepth,Cavern.Channel[])">
            <summary>
            Export an array of samples to an audio file.
            </summary>
            <param name="path">Output file name</param>
            <param name="data">Samples to write in the file</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
            <param name="channels">Output channel information</param>
        </member>
        <member name="M:Cavern.Format.LimitlessAudioFormatWriter.Write(System.String,System.Single[][],System.Int32,Cavern.Format.BitDepth,Cavern.Channel[])">
            <summary>
            Export an array of multichannel samples to an audio file.
            </summary>
            <param name="path">Output file name</param>
            <param name="data">Samples to write in the file</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
            <param name="channels">Output channel information</param>
        </member>
        <member name="M:Cavern.Format.LimitlessAudioFormatWriter.WriteOffset(System.String,System.Single[][],System.Int32,Cavern.Format.BitDepth,Cavern.Channel[],System.Int32)">
            <summary>
            Export an audio file to be played back channel after channel.
            </summary>
            <param name="path">Output file name</param>
            <param name="data">Samples to write in the file</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
            <param name="channels">Output channel information</param>
            <param name="period">Channels separated by this many channels are played simultaneously</param>
        </member>
        <member name="M:Cavern.Format.LimitlessAudioFormatWriter.WriteHeader">
            <summary>
            Create the file header.
            </summary>
        </member>
        <member name="M:Cavern.Format.LimitlessAudioFormatWriter.WriteHeader(System.Boolean,System.Int32)">
            <summary>
            Create the file header.
            </summary>
        </member>
        <member name="M:Cavern.Format.LimitlessAudioFormatWriter.WriteBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Write a block of samples.
            </summary>
            <param name="samples">Samples to write</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
        </member>
        <member name="M:Cavern.Format.LimitlessAudioFormatWriter.DumpBlock(System.Int64)">
            <summary>
            Output only the used channels from the last second.
            </summary>
            <param name="until">Samples to dump from the <see cref="F:Cavern.Format.LimitlessAudioFormatWriter.cache"/></param>
        </member>
        <member name="T:Cavern.Format.RIFFWaveWriter">
            <summary>
            Minimal RIFF wave file writer.
            </summary>
        </member>
        <member name="P:Cavern.Format.RIFFWaveWriter.MaxLargeChunks">
            <summary>
            The maximum number of additionally needed chunks that could surpass 4 GB.
            </summary>
        </member>
        <member name="F:Cavern.Format.RIFFWaveWriter.channelMask">
            <summary>
            Channels present in the file, see <see cref="T:Cavern.Format.Consts.RIFFWave.WaveExtensibleChannel"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.RIFFWaveWriter.largeChunkSizes">
            <summary>
            Sizes of chunks larger than 4 GB.
            </summary>
        </member>
        <member name="P:Cavern.Format.RIFFWaveWriter.DataLength">
            <summary>
            Bytes used for the actual PCM data.
            </summary>
        </member>
        <member name="F:Cavern.Format.RIFFWaveWriter.samplesWritten">
            <summary>
            Total samples written.
            </summary>
        </member>
        <member name="M:Cavern.Format.RIFFWaveWriter.#ctor(System.IO.Stream,System.Int32,System.Int64,System.Int32,Cavern.Format.BitDepth)">
            <summary>
            Minimal RIFF Wave file writer.
            </summary>
            <param name="writer">File writer object</param>
            <param name="channelCount">Output channel count</param>
            <param name="length">Output length in samples per channel</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
        </member>
        <member name="M:Cavern.Format.RIFFWaveWriter.#ctor(System.String,System.Int32,System.Int64,System.Int32,Cavern.Format.BitDepth)">
            <summary>
            Minimal RIFF Wave file writer.
            </summary>
            <param name="path">Output file name</param>
            <param name="channelCount">Output channel count</param>
            <param name="length">Output length in samples per channel</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
        </member>
        <member name="M:Cavern.Format.RIFFWaveWriter.#ctor(System.IO.Stream,Cavern.Channels.ReferenceChannel[],System.Int64,System.Int32,Cavern.Format.BitDepth)">
            <summary>
            WAVEFORMATEXTENSIBLE file writer.
            </summary>
            <param name="writer">File writer object</param>
            <param name="channels">Output channel mapping</param>
            <param name="length">Output length in samples per channel</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
        </member>
        <member name="M:Cavern.Format.RIFFWaveWriter.#ctor(System.String,Cavern.Channels.ReferenceChannel[],System.Int64,System.Int32,Cavern.Format.BitDepth)">
            <summary>
            WAVEFORMATEXTENSIBLE file writer.
            </summary>
            <param name="path">Output file name</param>
            <param name="channels">Output channel mapping</param>
            <param name="length">Output length in samples per channel</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
        </member>
        <member name="M:Cavern.Format.RIFFWaveWriter.Write(System.String,System.Single[],System.Int32,System.Int32,Cavern.Format.BitDepth)">
            <summary>
            Export an array of samples to an audio file.
            </summary>
            <param name="path">Output file name</param>
            <param name="data">Samples to write in the file</param>
            <param name="channelCount">Output channel count</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
        </member>
        <member name="M:Cavern.Format.RIFFWaveWriter.Write(System.String,System.Single[][],System.Int32,Cavern.Format.BitDepth)">
            <summary>
            Export an array of multichannel samples to an audio file.
            </summary>
            <param name="path">Output file name</param>
            <param name="data">Samples to write in the file</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
        </member>
        <member name="M:Cavern.Format.RIFFWaveWriter.WriteOffset(System.String,System.Single[][],System.Int32,Cavern.Format.BitDepth,System.Int32)">
            <summary>
            Export an audio file to be played back channel after channel.
            </summary>
            <param name="path">Output file name</param>
            <param name="data">Samples to write in the file</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
            <param name="period">Channels separated by this many channels are played simultaneously</param>
        </member>
        <member name="M:Cavern.Format.RIFFWaveWriter.WriteForEachChannel(System.String,System.Single[],System.Int32,System.Int32,Cavern.Format.BitDepth)">
            <summary>
            Export an audio file to be played back channel after channel.
            </summary>
            <param name="path">Output file name</param>
            <param name="data">Samples to write in the file</param>
            <param name="channelCount">Output channel count</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
        </member>
        <member name="M:Cavern.Format.RIFFWaveWriter.WriteHeader">
            <summary>
            Create the file header.
            </summary>
        </member>
        <member name="M:Cavern.Format.RIFFWaveWriter.WriteBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Write a block of samples.
            </summary>
            <param name="samples">Samples to write</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
        </member>
        <member name="M:Cavern.Format.RIFFWaveWriter.WriteBlock(System.Single[][],System.Int64,System.Int64)">
            <summary>
            Write a block of samples.
            </summary>
            <param name="samples">Samples to write</param>
            <param name="from">Start position in the input array for a single channel (inclusive)</param>
            <param name="to">End position in the input array for a single channel (exclusive)</param>
        </member>
        <member name="M:Cavern.Format.RIFFWaveWriter.WriteChunk(System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Append an extra chunk to the file.
            </summary>
            <param name="id">4 byte identifier of the chunk</param>
            <param name="data">Raw data of the chunk</param>
            <param name="dwordPadded">Some RIFF readers only work if all chunks start at an even byte, this is for their support</param>
            <remarks>The <paramref name="id"/> has a different byte order in the file to memory,
            refer to <see cref="T:Cavern.Format.Consts.RIFFWave"/> for samples.</remarks>
        </member>
        <member name="M:Cavern.Format.RIFFWaveWriter.Dispose">
            <summary>
            Update 64-bit size information when needed before closing the file.
            </summary>
        </member>
        <member name="F:Cavern.Format.RIFFWaveWriter.fmtJunkSize">
            <summary>
            Additional gross bytes in the format header, its total size is this + <see cref="F:Cavern.Format.RIFFWaveWriter.fmtContentSize"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.RIFFWaveWriter.fmtContentSize">
            <summary>
            Bytes of metadata in the format header.
            </summary>
        </member>
        <member name="F:Cavern.Format.RIFFWaveWriter.waveformatextensibleSize">
            <summary>
            The format header metadata length if it includes additional information.
            </summary>
        </member>
        <member name="F:Cavern.Format.RIFFWaveWriter.junkBaseSize">
            <summary>
            Minimum size of the temporary header that could be replaced with a size header.
            </summary>
        </member>
        <member name="F:Cavern.Format.RIFFWaveWriter.junkExtraSize">
            <summary>
            Size for one extra header information in the temporary header.
            </summary>
        </member>
        <member name="F:Cavern.Format.RIFFWaveWriter.extensibleSampleFormat">
            <summary>
            Sample format identifier of WAVEFORMATEXTENSIBLE.
            </summary>
        </member>
        <member name="T:Cavern.Format.SegmentedAudioWriter">
            <summary>
            Writes audio files with the selected encoder in multiple segments
            </summary>
        </member>
        <member name="F:Cavern.Format.SegmentedAudioWriter.path">
            <summary>
            A C# format string compliant path, where {0} will be the index.
            </summary>
        </member>
        <member name="F:Cavern.Format.SegmentedAudioWriter.segmentSize">
            <summary>
            Length of a segment in samples per a single channel, excluding the overlap.
            </summary>
        </member>
        <member name="F:Cavern.Format.SegmentedAudioWriter.segments">
            <summary>
            References to all segments.
            </summary>
        </member>
        <member name="F:Cavern.Format.SegmentedAudioWriter.written">
            <summary>
            Total number of samples written across all segments (for a single channel), not counting overlaps.
            </summary>
        </member>
        <member name="M:Cavern.Format.SegmentedAudioWriter.#ctor(System.String,System.Int32,System.Int64,System.Int64,System.Int32,Cavern.Format.BitDepth)">
            <summary>
            Writes audio files with the selected encoder in multiple segments.
            </summary>
            <param name="path">A C# format string compliant path, where {0} will be the index</param>
            <param name="channelCount">Output channel count</param>
            <param name="length">Output length in samples per channel</param>
            <param name="segmentSize">Length of a segment in samples per a single channel</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
        </member>
        <member name="M:Cavern.Format.SegmentedAudioWriter.#ctor(System.String,System.Int32,System.Int64,System.Int64,System.Int32,Cavern.Format.BitDepth,System.Int64)">
            <summary>
            Writes audio files with the selected encoder in multiple overlapping segments.
            </summary>
            <param name="path">A C# format string compliant path, where {0} will be the index</param>
            <param name="channelCount">Output channel count</param>
            <param name="length">Output length in samples per channel</param>
            <param name="segmentSize">Length of a segment in samples per a single channel</param>
            <param name="sampleRate">Output sample rate</param>
            <param name="bits">Output bit depth</param>
            <param name="overlap">Number of added samples of a segment to also contain in the next segment.</param>
        </member>
        <member name="M:Cavern.Format.SegmentedAudioWriter.GetSegmentFiles">
            <summary>
            Get all file names which are loaded by this writer.
            </summary>
        </member>
        <member name="M:Cavern.Format.SegmentedAudioWriter.WriteHeader">
            <summary>
            Create the file header.
            </summary>
        </member>
        <member name="M:Cavern.Format.SegmentedAudioWriter.WriteBlock(System.Single[],System.Int64,System.Int64)">
            <summary>
            Write a block of mono or interlaced samples.
            </summary>
            <param name="samples">Samples to write</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
        </member>
        <member name="M:Cavern.Format.SegmentedAudioWriter.WriteBlock(System.Single[][],System.Int64,System.Int64)">
            <summary>
            Write a block of multichannel samples.
            </summary>
            <param name="samples">Samples to write</param>
            <param name="from">Start position in the input array (inclusive)</param>
            <param name="to">End position in the input array (exclusive)</param>
        </member>
        <member name="M:Cavern.Format.SegmentedAudioWriter.Dispose">
            <summary>
            Close the files of the segments.
            </summary>
        </member>
        <member name="T:Cavern.Format.Renderers.DummyRenderer">
            <summary>
            Renders silence.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.DummyRenderer.#ctor(Cavern.Format.Decoders.Decoder)">
            <summary>
            Renders silence.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.DummyRenderer.Update(System.Int32)">
            <summary>
            Renders silence.
            </summary>
        </member>
        <member name="T:Cavern.Format.Renderers.EnhancedAC3Renderer">
            <summary>
            Renders a decoded E-AC-3 stream with Cavern.
            </summary>
        </member>
        <member name="P:Cavern.Format.Renderers.EnhancedAC3Renderer.Enhanced">
            <summary>
            The stream is coded in the Enhanced version of AC-3.
            </summary>
        </member>
        <member name="P:Cavern.Format.Renderers.EnhancedAC3Renderer.WorkedAround">
            <summary>
            The stream contained sparsely decoded data, which can't be supported, as the documentation is incorrect.
            </summary>
        </member>
        <member name="P:Cavern.Format.Renderers.EnhancedAC3Renderer.DynamicObjects">
            <summary>
            Count of free-floating objects.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.EnhancedAC3Renderer.finalResult">
            <summary>
            Aligned timeslot results for final output.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.EnhancedAC3Renderer.inputMatrix">
            <summary>
            Standard-aligned PCM channels.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.EnhancedAC3Renderer.outputMatrix">
            <summary>
            Actually rendered channels.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.EnhancedAC3Renderer.applier">
            <summary>
            Creates the object mix from channels.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.EnhancedAC3Renderer.decodedBlock">
            <summary>
            Result of the last decoded block (interlaced samples).
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.EnhancedAC3Renderer.lfeTimeslot">
            <summary>
            LFE channel samples from the last timeslot.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.EnhancedAC3Renderer.lfeResult">
            <summary>
            LFE channel output.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.EnhancedAC3Renderer.inputData">
            <summary>
            Cache for the decoded bed data.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.EnhancedAC3Renderer.timeslotResult">
            <summary>
            Object samples for the last rendered timeslot.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.EnhancedAC3Renderer.timeslotPosition">
            <summary>
            Sample in the last fetched <see cref="F:Cavern.Format.Renderers.EnhancedAC3Renderer.timeslotResult"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.EnhancedAC3Renderer.#ctor(Cavern.Format.Decoders.EnhancedAC3Decoder)">
            <summary>
            Parse an E-AC-3 decoder to a renderer.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.EnhancedAC3Renderer.GetChannels">
            <summary>
            Get the bed channels.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.EnhancedAC3Renderer.GetStaticChannels">
            <summary>
            Get the &quot;objects&quot; that are just static channels.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.EnhancedAC3Renderer.Update(System.Int32)">
            <summary>
            Read the next <paramref name="samples"/> and update the objects.
            </summary>
            <param name="samples">Samples per channel</param>
        </member>
        <member name="M:Cavern.Format.Renderers.EnhancedAC3Renderer.RenderNextTimeslot">
            <summary>
            Render new object samples for the next timeslot
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.EnhancedAC3Renderer.Dispose">
            <summary>
            Free up resources created by the renderer.
            </summary>
        </member>
        <member name="T:Cavern.Format.Renderers.LimitlessAudioFormatRenderer">
            <summary>
            Renders a decoded Limitless Audio Format stream.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.LimitlessAudioFormatRenderer.streamCache">
            <summary>
            Intermediate array to render to.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.LimitlessAudioFormatRenderer.#ctor(Cavern.Format.Decoders.LimitlessAudioFormatDecoder)">
            <summary>
            Renders a decoded Limitless Audio Format stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.LimitlessAudioFormatRenderer.Update(System.Int32)">
            <summary>
            Read the next <paramref name="samples"/> and update the <see cref="F:Cavern.Format.Renderers.Renderer.objects"/>.
            </summary>
            <param name="samples">Samples per channel</param>
        </member>
        <member name="T:Cavern.Format.Renderers.Renderer">
            <summary>
            Renders a decoded stream with Cavern. The basic override is calling <see cref="M:Cavern.Format.Renderers.Renderer.SetupObjects(System.Int32)"/>, positioning
            said <see cref="F:Cavern.Format.Renderers.Renderer.objects"/>, and setting the <see cref="F:Cavern.Format.Renderers.Renderer.objectSamples"/> in <see cref="M:Cavern.Format.Renderers.Renderer.Update(System.Int32)"/>.
            </summary>
            <summary>
            Constants required for rendering.
            </summary>
        </member>
        <member name="P:Cavern.Format.Renderers.Renderer.HasObjects">
            <summary>
            The stream is object-based.
            </summary>
        </member>
        <member name="P:Cavern.Format.Renderers.Renderer.Channels">
            <summary>
            Content channel count.
            </summary>
        </member>
        <member name="P:Cavern.Format.Renderers.Renderer.Objects">
            <summary>
            Rendered Cavern objects. Might not be dynamic, channels are rendered as stationary objects.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.Renderer.objects">
            <summary>
            Rendered Cavern objects. Might not be dynamic, channels are rendered as stationary objects.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.Renderer.stream">
            <summary>
            Source stream.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.Renderer.reader">
            <summary>
            Sample supplier for the rendered objects.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.Renderer.objectSamples">
            <summary>
            Samples for the rendered objects in the last update.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.Renderer.#ctor(Cavern.Format.Decoders.Decoder)">
            <summary>
            Renders a decoded stream with Cavern.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.Renderer.GetChannels">
            <summary>
            Get the bed channels.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.Renderer.Update(System.Int32)">
            <summary>
            Read the next <paramref name="samples"/> and update the <see cref="F:Cavern.Format.Renderers.Renderer.objects"/>.
            </summary>
            <param name="samples">Samples per channel</param>
        </member>
        <member name="M:Cavern.Format.Renderers.Renderer.GetNextObjectSamples(System.Int32)">
            <summary>
            Update the objects and get the samples they need to render.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.Renderer.SetupObjects(System.Int32)">
            <summary>
            Set up the renderer for a number of objects.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.Renderer.SetupChannels">
            <summary>
            Set up the renderer for the channel-based stream's channels.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.Renderer.FinishSetup(System.Int32)">
            <summary>
            Finishing steps of creating a layout.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.Renderer.Dispose">
            <summary>
            Free up resources created by the renderer.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.Renderer.ChannelFromPosition(System.Numerics.Vector3)">
            <summary>
            Get which standard renderer position corresponds to which channel.
            </summary>
            <remarks>Internal Cavern channel positions are not the same.</remarks>
        </member>
        <member name="T:Cavern.Format.Renderers.RIFFWaveRenderer">
            <summary>
            Renders a decoded RIFF WAVE stream.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.RIFFWaveRenderer.admBlocks">
            <summary>
            Index of the last passed ADM block.
            </summary>
        </member>
        <member name="F:Cavern.Format.Renderers.RIFFWaveRenderer.render">
            <summary>
            Reused array for output rendering.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.RIFFWaveRenderer.#ctor(Cavern.Format.Decoders.RIFFWaveDecoder)">
            <summary>
            Renders a decoded RIFF WAVE stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.RIFFWaveRenderer.GetChannels">
            <summary>
            Get the bed channels.
            </summary>
        </member>
        <member name="M:Cavern.Format.Renderers.RIFFWaveRenderer.Update(System.Int32)">
            <summary>
            Read the next <paramref name="samples"/> and update the objects.
            </summary>
            <param name="samples">Samples per channel</param>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModel">
            <summary>
            An XML file with channel and object information.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModel.Programs">
            <summary>
            Complete presentations.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModel.Contents">
            <summary>
            Object groupings.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModel.Objects">
            <summary>
            Single/multitrack object roots.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModel.PackFormats">
            <summary>
            Object categorizers.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModel.ChannelFormats">
            <summary>
            Channel positions and object movements.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModel.Tracks">
            <summary>
            Format information of each discrete audio source.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModel.TrackFormats">
            <summary>
            Coding information of each discrete audio source.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModel.StreamFormats">
            <summary>
            Merging of format information elements.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModel.Movements">
            <summary>
            Positional data for all channels/objects.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModel.Feedback">
            <summary>
            Reports the percentage of completion [0;1].
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModel.FeedbackStartPercentage">
            <summary>
            Feedback starts from this ratio [0;1], ends at 1.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModel.minimal">
            <summary>
            Only read what's absolutely needed for rendering, optimizing memory use but breaking transcodability.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModel.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
            Parses an XML file with channel and object information.
            </summary>
            <param name="reader">Stream to read the AXML from</param>
            <param name="length">Length of the AXML stream in bytes</param>
            <param name="minimal">Only read what's absolutely needed for rendering,
            optimizing memory use but breaking transcodability</param>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModel.#ctor(System.Collections.Generic.IReadOnlyList{Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMProgramme},System.Collections.Generic.IReadOnlyList{Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMContent},System.Collections.Generic.IReadOnlyList{Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMObject},System.Collections.Generic.IReadOnlyList{Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackFormat},System.Collections.Generic.IReadOnlyList{Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat},System.Collections.Generic.IReadOnlyList{Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrack},System.Collections.Generic.IReadOnlyList{Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrackFormat},System.Collections.Generic.IReadOnlyList{Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMStreamFormat})">
            <summary>
            Creates an ADM for export by a program list created in code.
            </summary>
            <param name="programs">Complete presentations</param>
            <param name="contents">Object groupings</param>
            <param name="objects">Single/multitrack object roots</param>
            <param name="packFormats">Object categorizers</param>
            <param name="channelFormats">Channel positions and object movements in the order of the source tracks</param>
            <param name="tracks">Coding information of a track</param>
            <param name="trackFormats">Name, format, and reference information of a track</param>
            <param name="streamFormats">Merging of format information elements</param>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModel.Assign(Cavern.Format.Transcoders.AudioDefinitionModelElements.ChannelAssignment)">
            <summary>
            Change object order to reference the BWF file's correct channels.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModel.GetLength">
            <summary>
            Get the length of the main program.
            </summary>
            <remarks>For minimal imports, it's calculated from object movement.</remarks>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModel.ReadXml(System.Xml.XmlReader)">
            <summary>
            Extracts the ADM metadata from an XML file.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModel.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the ADM metadata to an XML file.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModel.GetSchema">
            <summary>
            Null by definition.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModel.FindMovement(System.Tuple{System.Int16,System.String})">
            <summary>
            Find a movement information by channel assignment data.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModel.Validate">
            <summary>
            Check if timings and positions are valid for this AXML. A string for each error is returned.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMBlockFormat">
            <summary>
            One position of an object's movement.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMBlockFormat.Position">
            <summary>
            Position in this timeslot.
            </summary>
            <remarks>Cavern and ADM have their y/z axes swapped. This property is in Cavern's coordinate system.</remarks>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMBlockFormat.Offset">
            <summary>
            Timeslot offset.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMBlockFormat.Duration">
            <summary>
            Length of the timeslot.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMBlockFormat.Interpolation">
            <summary>
            Time to take to fade to the next position.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMBlockFormat.ToString">
            <summary>
            Display block information on string conversion.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat">
            <summary>
            Positional data of a channel/object.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.Type">
            <summary>
            Type of the contained tracks (channels, objects, etc.).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.Blocks">
            <summary>
            Positional data for each timeslot.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.#ctor(System.String,System.String,Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackType)">
            <summary>
            Positional data of a channel/object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructs a channel format from an XML element.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.GetLength">
            <summary>
            Get the length of the contained object movement.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.Serialize(System.Xml.XmlWriter)">
            <summary>
            Create an XML element about this object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.Serialize(System.Xml.XmlWriter,System.Action{System.Double},System.Double,System.Double)">
            <summary>
            Create an XML element about this object, while reporting the percentage of completion as a <paramref name="feedback"/>.
            </summary>
            <param name="writer">XML stream access</param>
            <param name="feedback">Called when the percentage changes in a fiftieth of a percent</param>
            <param name="startPercentage">Already passed progress at the first element</param>
            <param name="addedPercentage">Total percentage added to the total with this serialization</param>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Read the values of an XML element into this object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.SerializeBlock(System.Xml.XmlWriter,Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMBlockFormat,System.String,System.Int32)">
            <summary>
            Serialization of a single position update block.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.SerializeOnlyBlock(System.Xml.XmlWriter,Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMBlockFormat,System.String,System.Int32)">
            <summary>
            Serialization of the only position update block.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.SerializeBlockMain(System.Xml.XmlWriter,Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMBlockFormat)">
            <summary>
            Inner serialization of a single block element without element start/end to be extensible.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.ParseBlockFormats(System.Xml.Linq.XElement)">
            <summary>
            Read the movement of an object.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.enabledValue">
            <summary>
            Value that marks an enabled feature.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.xAxis">
            <summary>
            Value that marks the X axis position.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.yAxis">
            <summary>
            Value that marks the X axis position.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat.zAxis">
            <summary>
            Value that marks the X axis position.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMContent">
            <summary>
            Contains a group of objects of an ADM program.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMContent.Objects">
            <summary>
            References to audio objects that are part of this content by ID.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMContent.#ctor(System.String,System.String)">
            <summary>
            Contains a group of objects of an ADM program.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMContent.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructs a content from an XML element.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMContent.Serialize(System.Xml.XmlWriter)">
            <summary>
            Create an XML element about this object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMContent.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Read the values of an XML element into this object.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMObject">
            <summary>
            Contains a single ADM object with multiple possible tracks.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMObject.Offset">
            <summary>
            Start of the object's existence.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMObject.Length">
            <summary>
            Length of the object's existence.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMObject.PackFormat">
            <summary>
            Referenced position/movement container by ID.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMObject.Tracks">
            <summary>
            References by ID to coding information of referenced audio data through the <see cref="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMObject.PackFormat"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMObject.#ctor(System.String,System.String,Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan,Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan,System.String)">
            <summary>
            Contains a single ADM object with multiple possible tracks.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMObject.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructs an object from an XML element.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMObject.Serialize(System.Xml.XmlWriter)">
            <summary>
            Create an XML element about this object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMObject.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Read the values of an XML element into this object.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackFormat">
            <summary>
            Contains position/movement data for each channel contained in an object.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackFormat.Type">
            <summary>
            Type of the contained tracks (channels, objects, etc.).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackFormat.ChannelFormats">
            <summary>
            Positional data of the channels related to this object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackFormat.#ctor(System.String,System.String,Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackType)">
            <summary>
            Contains position/movement data for each channel contained in an object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackFormat.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructs a pack format from an XML element.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackFormat.Serialize(System.Xml.XmlWriter)">
            <summary>
            Create an XML element about this object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackFormat.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Read the values of an XML element into this object.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMProgramme">
            <summary>
            Root element of the model's contained program.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMProgramme.Length">
            <summary>
            Length of the program.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMProgramme.Contents">
            <summary>
            ID references of contained <see cref="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMObject"/>s.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMProgramme.#ctor(System.String,System.String,Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan)">
            <summary>
            Constructs a program of <paramref name="length"/> in seconds.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMProgramme.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructs a program from an XML element.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMProgramme.Serialize(System.Xml.XmlWriter)">
            <summary>
            Create an XML element about this object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMProgramme.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Read the values of an XML element into this object.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMStreamFormat">
            <summary>
            Merging of format information elements.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMStreamFormat.Format">
            <summary>
            Coding of the track.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMStreamFormat.ChannelFormat">
            <summary>
            Referenced channel format by ID.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMStreamFormat.PackFormat">
            <summary>
            Referenced pack format by ID.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMStreamFormat.TrackFormat">
            <summary>
            Referenced track format by ID.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMStreamFormat.#ctor(System.String,System.String,Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrackCodec,System.String,System.String,System.String)">
            <summary>
            Merging of format information elements.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMStreamFormat.#ctor(System.Xml.Linq.XElement)">
            <summary>
            An ADM track format parsed from the corresponding XML element.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMStreamFormat.Serialize(System.Xml.XmlWriter)">
            <summary>
            Create an XML element about this object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMStreamFormat.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Read the values of an XML element into this object.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags">
            <summary>
            Contains tags that describe an ADM metadata.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.rootTag">
            <summary>
            Root element of an ADM metadata XML.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.rootNamespaceAttribute">
            <summary>
            Namespace attribute of the root element.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.rootNamespace">
            <summary>
            The XML namespace of an ADM XML.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.instanceNamespaceAttribute">
            <summary>
            Sub-namespace of the root element.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.instanceNamespace">
            <summary>
            Value for the sub-namespace of the root element.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.schemaLocationAttribute">
            <summary>
            ADM XML schema location URI attribute.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.schemaLocation">
            <summary>
            ADM XML schema location URI. Appended to <see cref="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.rootNamespace"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.languageAttribute">
            <summary>
            Attribute to set the language of the ADM XML.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.language">
            <summary>
            Language of the ADM XML.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.subTags">
            <summary>
            Required tags before actual content.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.programTag">
            <summary>
            Root element of the model's contained program.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.programIDAttribute">
            <summary>
            Name of a program's ID attribute.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.programNameAttribute">
            <summary>
            Name of a program's name attribute.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.startAttribute">
            <summary>
            Beginning timestamp of a program or object.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.programEndAttribute">
            <summary>
            End timestamp of a program. Must be start + length.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.contentRefTag">
            <summary>
            Reference to a group of objects by ID.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.contentTag">
            <summary>
            A group of objects.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.contentIDAttribute">
            <summary>
            Name of a content's ID attribute.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.contentNameAttribute">
            <summary>
            Name of a content's name attribute.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.contentDialogueTag">
            <summary>
            Dialog mixing method descriptor tag.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.objectRefTag">
            <summary>
            Reference to a single audio object by ID.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.objectTag">
            <summary>
            A single audio object with multiple possible tracks.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.objectIDAttribute">
            <summary>
            Name of an object's ID attribute.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.objectNameAttribute">
            <summary>
            Name of an object's name attribute.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.packFormatRefTag">
            <summary>
            Reference to a pack format by ID.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.packFormatTag">
            <summary>
            Contains position/movement data for all tracks in an object.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.packFormatIDAttribute">
            <summary>
            Name of a pack format's ID attribute.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.packFormatNameAttribute">
            <summary>
            Name of a pack format's name attribute.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.typeAttribute">
            <summary>
            Channel/object selector attribute for both pack formats and redundantly by standard in channel formats.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.typeStringAttribute">
            <summary>
            Redundant string version of <see cref="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.typeAttribute"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.channelFormatRefTag">
            <summary>
            Reference to positional data by ID.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.channelFormatTag">
            <summary>
            Contains positional data.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.channelFormatIDAttribute">
            <summary>
            Name of a channel format's ID attribute.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.channelFormatNameAttribute">
            <summary>
            Name of a channel format's name attribute.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.blockTag">
            <summary>
            One position of an object's movement.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.blockIDAttribute">
            <summary>
            ID of a block format.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.blockOffsetAttribute">
            <summary>
            Offset timestamp of a block.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.durationAttribute">
            <summary>
            Length timestamp of a block or an object.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.blockLabelAttribute">
            <summary>
            Speaker label for an audio block.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.blockCartesianTag">
            <summary>
            A block's coordinates are stored as cartesian coordinates.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.blockPositionTag">
            <summary>
            A block's position on one axis.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.blockJumpTag">
            <summary>
            Additional interpolation information.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.blockJumpLengthAttribute">
            <summary>
            Length of the interpolation of a positional timeslot.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.blockCoordinateAttribute">
            <summary>
            Axis of a positional data.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.trackRefTag">
            <summary>
            Reference to a track by ID.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.trackTag">
            <summary>
            Track coding information.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.trackIDAttribute">
            <summary>
            Name of a track's ID attribute.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.trackBitDepthAttribute">
            <summary>
            <see cref="T:Cavern.Format.BitDepth"/> of a track.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.trackSampleRateAttribute">
            <summary>
            Sample rate of a track.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.trackFormatRefTag">
            <summary>
            Reference to a track format by ID.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.trackFormatTag">
            <summary>
            Track and format information.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.trackFormatIDAttribute">
            <summary>
            Name of a track format's ID attribute.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.trackFormatNameAttribute">
            <summary>
            Name of a track format's name attribute.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.formatDefinitionAttribute">
            <summary>
            Attribute containing the encoding format of a track or a stream.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.formatLabelAttribute">
            <summary>
            The ID of <see cref="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.formatDefinitionAttribute"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.streamFormatRefTag">
            <summary>
            Reference to a stream format by ID.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.streamFormatTag">
            <summary>
            Channel/pack/track format grouping.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.streamFormatIDAttribute">
            <summary>
            Name of a stream format's ID attribute.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTags.streamFormatNameAttribute">
            <summary>
            Name of a stream format's name attribute.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan">
            <summary>
            Representation of a length of time, with digits cut at 1/100000th of a second.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.Zero">
            <summary>
            A time span of 0 seconds and 0 fractions.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.TotalSeconds">
            <summary>
            The total time of the time span in seconds.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.seconds">
            <summary>
            Seconds of time.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.fraction">
            <summary>
            5 decimal places of fractions of a second as ADM needs this many digits.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.#ctor(System.Double)">
            <summary>
            Representation of a length of time, with digits cut at 1/100000th of a second.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.#ctor(System.String)">
            <summary>
            Representation of a length of time, with digits cut at 1/100000th of a second.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.#ctor(System.Int32,System.Int32)">
            <summary>
            Representation of a length of time, with digits cut at 1/100000th of a second.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.op_Addition(Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan,Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan)">
            <summary>
            Add two time spans together.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.op_Subtraction(Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan,Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan)">
            <summary>
            Get the difference of two time spans.
            </summary>
            <remarks>Negative time spans are not supported for performance.</remarks>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.op_LessThan(Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan,Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan)">
            <summary>
            Checks if a time span is smaller than another.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.op_GreaterThan(Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan,Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan)">
            <summary>
            Checks if a time span is larget than another.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.Equals(Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan)">
            <summary>
            Checks if the two time spans are equal.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.IsZero">
            <summary>
            Gets if this time span represents no time.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.ToInvariantFloatString">
            <summary>
            Display the timestamp as a floating-point number with a dot.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.Equals(System.Object)">
            <summary>
            Checks if this time span is equal to another object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.GetHashCode">
            <summary>
            Get a basic hash for the time span.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTimeSpan.ToString">
            <summary>
            Get the AXML-compliant string format of the time span.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrack">
            <summary>
            Coding information of an ADM's track.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrack.ID">
            <summary>
            Unique identifier of the track.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrack.Bits">
            <summary>
            Bit depth of the track.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrack.SampleRate">
            <summary>
            Sampling rate of the track.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrack.TrackFormat">
            <summary>
            Reference to track format by ID.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrack.PackFormat">
            <summary>
            Reference to pack format by ID.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrack.#ctor(System.String,Cavern.Format.BitDepth,System.Int32,System.String,System.String)">
            <summary>
            Coding information of an ADM's track.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrack.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructs a track from an XML element.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrack.Serialize(System.Xml.XmlWriter)">
            <summary>
            Create an XML element about this object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrack.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Read the values of an XML element into this object.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrackFormat">
            <summary>
            Name, format, and reference information of a track.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrackFormat.Format">
            <summary>
            Coding of the track.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrackFormat.StreamFormat">
            <summary>
            Referenced stream format by ID.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrackFormat.#ctor(System.String,System.String,Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrackCodec,System.String)">
            <summary>
            Name, format, and reference information of a track.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrackFormat.#ctor(System.Xml.Linq.XElement)">
            <summary>
            An ADM track format parsed from the corresponding XML element.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrackFormat.Serialize(System.Xml.XmlWriter)">
            <summary>
            Create an XML element about this object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrackFormat.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Read the values of an XML element into this object.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ChannelAssignment">
            <summary>
            Connects RIFF WAVE channels with <see cref="T:Cavern.Format.Transcoders.AudioDefinitionModel"/> tracks.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.ChannelAssignment.Assignment">
            <summary>
            The parsed channel assignment.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ChannelAssignment.#ctor(System.IO.Stream)">
            <summary>
            Read the channel assignment from an ADM BWF file's related chunk.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ChannelAssignment.GetChunk(Cavern.Format.Transcoders.AudioDefinitionModel)">
            <summary>
            Get the bytes of a channel assignment chunk for an ADM.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ChannelAssignment.FindStream(Cavern.Format.Transcoders.AudioDefinitionModel,Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMChannelFormat)">
            <summary>
            Find a stream by movement information.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.ChannelAssignment.FindTrack(System.Collections.Generic.IReadOnlyList{Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrack},System.String)">
            <summary>
            Find the track that contains a track format.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMConsts.channelNames">
            <summary>
            Standard ADM channel names indexed by <see cref="T:Cavern.Channels.ReferenceChannel"/>s.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMConsts.channelLabels">
            <summary>
            Standard ADM channel labels indexed by <see cref="T:Cavern.Channels.ReferenceChannel"/>s.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMDialogueType">
            <summary>
            Supported dialogue mixing methods.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMDialogueType.nonDialogueContentKind">
            <summary>
            One of the mixing methods in <see cref="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.NonDialogueContentKind"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMDialogueType.dialogueContentKind">
            <summary>
            One of the mixing methods in <see cref="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.DialogueContentKind"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMDialogueType.mixedContentKind">
            <summary>
            One of the mixing methods in <see cref="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.MixedContentKind"/>.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.NonDialogueContentKind">
            <summary>
            Supported values for the <see cref="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMDialogueType.nonDialogueContentKind"/> dialogue mixing method.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.DialogueContentKind">
            <summary>
            Supported values for the <see cref="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMDialogueType.dialogueContentKind"/> dialogue mixing method.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.MixedContentKind">
            <summary>
            Supported values for the <see cref="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMDialogueType.mixedContentKind"/> dialogue mixing method.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackType">
            <summary>
            Supported <see cref="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackFormat"/> types.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackType.DirectSpeakers">
            <summary>
            For channel-based audio, where each channel feeds a speaker directly.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackType.Matrix">
            <summary>
            For channel-based audio where channels are matrixed together, such as Mid-Side, Lt/Rt.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackType.Objects">
            <summary>
            For object-based audio where channels represent audio objects and position updates are provided.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackType.HOA">
            <summary>
            For scene-based audio where Ambisonics and HOA are used.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMPackType.Binaural">
            <summary>
            For binaural audio, where playback is over headphones.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrackCodec">
            <summary>
            Known encodings of ADM tracks.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.AudioDefinitionModelElements.ADMTrackCodec.PCM">
            <summary>
            Pulse code modulation.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.AudioDefinitionModelElements.TaggedADMElement">
            <summary>
            An ADM element with an ID and a name.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.TaggedADMElement.ID">
            <summary>
            Identifier of the element.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.AudioDefinitionModelElements.TaggedADMElement.Name">
            <summary>
            Name of the element.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.TaggedADMElement.#ctor">
            <summary>
            An ADM element with an empty ID and name.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.TaggedADMElement.#ctor(System.String,System.String)">
            <summary>
            An ADM element with a set ID and name.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.TaggedADMElement.#ctor(System.Xml.Linq.XElement)">
            <summary>
            An ADM element parsed from the corresponding XML element.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.TaggedADMElement.Serialize(System.Xml.XmlWriter)">
            <summary>
            Create an XML element about this object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.TaggedADMElement.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Read the values of an XML element into this object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.TaggedADMElement.ToString">
            <summary>
            Displays the ID and the name of the element.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.TaggedADMElement.SerializeStrings(System.Collections.Generic.List{System.String},System.Xml.XmlWriter,System.String)">
            <summary>
            Export all elements from a list of strings to child elements with a given name.
            This is used for exporting multiple references by ID.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.TaggedADMElement.ParseStrings(System.Xml.Linq.XElement,System.String)">
            <summary>
            Import all of the given element's instances' values to a list.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.AudioDefinitionModelElements.TaggedADMElement.ParseTimestamp(System.Xml.Linq.XAttribute)">
            <summary>
            Convert a timestamp to samples if its attribute is present.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.DolbyMetadata">
            <summary>
            Transcodes Dolby audio Metadata chunks.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.DolbyMetadata.Version">
            <summary>
            Version of this metadata. The bytes are major, minor, revision, and build version numbers.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.DolbyMetadata.ChannelMode">
            <summary>
            Channel mode ID, determines the channel layout (acmod).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.DolbyMetadata.BitstreamMode">
            <summary>
            Bitstream mode ID, determines the content type (bsmod).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.DolbyMetadata.LFE">
            <summary>
            LFE channel is active (lfeon).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.DolbyMetadata.LanguageCodeEnabled">
            <summary>
            Language code is supplied (langcode).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.DolbyMetadata.CopyrightBit">
            <summary>
            The content is copyright-protected (copyrightb).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.DolbyMetadata.OriginalBitstream">
            <summary>
            The content is the original bitstream (origbs).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.DolbyMetadata.DialogNormalization">
            <summary>
            Apparent loudness of the content (dialnorm).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.DolbyMetadata.CreationInfo">
            <summary>
            Software used for creating this DBMD, 2 ASCII strings, 32 characters max.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.DolbyMetadata.CreatedWithVersion">
            <summary>
            Major/minor/patch versions at the "Created with" field.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.DolbyMetadata.FrameRateCode">
            <summary>
            Identifier of content frame rate.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.DolbyMetadata.ObjectMetadataPreamble">
            <summary>
            Unknown metadata at the beginning of the <see cref="F:Cavern.Format.Transcoders.DolbyMetadata.objectMetadata"/> segment.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.DolbyMetadata.ObjectCount">
            <summary>
            Number of audio objects present in the audio stream.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.programInfo">
            <summary>
            The program info field of DD+ metadata. Bits:<br />
            - 6: <see cref="P:Cavern.Format.Transcoders.DolbyMetadata.LFE"/><br />
            - 5-3: <see cref="P:Cavern.Format.Transcoders.DolbyMetadata.BitstreamMode"/><br />
            - 2-0: <see cref="P:Cavern.Format.Transcoders.DolbyMetadata.ChannelMode"/>
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.dialnormInfo">
            <summary>
            The dialog normalization field of DD+ metadata. Bits:<br />
            - 7: <see cref="P:Cavern.Format.Transcoders.DolbyMetadata.LanguageCodeEnabled"/><br />
            - 6: <see cref="P:Cavern.Format.Transcoders.DolbyMetadata.CopyrightBit"/><br />
            - 5: <see cref="P:Cavern.Format.Transcoders.DolbyMetadata.OriginalBitstream"/><br />
            - 4-0: <see cref="P:Cavern.Format.Transcoders.DolbyMetadata.DialogNormalization"/>
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.downmixInfo">
            <summary>
            Downmixing metadata (mode and gains).
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.DolbyMetadata.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            Reads a Dolby audio Metadata chunk from a stream without checking if it's valid or not.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.DolbyMetadata.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
            Reads a Dolby audio Metadata chunk from a stream with an optional validation.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.DolbyMetadata.#ctor(System.Byte)">
            <summary>
            Creates a Dolby Metadata that can be written to a bytestream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.DolbyMetadata.CalculateChecksum(System.Byte[],System.UInt16)">
            <summary>
            Gets the checksum value for a metadata segment.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.DolbyMetadata.Serialize">
            <summary>
            Create the output bytestream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.DolbyMetadata.CreateDolbyAtmosMetadata">
            <summary>
            Create the bytestream of a <see cref="F:Cavern.Format.Transcoders.DolbyMetadata.DolbyAtmosMetadata"/> block.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.DolbyMetadata.CreateObjectMetadata">
            <summary>
            Create the bytestream of an <see cref="F:Cavern.Format.Transcoders.DolbyMetadata.objectMetadata"/> block.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.version">
            <summary>
            Version used for writing DBMDs.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.DolbyDigitalPlusMetadata">
            <summary>
            Dolby Digital Plus metadata segment identifier.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.DolbyDigitalPlusMetadataLength">
            <summary>
            Default length of a <see cref="F:Cavern.Format.Transcoders.DolbyMetadata.DolbyDigitalPlusMetadata"/> segment.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.defaultProgramInfo">
            <summary>
            Default to 5.1 layout.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.defaultDialnormInfo">
            <summary>
            If no information is provided about them, protection should be enabled and the content is marked as original.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.defaultDownmixInfo">
            <summary>
            Default downmix is -3 dB on each channel.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.DolbyAtmosMetadata">
            <summary>
            Dolby Atmos metadata segment identifier.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.DolbyAtmosMetadataLength">
            <summary>
            Default length of a <see cref="F:Cavern.Format.Transcoders.DolbyMetadata.DolbyAtmosMetadata"/> segment.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.defaultCreationInfo">
            <summary>
            Creation info used for writing DBMDs. This default value has to stay for the DMBD to be valid.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.creationInfoFieldSize">
            <summary>
            Maximum number of characters for each creation info entry.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.defaultFrameRateCode">
            <summary>
            Default value of <see cref="P:Cavern.Format.Transcoders.DolbyMetadata.FrameRateCode"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.objectMetadata">
            <summary>
            Object-related metadata.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.objectMetadataPreamble">
            <summary>
            Unknown values that were the same for every checked <see cref="F:Cavern.Format.Transcoders.DolbyMetadata.objectMetadata"/> segment.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.objectMetadataTrashLength">
            <summary>
            Fixed length of skipped fields in <see cref="F:Cavern.Format.Transcoders.DolbyMetadata.objectMetadata"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.DolbyMetadata.defaultObjectMetadata">
            <summary>
            Default value of a single object's metadata.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.EnhancedAC3Body">
            <summary>
            Renders a single E-AC-3 substream and holds inter-frame data.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Body.Channels">
            <summary>
            Used full bandwidth channels. Maps the channel indexes to actual contained channels.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.channels">
            <summary>
            Used full bandwidth channels. Maps the channel indexes to actual contained channels.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Body.FrameResult">
            <summary>
            Full bandwidth samples from the last decoded frame.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Body.LFEResult">
            <summary>
            LFE samples from the last decoded frame.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.extractor">
            <summary>
            Source of decodable data.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.header">
            <summary>
            Header data container and reader.
            </summary>
            <remarks>Reading is done in the decoder.</remarks>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.#ctor(Cavern.Format.Transcoders.EnhancedAC3Header)">
            <summary>
            Renders a single E-AC-3 substream and holds inter-frame data.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.PrepareUpdate(Cavern.Format.Utilities.BitExtractor)">
            <summary>
            Do the mandatory steps before reading the audio blocks.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.PrepareUpdate(Cavern.Format.Utilities.BitPlanter)">
            <summary>
            Do the mandatory steps before writing the audio blocks.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.GetAuxData">
            <summary>
            Combine the found auxillary data.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.Update">
            <summary>
            Create or reuse per-channel outputs and separate auxillary bitstream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.ReadAux">
            <summary>
            Read the auxillary data field and add it to <see cref="F:Cavern.Format.Transcoders.EnhancedAC3Body.auxData"/>.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation">
            <summary>
            Contains and decodes exponent and mantissa data for a single channels.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.rawMantissa">
            <summary>
            A copy of the mantissa stream to be able to quickly transcode the block without re-encoding.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.mantissaBits">
            <summary>
            Length of the content in <see cref="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.rawMantissa"/> in bits.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.ReadTransformCoeffs(Cavern.Format.Utilities.BitExtractor,System.Single[],System.Int32,System.Int32)">
            <summary>
            Read the encoded mantissa values and convert them to transform coeffs into the <paramref name="target"/> array.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.WriteTransformCoeffs(Cavern.Format.Utilities.BitPlanter)">
            <summary>
            Write the encoded mantissa values to a bitstream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.IMDCT512(System.Single[])">
            <summary>
            Performs a 512-sample inverse modified discrete cosine transform in-place.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.IMDCT256(System.Single[])">
            <summary>
            Performs a 256-sample inverse modified discrete cosine transform in-place.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.DecodeTransformCoeffs(Cavern.Format.Utilities.BitExtractor,System.Single[],System.Int32,System.Int32)">
            <summary>
            Perform the actual work of <see cref="M:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.ReadTransformCoeffs(Cavern.Format.Utilities.BitExtractor,System.Single[],System.Int32,System.Int32)"/>.
            </summary>
            <remarks>Skipping this step is a huge performance gain in AC-3 to AC-3 transcoding.
            Values are 24-bit and signed, these can be mapped to floats without loss.</remarks>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.cache512">
            <summary>
            Precalculated values for the 512-sample IMDCT's IFFT.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.cache256">
            <summary>
            Precalculated values for the 256-sample IMDCT's IFFT.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.bap1">
            <summary>
            Grouped mantissas for bap = 1 (3-level) quantization.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.bap2">
            <summary>
            Grouped mantissas for bap = 2 (5-level) quantization.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.bap3">
            <summary>
            Mantissas for bap = 3 (7-level) quantization.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.bap4">
            <summary>
            Grouped mantissas for bap = 4 (11-level) quantization.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.bap5">
            <summary>
            Mantissas for bap = 5 (15-level) quantization.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.x512">
            <summary>
            Complex multiplication cache for 512-sample IMDCT.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.x256">
            <summary>
            Complex multiplication cache for 256-sample IMDCT.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.intermediate">
            <summary>
            Intermediate IMDCT array for 512-sample IMDCT.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.intermediate1">
            <summary>
            Intermediate IMDCT array for even 256-sample IMDCT.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.intermediate2">
            <summary>
            Intermediate IMDCT array for odd 256-sample IMDCT.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.output">
            <summary>
            Windowed time-domain samples after IMDCT.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.delay">
            <summary>
            Cache array for overlap-and-add.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.coeffSplit1">
            <summary>
            Even coefficients in 256-sample IMDCT mode.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.coeffSplit2">
            <summary>
            Odd coefficients in 256-sample IMDCT mode.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.host">
            <summary>
            The body for which the allocation is read.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.#ctor(Cavern.Format.Transcoders.EnhancedAC3Body,System.Int32)">
            <summary>
            Contains and decodes exponent and mantissa data for a single channels.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.CreateCoefficients(System.Int32)">
            <summary>
            Create the coefficients for an IMDCT transform.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.GenerateQuantization(System.Int32)">
            <summary>
            Generate the quantized values for a given symmetric quantizer (bap 1 to 5, by number of levels).
            </summary>
            <param name="levels">Number of quantized values</param>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.GenerateGroupedQuantization(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate the groups of quantized values for a given grouped symmetric quantizer (bap 1, 2, and 5).
            </summary>
            <param name="levels">Number of quantized values</param>
            <param name="groups">Number of values grouped per written mantissa group</param>
            <param name="groupBits">Bits used by a mantissa group</param>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.IMDCTSize">
            <summary>
            Maximum IMDCT transformation size.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.Allocation.window">
            <summary>
            Windowing function for the IMDCT transformations.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.bap1Pos">
            <summary>
            Index of the next mantissa in <see cref="F:Cavern.Format.Transcoders.EnhancedAC3Body.bap1Next"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.bap2Pos">
            <summary>
            Index of the next mantissa in <see cref="F:Cavern.Format.Transcoders.EnhancedAC3Body.bap2Next"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.bap4Pos">
            <summary>
            Index of the next mantissa in <see cref="F:Cavern.Format.Transcoders.EnhancedAC3Body.bap4Next"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.bap1Next">
            <summary>
            Next mantissa values in case the bap is 1.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.bap2Next">
            <summary>
            Next mantissa values in case the bap is 2.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.bap4Next">
            <summary>
            Next mantissa values in case the bap is 4.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.EnhancedAC3Body.ExpStrat">
            <summary>
            Meaning of values for chexpstr[ch], cplexpstr, and lfeexpstr.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.nlfegrps">
            <summary>
            Number of LFE groups.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.nlfemant">
            <summary>
            Fixed LFE mantissa count.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.ecplsubbndtab">
            <summary>
            Sub-band transform start coefficients.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.frmcplexpstr_tbl">
            <summary>
            Frame exponent strategy combinations.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.slowdec">
            <summary>
            Slow decay table.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.fastdec">
            <summary>
            Fast decay table.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.slowgain">
            <summary>
            Slow gain table.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.dbpbtab">
            <summary>
            dB/bit table.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.floortab">
            <summary>
            Floor table.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.fastgain">
            <summary>
            Fast gain table.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.bndtab">
            <summary>
            Banding structure tables.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.masktab">
            <summary>
            Bin number to band number table.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.latab">
            <summary>
            Log-addition table.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.hth">
            <summary>
            Hearing threshold table.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.baptab">
            <summary>
            Bit allocation pointer table.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.bitsToRead">
            <summary>
            Number of bits to read. Corresponds to each value of a BAP table.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.DecodeCouplingStrategy(System.Boolean,System.Int32)">
            <summary>
            Decode the (enhanced) coupling strategy information.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.DecodeCouplingCoordinates(System.Boolean)">
            <summary>
            Decode coupling coordinates and phase flags.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.EncodeCouplingStrategy(Cavern.Format.Utilities.BitPlanter,System.Boolean,System.Int32)">
            <summary>
            Encode the (enhanced) coupling strategy information.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.EncodeCouplingCoordinates(Cavern.Format.Utilities.BitPlanter,System.Boolean)">
            <summary>
            Encode coupling coordinates and phase flags.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.ApplyCoupling(System.Int32)">
            <summary>
            Add coupling with the required coordinates to a channel.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.DecodeAudioBlock(System.Int32)">
            <summary>
            Decode an (E-)AC-3 audio block.
            </summary>
            <param name="block">Number of the block in the currently decoded syncframe</param>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.DecodeAudioFrame">
            <summary>
            For E-AC-3, data for multiple blocks is included in an audio frame header.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.EnhancedAC3Body.DeltaBitAllocationMode">
            <summary>
            Handling of delta bit allocation data.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.DeltaBitAllocationMode.Reuse">
            <summary>
            Use the old delta bit allocation data for the current block too.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.DeltaBitAllocationMode.NewInfoFollows">
            <summary>
            Read new delta bit allocation data.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.DeltaBitAllocationMode.NoAllocation">
            <summary>
            Don't use delta bit allocation, even if it's read.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.DeltaBitAllocationMode.MuteOutput">
            <summary>
            Reserved value, which is handled by muting the stream.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.EnhancedAC3Body.DeltaBitAllocation">
            <summary>
            Delta bit allocation information.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.DeltaBitAllocation.enabled">
            <summary>
            Handling of delta bit allocation data (cpldeltba, deltba).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Body.DeltaBitAllocation.Offset">
            <summary>
            First bit allocation band (cpldeltoffst, deltoffst).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Body.DeltaBitAllocation.Length">
            <summary>
            Bit allocation band span (cpldeltlen, deltlen).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Body.DeltaBitAllocation.BitAllocation">
            <summary>
            Adjustment of the bit allocation mask (cpldeltba, deltba).
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.DeltaBitAllocation.Reset">
            <summary>
            Set the default values to mark an unused delta bit allocation.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.DeltaBitAllocation.Read(Cavern.Format.Utilities.BitExtractor)">
            <summary>
            Read the delta bit allocation from the bitstream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.DeltaBitAllocation.Write(Cavern.Format.Utilities.BitPlanter)">
            <summary>
            Write the delta bit allocation to the bitstream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.EncodeAudioBlock(Cavern.Format.Utilities.BitPlanter,System.Int32)">
            <summary>
            Encode an (E-)AC-3 audio block.
            </summary>
            <param name="planter">Bitstream to write to</param>
            <param name="block">Number of the block in the currently decoded syncframe</param>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.EncodeAudioFrame(Cavern.Format.Utilities.BitPlanter)">
            <summary>
            Write the combined block header that's present in E-AC-3.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.allocation">
            <summary>
            Per-channel bit allocation data.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.couplingAllocation">
            <summary>
            Coupling channel bit allocation data.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.lfeAllocation">
            <summary>
            LFE channel bit allocation data.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.skipFieldSyntaxEnabled">
            <summary>
            Skip field (some bytes of <see cref="F:Cavern.Format.Transcoders.EnhancedAC3Body.auxData"/>) can be present.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.skipLengthEnabled">
            <summary>
            Skip field (some bytes of <see cref="F:Cavern.Format.Transcoders.EnhancedAC3Body.auxData"/>) is present.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.skipLength">
            <summary>
            Size of the skip field (this many bytes of <see cref="F:Cavern.Format.Transcoders.EnhancedAC3Body.auxData"/> are contained in this frame.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.auxDataPos">
            <summary>
            Last written byte in <see cref="F:Cavern.Format.Transcoders.EnhancedAC3Body.auxData"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.auxData">
            <summary>
            Unprocessed auxillary data fields are added here.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.channelOutput">
            <summary>
            PCM output data of each channel.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.couplingTransformCoeffs">
            <summary>
            Transform coefficients for the coupling channel's last read audio block.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.lfeOutput">
            <summary>
            PCM output data for the LFE channel's last read audio block.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.CreateEncodeBackup">
            <summary>
            Some fields are changing mid-block, this have to be replicated while transcoding a body. To prevent overhead in regular decoding,
            a backup is created, and restored after each block, for fields that need it.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.RestoreEncodeBackup(Cavern.Format.Transcoders.EnhancedAC3Body)">
            <summary>
            Reverts the state to one created with <see cref="M:Cavern.Format.Transcoders.EnhancedAC3Body.CreateEncodeBackup"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.maxAllocationSize">
            <summary>
            Absolute maximum band. If arrays are allocated to this size, they can't be overrun.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.lfestrtmant">
            <summary>
            First mantissa of the LFE channel.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.lfeendmant">
            <summary>
            Last mantissa of the LFE channel.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.ParseSPX">
            <summary>
            Parse spectral extension data.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.ParseParametricBitAllocation(System.Int32)">
            <summary>
            Set endmant and nchgrps.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.groupAdd">
            <summary>
            Addition for each <see cref="T:Cavern.Format.Transcoders.EnhancedAC3Body.ExpStrat"/> to calculate group sizes.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Body.groupDiv">
            <summary>
            Divider of each <see cref="T:Cavern.Format.Transcoders.EnhancedAC3Body.ExpStrat"/> to calculate group sizes.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.ReadSPX(System.Int32)">
            <summary>
            Read spectral extension metadata for a given <paramref name="block"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.WriteSPX(Cavern.Format.Utilities.BitPlanter,System.Int32)">
            <summary>
            Write spectral extension metadata for a given <paramref name="block"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Body.ClearSPX">
            <summary>
            Set up SPX as unused.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3.syncWord">
            <summary>
            First word of all AC-3 frames.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3.syncWordLE">
            <summary>
            First word of all AC-3 frames in little-endian order.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3.mustDecode">
            <summary>
            Bytes that must be read before determining the frame size.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3.frameSizes">
            <summary>
            Frame size code to actual frame size in bytes for 48 kHz sample rate.
            For 44.1 kHz, frame sizes are 1393/1280 times these values.
            For 32 kHz, frame sizes are 3/2 times these values.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3.numberOfBlocks">
            <summary>
            Number of blocks per sync frame for each code.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3.sampleRates">
            <summary>
            Sample rates for each sample rate code.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3.channelArrangements">
            <summary>
            Possible channel arrangements in E-AC-3. The index is the ID read from the file. LFE channel is marked separately.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3.channelMappingTargets">
            <summary>
            If a custom channel mapping is present, these are the channels for each bit.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.EnhancedAC3.Decoders">
            <summary>
            Supported decoder versions.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.EnhancedAC3.StreamTypes">
            <summary>
            Types of programs in a single frame of a stream.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3.StreamTypes.Independent">
            <summary>
            Main program, can be decoded on its own.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3.StreamTypes.Dependent">
            <summary>
            Should be decoded with the associated independent substream.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3.StreamTypes.Repackaged">
            <summary>
            This frame was converted from AC-3, the E-AC-3 extra data will follow.
            Usually used to go beyond 5.1, up to 16 discrete channels.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3.StreamTypes.Reserved">
            <summary>
            Unused type.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.EnhancedAC3Header">
            <summary>
            Read or write an E-AC-3 header.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Header.ChannelMode">
            <summary>
            Channel mode ID, determines the channel layout (acmod).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Header.Blocks">
            <summary>
            Number of blocks per audio frame (numblks).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Header.LFE">
            <summary>
            Low Frequency Effects channel enabled (lfeon).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Header.SampleRate">
            <summary>
            Decoded sampling rate.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Header.SampleRateCode">
            <summary>
            Sampling rate code (fscod).
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Header.SubstreamID">
            <summary>
            Number of the substream (substreamid).
            0 marks the beginning of a new timeslot, incremented values overwrite previous frames.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Header.WordsPerSyncframe">
            <summary>
            Number of 16-bit words in this frame (words_per_syncframe).
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Header.channelMappingBits">
            <summary>
            Length of <see cref="F:Cavern.Format.Transcoders.EnhancedAC3Header.channelMapping"/>.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Header.Decoder">
            <summary>
            Used decoder type.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Header.StreamType">
            <summary>
            Type of the last decoded substream.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Header.StreamTypeOut">
            <summary>
            Type of the last encoded substream.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Header.bsmod">
            <summary>
            Bitstream mode, information about the type of the contained audio data.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Header.channelMapping">
            <summary>
            One bit for each active channel, the channels are in <see cref="F:Cavern.Format.Transcoders.EnhancedAC3.channelMappingTargets"/> (chanmap).
            </summary>
            <remarks>Null, if channel mapping is disabled (chanmape).</remarks>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Header.frmsizecod">
            <summary>
            AC-3 frame size code.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Header.Decode(Cavern.Format.Utilities.BlockBuffer{System.Byte})">
            <summary>
            Reads an E-AC-3 header from a bitstream.
            </summary>
            <remarks>Has to read a calculated number of bytes from the source stream.</remarks>
            <returns>A <see cref="T:Cavern.Format.Utilities.BitExtractor"/> that continues at the beginning of the audio frame
            or null if the frame is invalid or the end of stream is reached.</returns>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Header.Encode">
            <summary>
            Writes an E-AC-3 header to a bitstream and returns a <see cref="T:Cavern.Format.Utilities.BitPlanter"/> with a header already in place.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Header.GetChannelArrangement">
            <summary>
            Gets the channels contained in the stream in order.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Header.SetChannelArrangement(Cavern.Channels.ReferenceChannel[])">
            <summary>
            Overrides the channel mapping of the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Header.ParseDecoder(System.Int32)">
            <summary>
            Decoder version check.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Header.additionalDownmixInfo">
            <summary>
            Additional downmixing information (dmixmod, ltrtcmixlev, ltrtsurmixlev, lorocmixlev, lorosurmixlev).
            </summary>
            <remarks>Contains timecod1, if the header is not alternative.</remarks>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Header.additionalMixInfo">
            <summary>
            Additional mixing information (dsurexmod, dheadphonmod, adconvtyp, xbsi2, encinfo).
            </summary>
            <remarks>Contains timecod2, if the header is not alternative.</remarks>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Header.ReadBitStreamInformation(Cavern.Format.Utilities.BitExtractor)">
            <summary>
            Decodes the legacy or alternative AC-3 header after the ID of the decoder.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Header.WriteBitStreamInformation(Cavern.Format.Utilities.BitPlanter)">
            <summary>
            Encodes the legacy or alternative AC-3 header after the ID of the decoder.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Header.ReadBitStreamInformationEAC3(Cavern.Format.Utilities.BitExtractor)">
            <summary>
            Decodes the E-AC-3 header after the ID of the decoder.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Header.WriteBitStreamInformationEAC3(Cavern.Format.Utilities.BitPlanter)">
            <summary>
            Encodes the E-AC-3 header after the ID of the decoder.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Header.informationalMetadataEnabled">
            <summary>
            The informational metadata block is contained in this header.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Header.copyrightBit">
            <summary>
            The content is copyright protected.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Header.originalBitstream">
            <summary>
            The bitstream is unaltered.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Header.ReadInfoMetadata(Cavern.Format.Utilities.BitExtractor)">
            <summary>
            Parse informational metadata.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Header.WriteInfoMetadata(Cavern.Format.Utilities.BitPlanter)">
            <summary>
            Export informational metadata.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Header.mixingEnabled">
            <summary>
            Mixing metadata is present and should be used (mixmdate).
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Header.centerDownmix">
            <summary>
            Center downmixing level (cmixlev).
            When using E-AC-3, both LtRt and LoRo modes are included (ltrtcmixlev and lorocmixlev).
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Header.surroundDownmix">
            <summary>
            Surround downmixing level (surmixlev).
            When using E-AC-3, both LtRt and LoRo modes are included (ltrtsurmixlev and lorosurmixlev).
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Header.ReadMixingMetadata(Cavern.Format.Utilities.BitExtractor)">
            <summary>
            Parse mixing and mapping metadata.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Header.WriteMixingMetadata(Cavern.Format.Utilities.BitPlanter)">
            <summary>
            Export mixing and mapping metadata.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Header.GetMetadata">
            <summary>
            Gets the metadata for this codec in a human-readable format.
            </summary>
        </member>
        <member name="T:Cavern.Format.Transcoders.EnhancedAC3Merger">
            <summary>
            Combines multiple E-AC-3 streams, with a custom channel mapping. E-AC-3 can contain channel-based 3D audio up to 9.1.6,
            and combining a 5.1 stream with quad or stereo additions can reach it.
            </summary>
            <remarks>The first file to merge must be a valid E-AC-3 file on its own, not a dependent substream.
            This is required by standard.</remarks>
        </member>
        <member name="T:Cavern.Format.Transcoders.EnhancedAC3Merger.Source">
            <summary>
            A single stream to merge. Easy access to all required objects for reading an E-AC-3 header.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Merger.Source.Header">
            <summary>
            Alignment and content information of the stream.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Merger.Source.Body">
            <summary>
            Actual coded data of the stream.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Merger.Source.Reader">
            <summary>
            File accessor to the <see cref="P:Cavern.Format.Transcoders.EnhancedAC3Merger.Source.Header"/>.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Merger.Source.Frame">
            <summary>
            Raw bytes of the last decoded frame.
            </summary>
        </member>
        <member name="P:Cavern.Format.Transcoders.EnhancedAC3Merger.Source.ChannelCount">
            <summary>
            Number of discrete channels in this input stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Merger.Source.#ctor(System.IO.Stream)">
            <summary>
            Create all required objects for an E-AC-3 stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Merger.Source.NextFrame">
            <summary>
            Read the next frame of the input stream and return if it's available.
            </summary>
            <remarks>After calling this function, the next read bit in <see cref="P:Cavern.Format.Transcoders.EnhancedAC3Merger.Source.Frame"/>
            will be the start of the audio data.</remarks>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Merger.sources">
            <summary>
            Streams to merge.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Merger.layout">
            <summary>
            Target channel order.
            </summary>
        </member>
        <member name="F:Cavern.Format.Transcoders.EnhancedAC3Merger.output">
            <summary>
            File write stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Merger.#ctor(System.IO.Stream[],Cavern.Channels.ReferenceChannel[],System.String)">
            <summary>
            Construct an E-AC-3 merger for a target layout.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Merger.ProcessFrame">
            <summary>
            Processes the next sync frame (1536 samples), returns if the transcoding is done.
            </summary>
        </member>
        <member name="M:Cavern.Format.Transcoders.EnhancedAC3Merger.SetupHeaders">
            <summary>
            Modify the inputs' headers to have a forced channel mapping.
            </summary>
        </member>
        <member name="T:Cavern.Format.Utilities.BitExtractor">
            <summary>
            Read custom length words from a bitstream.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BitExtractor.Position">
            <summary>
            Next bit to read.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BitExtractor.BackPosition">
            <summary>
            Next bit to read from the back.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BitExtractor.Readable">
            <summary>
            New bits can be extracted.
            </summary>
        </member>
        <member name="F:Cavern.Format.Utilities.BitExtractor.source">
            <summary>
            Bytestream to get the data from.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitExtractor.#ctor">
            <summary>
            Construct an empty extractor to be expanded.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitExtractor.#ctor(System.Byte[])">
            <summary>
            Construct an extractor to a bitstream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitExtractor.#ctor(System.Byte[],System.Int32)">
            <summary>
            Construct an extractor to a bitstream with a truncated length of the <paramref name="source"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitExtractor.Clear">
            <summary>
            Make sure the next expansion will replace all data.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitExtractor.Expand(System.Byte[])">
            <summary>
            Add more bytes to the read queue.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitExtractor.Read(System.Int32)">
            <summary>
            Read the next custom length unsigned word.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitExtractor.ReadConditional(System.Int32)">
            <summary>
            Read the next custom length unsigned word, if a flag is set before it.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitExtractor.ReadSigned(System.Int32)">
            <summary>
            Read the next custom length signed word.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitExtractor.ReadBit">
            <summary>
            Read the next single bit as a flag.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitExtractor.ReadBitInt">
            <summary>
            Read the next bit and advance the position.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitExtractor.ReadBits(System.Int32)">
            <summary>
            Read the next masked flag value as an array.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitExtractor.ReadBitsInto(System.Byte[]@,System.Int32)">
            <summary>
            Append <paramref name="count"/> bits to the <paramref name="buffer"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitExtractor.ReadBytesInto(System.Byte[]@,System.Int32@,System.Int32)">
            <summary>
            Append <paramref name="count"/> bytes to the <paramref name="buffer"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitExtractor.Skip(System.Int32)">
            <summary>
            Skip some bits.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BitExtractor.Item(System.Int32)">
            <summary>
            Get a byte at a fixed position of the input data.
            </summary>
            <remarks><see cref="M:Cavern.Format.Utilities.BitExtractor.Expand(System.Byte[])"/> can remove bytes from the beginning of the cache.</remarks>
        </member>
        <member name="T:Cavern.Format.Utilities.BitPlanter">
            <summary>
            Write a stream with custom-sized blocks, down to the bit. This is initially written to a temporary cache,
            which has to be written to a byte-based stream with <see cref="M:Cavern.Format.Utilities.BitPlanter.WriteToStream(System.IO.Stream)"/>.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BitPlanter.BitsWritten">
            <summary>
            Total number of significant bits in the <see cref="F:Cavern.Format.Utilities.BitPlanter.cache"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Utilities.BitPlanter.cache">
            <summary>
            Auto-resized holder of the data.
            </summary>
            <remarks>Reallocation happens in <see cref="M:Cavern.Format.Utilities.BitPlanter.NextByte"/>.</remarks>
        </member>
        <member name="F:Cavern.Format.Utilities.BitPlanter.currentByte">
            <summary>
            The index of <see cref="F:Cavern.Format.Utilities.BitPlanter.cache"/> written next.
            </summary>
        </member>
        <member name="F:Cavern.Format.Utilities.BitPlanter.currentBit">
            <summary>
            The bit of the <see cref="F:Cavern.Format.Utilities.BitPlanter.currentByte"/> written next.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitPlanter.CalculateCRC16(System.Int32,System.Int32)">
            <summary>
            Get the CRC value of the written stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitPlanter.Overwrite(System.Int32,System.Int32,System.Int32)">
            <summary>
            Write a <paramref name="value"/> at a specific <paramref name="offset"/>
            from the start of a length in <paramref name="bits"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitPlanter.Write(System.Boolean)">
            <summary>
            Append a flag to the stream under construction.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitPlanter.Write(System.Byte[],System.Int32)">
            <summary>
            Append an array of bytes to the stream under construction, without aligning to byte borders.
            The length is given in bytes.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitPlanter.Write(System.Int32,System.Int32)">
            <summary>
            Append a custom width value to the stream under construction.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitPlanter.Write(System.Nullable{System.Int32},System.Int32)">
            <summary>
            Append a custom width conditional value to the stream under construction.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitPlanter.WriteBits(System.Byte[],System.Int32)">
            <summary>
            Append an array of bytes to the stream under construction, without aligning to byte borders.
            The length is given in bits.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitPlanter.WriteToStream(System.IO.Stream)">
            <summary>
            Write the constructed bitstream to a bytestream and reset this instance.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BitPlanter.NextByte">
            <summary>
            A byte was fully written, jump to the next one.
            </summary>
        </member>
        <member name="T:Cavern.Format.Utilities.BlockBuffer`1">
            <summary>
            Converts a function that fetches a given chunk of a stream to an object that can fetch a block with any size.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BlockBuffer`1.Readable">
            <summary>
            True if there's more data to read.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BlockBuffer`1.FreshFetch">
            <summary>
            Indicates that the <see cref="P:Cavern.Format.Utilities.BlockBuffer`1.LastFetch"/> was not yet read from.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BlockBuffer`1.LastFetchStart">
            <summary>
            The position of the first sample of the last exported block in the buffer.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BlockBuffer`1.LastFetch">
            <summary>
            Result of the last <see cref="E:Cavern.Format.Utilities.BlockBuffer`1.Fetcher"/> call.
            </summary>
        </member>
        <member name="F:Cavern.Format.Utilities.BlockBuffer`1.result">
            <summary>
            Reusable output array.
            </summary>
        </member>
        <member name="F:Cavern.Format.Utilities.BlockBuffer`1.lastFetchPosition">
            <summary>
            First sample from <see cref="P:Cavern.Format.Utilities.BlockBuffer`1.LastFetch"/> that wasn't collected.
            </summary>
        </member>
        <member name="E:Cavern.Format.Utilities.BlockBuffer`1.Fetcher">
            <summary>
            Calls when new block data is needed.
            </summary>
        </member>
        <member name="E:Cavern.Format.Utilities.BlockBuffer`1.Seeker">
            <summary>
            Jumps to a position in the source stream if it's supported.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BlockBuffer`1.#ctor(System.Func{`0[]})">
            <summary>
            Converts a function that fetches a given chunk of a stream to an object that can fetch a block with any size.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BlockBuffer`1.#ctor(System.Func{`0[]},System.Action{System.Int64})">
            <summary>
            Converts a function that fetches a given chunk of a stream to an object that can fetch a block with any size.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BlockBuffer`1.Create(System.IO.Stream,System.Int32)">
            <summary>
            Converts a stream reader to a block buffer of fixed size.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BlockBuffer`1.Clear">
            <summary>
            Flush the current cache and read a new block. This should be called when a stream position changes.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BlockBuffer`1.Read(System.Int32)">
            <summary>
            Read the next fixed number of elements from the stream.
            </summary>
            <remarks>The returned array can have a smaller length than <paramref name="elements"/>
            if there's no more data to be fetched.</remarks>
        </member>
        <member name="M:Cavern.Format.Utilities.BlockBuffer`1.ReadOne">
            <summary>
            Read the next value from the stream.
            </summary>
            <remarks>Returns the default value of <typeparamref name="T"/> when new data can't be fetched.</remarks>
        </member>
        <member name="M:Cavern.Format.Utilities.BlockBuffer`1.Seek(System.Int64)">
            <summary>
            Jumps to a position in the source stream if it's supported.
            </summary>
        </member>
        <member name="T:Cavern.Format.Utilities.BufferedInputStream">
            <summary>
            Constantly reads a stream in the background, and keeps a window in memory around the last read position for fast data access.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BufferedInputStream.BlockSize">
            <summary>
            Size of each cached block in bytes. The file is read in this big chunks.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BufferedInputStream.BlockCount">
            <summary>
            Maximum number of blocks to cache, adding together forward and backward caches.
            The total cache size is is <see cref="P:Cavern.Format.Utilities.BufferedInputStream.BlockCount"/> * <see cref="P:Cavern.Format.Utilities.BufferedInputStream.BlockSize"/>.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BufferedInputStream.CanRead">
            <summary>
            The wrapped stream can be read.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BufferedInputStream.CanSeek">
            <summary>
            The wrapped stream supports seeking.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BufferedInputStream.CanWrite">
            <summary>
            Input streams cannot be written.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BufferedInputStream.Length">
            <summary>
            Length of the wapped stream.
            </summary>
        </member>
        <member name="P:Cavern.Format.Utilities.BufferedInputStream.Position">
            <summary>
            Window center position in the wrapped stream.
            </summary>
        </member>
        <member name="F:Cavern.Format.Utilities.BufferedInputStream.blockSize">
            <summary>
            Size of each cached block. The file is read in this big chunks.
            </summary>
        </member>
        <member name="F:Cavern.Format.Utilities.BufferedInputStream.position">
            <summary>
            Window center position in the wrapped stream.
            </summary>
        </member>
        <member name="F:Cavern.Format.Utilities.BufferedInputStream.offset">
            <summary>
            The location of <see cref="F:Cavern.Format.Utilities.BufferedInputStream.blocks"/>[0] in the file.
            </summary>
        </member>
        <member name="F:Cavern.Format.Utilities.BufferedInputStream.blocks">
            <summary>
            Blocks cached in memory.
            </summary>
        </member>
        <member name="F:Cavern.Format.Utilities.BufferedInputStream.blockLock">
            <summary>
            Used as a lock for <see cref="F:Cavern.Format.Utilities.BufferedInputStream.blocks"/>.
            </summary>
        </member>
        <member name="F:Cavern.Format.Utilities.BufferedInputStream.readLock">
            <summary>
            A read is in progress. Seeking is blocked until it's finished.
            </summary>
        </member>
        <member name="F:Cavern.Format.Utilities.BufferedInputStream.update">
            <summary>
            The <see cref="F:Cavern.Format.Utilities.BufferedInputStream.blocks"/> array was modified, null elements shall be cached.
            </summary>
        </member>
        <member name="F:Cavern.Format.Utilities.BufferedInputStream.stream">
            <summary>
            The wrapped stream.
            </summary>
        </member>
        <member name="F:Cavern.Format.Utilities.BufferedInputStream.runner">
            <summary>
            Runs the <see cref="M:Cavern.Format.Utilities.BufferedInputStream.Worker"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BufferedInputStream.#ctor(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Wrap a stream to constantly read it in the background, and keep a window in memory
            around the last read position for fast data access.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BufferedInputStream.Flush">
            <summary>
            Clears all buffers for the wrapped stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BufferedInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read to a buffer from the wrapped stream. This is thread-safe.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BufferedInputStream.ReadByte">
            <summary>
            Read a single byte from the wrapped stream. This is thread-safe.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BufferedInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Move the reading pointer to a specific offset in the stream and the cache. This is thread-safe.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BufferedInputStream.SetLength(System.Int64)">
            <summary>
            Input streams' length cannot be changed.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BufferedInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Input streams cannot be written.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BufferedInputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the System.IO.Stream and optionally releases the managed resources.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BufferedInputStream.BlockUntilReadable">
            <summary>
            Block execution until the file <see cref="F:Cavern.Format.Utilities.BufferedInputStream.blocks"/> that is at the current <see cref="F:Cavern.Format.Utilities.BufferedInputStream.position"/> can be read.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BufferedInputStream.MoveBlocksIfNeeded">
            <summary>
            If the position passed the center of the cache, start caching.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.BufferedInputStream.Worker">
            <summary>
            Constant stream cacher function.
            </summary>
        </member>
        <member name="T:Cavern.Format.Utilities.ByteArrayExtensions">
            <summary>
            Functions to read/write various data from/to cached bytestreams.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.ByteArrayExtensions.IndexOf(System.Byte[],System.Byte)">
            <summary>
            Returns the index in the <paramref name="array"/> of the <paramref name="value"/>, or -1 if it's not found.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.ByteArrayExtensions.ReadCString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read an ASCII string from an offset until the buffer ends or the character count is reached.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.ByteArrayExtensions.ReadInt16(System.Byte[],System.Int32)">
            <summary>
            Read a 16-bit signed integer from the bytestream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.ByteArrayExtensions.ReadInt16BE(System.Byte[],System.Int32)">
            <summary>
            Read a big-endian 16-bit signed integer from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.ByteArrayExtensions.ReadInt32(System.Byte[],System.Int32)">
            <summary>
            Read a 32-bit signed integer from the bytestream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.ByteArrayExtensions.ReadInt32BE(System.Byte[],System.Int32)">
            <summary>
            Read a big-endian 32-bit signed integer from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.ByteArrayExtensions.ReadUInt16(System.Byte[],System.Int32)">
            <summary>
            Read a 16-bit unsigned integer from the bytestream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.ByteArrayExtensions.ReadUInt16BE(System.Byte[],System.Int32)">
            <summary>
            Read a big-endian 16-bit unsigned integer from the bytestream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.ByteArrayExtensions.ReadUInt32(System.Byte[],System.Int32)">
            <summary>
            Read a 32-bit unsigned integer from the bytestream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.ByteArrayExtensions.ReadUInt32BE(System.Byte[],System.Int32)">
            <summary>
            Read a big-endian 32-bit unsigned integer from the bytestream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.ByteArrayExtensions.WriteCString(System.Byte[],System.String,System.Int32,System.Int32)">
            <summary>
            Write an ASCII string to an offset until the buffer ends or the character count is reached.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.ByteArrayExtensions.WriteUInt16(System.Byte[],System.UInt16,System.Int32)">
            <summary>
            Write a 16-bit unsigned integer to the bytestream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.ByteArrayExtensions.WriteUInt32(System.Byte[],System.UInt32,System.Int32)">
            <summary>
            Write a 32-bit unsigned integer to the bytestream.
            </summary>
        </member>
        <member name="T:Cavern.Format.Utilities.IXDocumentSerializable">
            <summary>
            An object that can be serialized into an XDocument.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.IXDocumentSerializable.Serialize(System.Xml.XmlWriter)">
            <summary>
            Create an XML element about this object.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.IXDocumentSerializable.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Read the values of an XML element into this object.
            </summary>
        </member>
        <member name="T:Cavern.Format.Utilities.ParserExtensions">
            <summary>
            Common parsing utilities.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.ParserExtensions.ToFourCC(System.UInt32)">
            <summary>
            Convert a big-endian integer four-character code to characters.
            </summary>
        </member>
        <member name="T:Cavern.Format.Utilities.StreamExtensions">
            <summary>
            Stream reading extension functions. Provides functionality similar to <see cref="T:System.IO.BinaryReader"/> with better performance.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.Read(System.IO.Stream,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Read more than 2 GB into a buffer.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadASCII(System.IO.Stream,System.Int32)">
            <summary>
            Read a fixed-length ASCII string from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadBytes(System.IO.Stream,System.Int32)">
            <summary>
            Read a number of bytes from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadBytes(System.IO.Stream,System.UInt32)">
            <summary>
            Read a number of bytes from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadCString(System.IO.Stream)">
            <summary>
            Reads an ASCII string with a closing 0.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadInt16(System.IO.Stream)">
            <summary>
            Read a 16-bit signed integer from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadInt16BE(System.IO.Stream)">
            <summary>
            Read a big endian 16-bit signed integer from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadInt32(System.IO.Stream)">
            <summary>
            Read a 32-bit signed integer from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadInt32BE(System.IO.Stream)">
            <summary>
            Read a big-endian 32-bit signed integer from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadInt64(System.IO.Stream)">
            <summary>
            Read a 64-bit signed integer from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadUInt16(System.IO.Stream)">
            <summary>
            Read a 16-bit signed integer from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadUInt16BE(System.IO.Stream)">
            <summary>
            Read a big-endian 32-bit unsigned integer from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadUInt32(System.IO.Stream)">
            <summary>
            Read a 32-bit unsigned integer from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadUInt32BE(System.IO.Stream)">
            <summary>
            Read a big-endian 32-bit unsigned integer from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadUInt64(System.IO.Stream)">
            <summary>
            Read a 64-bit unsigned integer from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadUInt64BE(System.IO.Stream)">
            <summary>
            Read a big-endian 64-bit unsigned integer from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.ReadSingle(System.IO.Stream)">
            <summary>
            Read a 32-bit floating point number from the stream.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.BlockTest(System.IO.Stream,System.Byte[])">
            <summary>
            Tests if the next byte block is as expected, throws an exception if it's not.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.RollingBlockCheck(System.IO.Stream,System.Byte[],System.Byte[])">
            <summary>
            Tests if the next rolling byte block is as expected, if not, it advances by 1 byte.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.StreamExtensions.WriteAny``1(System.IO.Stream,``0)">
            <summary>
            Write any value to the stream.
            </summary>
        </member>
        <member name="T:Cavern.Format.Utilities.XDocumentExtensions">
            <summary>
            Extension functions for <see cref="T:System.Xml.Linq.XDocument"/>.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.XDocumentExtensions.AllDescendants(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the descendants that match a <paramref name="name"/>, disregarding the namespace.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.XDocumentExtensions.GetAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the value of an element's <paramref name="attribute"/> by name.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.XDocumentExtensions.GetElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the value of an element's <paramref name="child"/> by name.
            </summary>
        </member>
        <member name="M:Cavern.Format.Utilities.XDocumentExtensions.SerializeGroup(System.Collections.Generic.IReadOnlyList{Cavern.Format.Utilities.IXDocumentSerializable},System.Xml.XmlWriter)">
            <summary>
            Exports all elements of a group.
            </summary>
        </member>
    </members>
</doc>
